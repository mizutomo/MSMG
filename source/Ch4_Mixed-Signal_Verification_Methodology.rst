===========================================
Ch.4 Mixed-Signal Verification Methodology
===========================================

  * 以前は、アナログ回路とデジタル回路が完全に分かれていたので、アナログ回路の検証とMixed-Signalの検証はそれぞれ独立に行うことができた。現在では、アナログ回路とデジタル回路が密に結合して、さらに様々な階層にもまたがっているため、独立に検証することはできなくなった。この章では、Mixed-Signalのシミュレーションやアナログ機能記述を用いたチップレベルのシミュレーションにデジタルの検証技術であるアサーションやカバレッジ駆動検証手法を活用する方法を説明する。目標となるカバレッジを達成するためには、検証プランを事前に作成して、テストベンチの開発に使用しなければならない。また、Mixed-Signal回路における低電力の検証でも、アナログとデジタルの界面で特別な扱いをする必要がある。


Overview
=================

  * 近年の微細化の影響で、アナログ回路設計者もデジタル回路を取り入れる必要がある。特に微細プロセスによる変動を補正するキャリブレーション回路の搭載が必要となっている。つまり、現在のアナログ回路は、高精度なアナログブロックは、Mixed-Signalで構成されている。さらに、デジタル回路においてもタイミングやスキュー、電力の問題を考えると、ピュアなデジタル回路と言うよりは、Mixed-Signalの回路である、と言える。結局、今日の大半のSoCは、Mixed-Signalであり、検証の課題となっている。主な課題は、アナログ(ボトムアップ)とデジタル(トップダウン)で使用するツールや方法論が異なっていることである。すなわち、Mixed-Signalの検証のためには、アナログとデジタルの間に橋を架ける必要がある。

|

  * 別の問題として、検証ツールにおけるスループットの問題もある。SPICEにしろFast-SPICEにしろ、デジタルのシミュレータに比べると、数桁も遅い(エミュレータやハードウェアアクセラレータを用いても、まだ遅いでしょう)。DAC2011のパネルディスカッションでは、アナログ回路設計と検証のデジタル化、構造化、トップダウン化が議論となった。その中で、アナログ・Mixed-Signalに対しても、検証プランツールを導入し、アサーション検証、メトリックドリブン検証、自律型テストベンチを実現するためのUVMの導入が必要である、という結論となった。また、シミュレーションスループットの問題を解決するために、Verilog-A, Verilog-AMSやイベントドリブンによる動作が可能なRNM技術を用いた機能モデルによる検証手法に変えなければならない。

|

  * アナログ設計者は、デジタル回路のようにCPF/UPFを用いて、アナログ回路でも電力を管理したいと考えているが、これには3つの課題がある。デジタルとアナログの境界で信号を伝達するには、Logic→Electricalの変換(その逆も)を行わなければならないが、これには、その時々の電源の状態に依存している。シミュレータは、動的な電源レベルの変動や、シャットオフ、アイソレーションの条件をアナログとデジタルで同時に満たすことができるように、検証ツールは信号の相互変換を行わなければいけない。Mixed-Signalの検証がメインストリームに成るためには、新しいツール・手法が導入・開発され、満足なレベルまで熟成されないといけない。また、Mixed-Signalの検証に合うように形式手法も作りなおされる必要がある。以下では、これらの課題について述べる。


Mixed-Signal Simulation as the Fundation for Verification
--------------------------------------------------------------------

  * アナログの検証では、形式検証やエミュレーション、ハードウェアアクセラレーションは、まだまだ十分なレベルではない。そのため、Mixed-Signalの検証では、シミュレーションベースの動的な検証手法に頼らざるを得ない。これらの手法に共通している点は、コ・シミュレーションを使用するか、シングルカーネルのシミュレータを使用するか、ということである。コ・シミュレーションは、2つのネットリストを用い、それぞれを別の(UNIX上では、別々のプロセスが走る)シミュレータにより解析し、それぞれのエンジンはIPC(プロセス間通信)により通信される。それに対して、シングルカーネルシミュレータは、UNIX上で一つのプロセスとして実行され、より高度な同期機構と効率的なデータ交換により、エンジン/アルゴリズム間のデータ受け渡しを可能にしたものである。

  |

  * 設計者は、抽象度の高いレベル(Mathworks社のMATLABを使用することが多い)から、HDLとSPICEを組み合わせた低いレベルまで、様々なレベルを組み合わせてシミュレーションを行うことができる。各ブロックは、抽象度の高いレベル(例えば、WrealベースのVerilogモデル)や中間のレベル(Verilog-AMSモジュール)、低いレベル(回路図から生成されたSPICEネットリスト)でモデル化される。検証の際は、各抽象度のモデルを組み合わせてたり、ミックスさせたり、また市松模様のように絡み合わせることができる。様々な抽象度を使い分けることで、フォーカスするシミュレーションのターゲットを切り替えることができる。例えば、ブロックレベルに注目したり、レーンベースでシミュレーションを行ったり、マクロ単位や最後はフルチップのシミュレーションも可能である。抽象度を組み合わせた検証を行うことで、機能の確認や性能がスペックを満たしているかどうかの確認が可能となる。

  |

  * Mixed-Signalのシミュレーション技術は、今後、高速なイベントドリブン/システムレベルの手法(両方とのデジタル部の解析手法)と、遅いが高精度なアナログのアプローチの融合を模索することになるだろう。アナログシミュレーションのアプローチは、常微分方程式の構築と解の探索に基づくものである。また、抽象度では、モデルベースとSPICEネットリストベースでモデル化する方法があり、どの抽象度でモデル化を行うかで、解くべき方程式の数が変わってくる。また、アナログの機能モデルを記述する際に、効率的にシミュレーションすることを考慮しないで記述した場合、SPICEベースのモデルとほとんど同じSim時間になることがある(それでも、遅くなることはないが)。また、リントツールやモデル作成支援ツールが急速に広まりつつあるので、より効率的にモデルの記述が可能となっている。


Design Partitioning, Simulation Planning, Regressions
--------------------------------------------------------------------

  * トップダウン設計を実現するためには、計画を重視することと、モデルのスループット(シミュレーション?)を上げることが必要である。トップダウン設計の中心になる考え方は、カバレッジ率とシミュレーションスピードを両立した楽観的な検証ストラテジを見つけることである。設計の仕様書から、どのブロックを高抽象度のモデルにすべきか、また、どのブロックをトランジスタレベルで検証すべきか、を見つけることができる。そこには、設計ブロックの分割とシミュレーション計画が中心的な考えとなる。また、プロジェクトの開始段階で、設計が安定なシステムになることは、ほとんどないため、シミュレーション計画を構築する際には、レグレッションテストについても考慮する必要がる。

  |

  * 検証プランの構築には、通常動的な検証手法が用いられるが、検証ツールが必要十分なカバレッジを達成できるように、綿密な検証プランを作成する必要がある。ここでいう、検証プランは、実装のためのプランとは異なる。デジタル/SoCの設計チームでは、このようなプランを作成するために、専用の検証プランニングツールが用いられる。すなわち、検証プランは、実装のプラン(実際のテストベンチ)と共に開発される。デジタルの検証ツールでは、シミュレーション結果から、実装プランと目標の検証プランを比較することで、どの程度カバレッジが達成できたかのレポートを生成することができる。

  |

  * 典型的には、アナログ部の検証プランの作成には、スプレッドシートが用いられるなど、デジタルよりもアドホックなものである。しかしながら、スプレッドシートでは、実際のシミュレーション結果からプランに対して、自動的に結果を反映させることができない。Mixed-Signal向けの検証ツールでは、ブロックごとにどの抽象度のモデルを用いるか、デザインをどのように分割するか、どうやってシミュレーションを走らせるか、を選択できるようなツールになっている必要がある。現状では、このようなツールがないため、ギャップを埋めるために、ユーザがそれぞれのスクリプトを用いている。今後は、UVM-MSのような手法を導入して、デジタルの高度な検証をアナログ/Mixed-Signalにも適用していかなければならない。


Assertion-based Verification
--------------------------------------------------------------------

  * 複数の言語やツールでアサーションがデジタル回路の複雑な状態空間を扱えるようになったため、デジタル設計・検証ともに、アサーションベース検証が広く用いられるようになった。PSLやSVAがVerilog-AMSやWrealベースのVerilogで使用できるようになれば、Mixed-Signalの設計者にもアサーションベース設計が利用できるようになる。現在、それぞれの標準化団体によって、この拡張が行われている。UVM-MSでは、今やアナログ信号値に対してのモニタリング機構やチェック機構がサポートされており、標準的なものになりつつある。いくつかのベンダでは、Verilog-AMSに電圧値のようなアナログ信号を取り扱えるようにしたPSLとSVAをサポートしつつある。

  |

  * アサーションは、仕様の確認と設計の確からしさの両面を実行時に確認することができる。すなわち、実行時には、エラー発生箇所に近いところに配置したモニタの機能を持ち、エラー情報とカバレッジ情報の両方を出力することができる。アサーションを使用することで、検証を早くスタートすることができ、また、設計エンジニアと検証エンジニアがバグを早く検出し、取り除くことができる。また、設計者は設計意図をコードに埋め込むことで、後の統合工程での問題を最小化することができる。Mixed-Signalの設計と検証において、下記のメリットを取り込むことで、アサーションのメリットを享受することができる。

    * アサーションにより設計意図をデザインに組み込むことができる。
    * バグの近くで、アサーションを発火させられることができるので、バグの特定と除去が速くなる。
    * ファンクションカバレッジの取得が可能になる。

  * これからMixed-Signalの設計はより複雑になってくるため、アサーションベース設計は、ピュアなデジタル設計よりもますます重要となる。


Coverage Measurements
--------------------------------------------------------------------

  * アサーションは、メトリックドリブンのアプローチを行うときに、カバレッジを測定するポイント(coverpoints)としても使用される。すなわち、チェックすべきポイントをアサーションで記述しておき、これが、カバレッジツールによって、満たしたかどうかチェックされる。また、これ以外にも、ファンクショナル・ラインカバレッジも使用される。これらのアプローチは、既にデジタル回路の検証の世界で活用されているものであり、今後は、Mixed-Signalおよびアナログに拡張される。

  |

  * しかしながら、従来の離散的な状態を扱うカバレッジの方式では、連続な値を持つアナログの問題には、そのままでは適用できない。典型的な例として、あるアナログノードの電圧を検証する例を取り上げよう。もし、連続的な期待値が与えられた場合、連続的な値を離散値に変換する処理が必要となる。現在、SystemVerilogのカバレッジ定義では、アナログの連続値を、有限の式かもしくは離散的なカバーポイントに変換するようなcoverpointsを導入することを検討している。IEEEの標準となっているe言語では、既に同様の拡張が行われており、いくつかのツールで使用可能な状態になっている。UVM-MSによるメトリックドリブンな検証環境を作るためには、連続的なcoverpointsを用いたアサーションや離散化されたcovergroupsを用いた方法によるカバレッジ測定の確立が不可欠である。


Mixed-Signal Metric-Driven Verification
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * UVMは、ますます複雑化するデジタル検証のために使用されているものである。メトリックドリブン手法には、カバレッジ測定のためのランダム入力パターン生成や複数の検証言語のサポートが必要となる。また、UVMは開発の効率性を向上させるために、モジュール～チップ間、プロジェクト間で再利用を容易にする仕組みも持っている。もし、UVMがMixed-Signalに拡張され、UVM-MSが完成すると、これらの特性がアナログの検証でも使用可能となる。UMVの拡張は、アナログブロックに対しての検証プラン、アナログ入力信号生成、アナログプロパティの検証とアサート、アナログファンクショナルカバレッジの解析、に対して行われる。UVM-MSは、高抽象度なモデル(すなわち、WrealベースのVerilogモデルで記述されたRNM)を使用したアナログ回路をターゲットにしている。

  |

  * 自動化と特性の管理のためには、各々の検証プランを実行し、追跡するために、バッチ実行とレグレッション検証環境が必要となる。このデジタルの検証手法は、IPレベルでもチップレベルでも用いられている。IPレベルで、アナログ回路がモデル化されると共に、検証環境と検証プランが作成される。UVMは、AMSモデルやSPICEネットリストに対しても適用可能であるが、やはり、ベストなパフォーマンスを出すために、RNMでモデル化されるべきである。IPレベルで作られたテストプラン・モデル・検証環境は、SoCレベルで再利用され、デジタル・アナログによらず、統一的なMDVが適用される。


Verifying Low-Power Intent in MS design
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ここ数年、低消費電力への要求が多数の技術開発を推進してきた。例として、パワーシャットオフ技術(PSO, これは、パワーゲーティングとも呼ばれる)、多電源供給技術(MSV)、可変電圧可変周波数技術(DVFS)などである。これらの技術は、デジタル回路では既に用いられている。しかしながら、この技術は、純粋なデジタル技術だけで適用されるものではなく、Mixed-Signal回路にも適用可能なものである。このような電源の記述には、CPFやUPFなどの標準化されたフォーマットが用いられる。既に、EDAツールはCPF/UPFをサポートしており、今後は、Mixed-Signalへの適用のが主な課題となる。回路図が中心の世界(アナログブロックはたいていがそうである)では、電源の指定が暗黙的に回路図中に指定されることになる。Mixed-Signalの回路において、暗黙的に電源指定を行うことができるようになると、大規模なSoCの設計や検証でも利用できるようになる。設計された回路図から、CPFのような標準化されたフォーマットでパワー情報を抽出するツールがあれば、次には、デジタルブロックのパワー情報とどうやって結合させるか、さらに、パワー試行のシミュレーションでどのように使用するか、といったことが課題となる。

  |

  * 最近のMixed-Signalの検証ツールでは、アナログとデジタルをそれぞれ別のコアでシミュレーションを行い、電圧レベルや電源シャットオフ情報、状態復帰の情報をプロセス間で通信して、シミュレーションを進める方法が主流である。これは、時間変動するクオンティティや状態をシミュレータ間で受け渡せるようにするためである。これを可能にする技術は、パワーを交換するためのコネクタ素子(この素子は、デジタルとアナログの境界に配置される)である。これらのコネクタはCPFの記述に従い、自動的にパワー情報を交換し、この情報をイベントドリブンシミュレータ(デジタル)と回路シミュレータ(アナログ)のエンジンに受け渡す。このコネクタの作用により、アナログシミュレータは、隣接しているデジタルブロックの電源のレベルと状態を知ることができる。また、デジタルエンジンにも同様に隣接しているアナログ回路の状態が伝わる。この技術により、レベルシフタの挿入ミスや、多電源の接続ミスなどの根本的な不具合を検出することができる。


Mixed-Signal Simulation as Foudation for Verification
======================================================================

Gap Between Digital and Analog Verificaiton Processes
------------------------------------------------------------

  * 従来のアナログ回路設計の世界では、検証はボトムアップ的にトランジスタレベルでSPICEを用いて行われていた。すなわち、個々のブロックは、元の仕様から直接トランジスタレベルの回路図にインプリされ、ブロックごとに仕様を満たすかどうか検証を行っていた。このように個々に検証されたブロックは、他のブロックと同様に実装され、IPが出来上がる。このようなアプローチは、設計対象の規模が小さい時には、実にうまくいくが、設計の規模が大きくなり、複雑さが増して、また、扱っている信号がアナログからミックスド・シグナルになると、ボトムアップのアプローチは破綻してしまう。これは、トランジスタレベルでブロック以上の回路に対して、検証を行った場合に、リソースが非常に大きくなってしまうためである。また、各ブロックをシステムレベルで記述していなかった場合、もし、検証の最終段階で、もしブロック間の接続不良が見つかった場合でも、ボトムアップのアプローチでは、太刀打ちができない。

  |

  * それに対して、デジタル回路の検証は、本質的にはトップダウンであり、設計の初期段階から、チップレベルの検証プランを用いて、検証が行われる。このような検証プランは、チップレベルに限らず、どのようなレベルにでも適用することができる。このような検証プランを用いることで、制約付きランダム検証により、効率的に設計空間の探索が可能となったり、既存のレグレッションテストのパターンでどの程度機能カバレッジを満たしているかを設計者にフィードバックすることが可能となる。また、カバレッジを測定することで、テストが有効かどうかの判断ができる。

  |

  * Mixed-Signal SoCの複雑さの増加に従い、アナログとデジタルの検証はこれまで通りに独立に行うことが不可能となった。すなわち、もし、既存のブロックがボトムアップの手法で設計・検証されているとすると、チップへの組み上げのために、可観測ポイントを増やす必要がある。言い換えると、チップのインテグレータは、どのアナログ、ミックスド・シグナルのブロックが個別に検証されたものなのか、把握しないといけない。また、どの検証タスクがシステムレベルで実行できていないか、把握する必要がある。


Mixed-Signal and Mixed-Level Simulation
------------------------------------------------------------

  * これまで、デジタルの機能は、合成可能なVerilog/VHDLで設計を行ってきたが、このようなアプローチでは、デジタル回路とアナログ回路が密に結びついたミックスドシグナルの回路では、うまく機能しない。このようなタイトに結合されたモデルを作るためには、ミックスド・シグナルをそのまま表現できる高抽象度な言語を使用する必要がある。Verilog-AMS, VHDL-AMSは、このニーズを満たすものであり、実際にミックスドシグナルのモデリングによおく使用されている。結果として、いくつかの市販のシミュレータが、このような言語をサポートし、ミックスドシグナルモデルを用いたアナデジ混載シミュレーションを可能にした。

  |

  * さらに、離散的な世界(デジタル)と連続的な世界(アナログ)の二重性を持った複雑なシステムに対しての解析も必要となっている。微細化が進み、各IPのブロックの面積が小さくなり、たくさんの機能が詰め込めるようになると、複雑なデジタル制御を行いながら、トランジスタレベルで検証を行うのでは、不可能である。今後は、トランジスタレベルのアナログブロックではなく、機能的に等価な高抽象度なモデルを使用しなければならない(ただし、ピンレベルの精度は保っておく必要がある)。インテグレーションの各段階に応じて、検証のレベルが変わるため、モデルの抽象化のレベルもそれに応じて変化する必要がある。設計者は、モデルを作成するための言語として、抽象度のレベルに応じて、Verilog(-AMS), VHDL(-AMS), Verilog-A, (System)Verilog RNMを選択することができる。そのため、シミュレータには、これらの言語をサポートする必要がある。さらにシミュレータは、モデルの抽象度に応じた処理速度と精度を満たす必要がある。


New Ways of Looking at Mixed-Signal Verification
------------------------------------------------------------

  * これまでは、アナログブロックの仕様は、トランジスタレベルの回路図として実現されてきた。このようなアナログブロックは、単体で検証され、より大きなシステムへと組み込まれていく。そして、このプロセスは、全体のシステムが組み上がり、検証されるまで続く。この開発プロセスは、小さいシステムではよく機能するが、複雑なSoCでは破綻する。その限界は、以下によるものである。

    * デザインの複雑度が増すに連れ、シミュレーションのコストは非線形的に増加し、フルチップの検証においては、全ての検証をメットするために、法外なコストが発生してしまう。結果的にリスピンや設計の遅延が発生してしまう。

    * ブロック単体での検証では、他のシステムに組み込まれた時の影響などを考慮することができなくなっている。特に、トップダウンの検証プランを作成しなかった場合、このような不具合は、検証の最終段階で発生する。そして、市場への出荷が著しく遅れてしまう。

  * このような問題を防ぐために、設計チームは、階層構造を意識して、各ブロックのインプリと検証のゴールを決める必要がある。最も抽象度の低いレベルでは、各ブロックは最も詳細なレベルで記述され、最高の精度で検証される必要がある。しかしながら、各ブロックがシステムにインプリされるときには、トランジスタレベルの記述から、他のブロックとの通信可能な高抽象度なモデルに置き換わる必要がある。また、このような抽象的なモデルは、システムの検証が可能なように、十分に高いスループットが達成できるようなモデルでなければならない。このようなモデルを用いることで、計算のリソースを下げ、たくさんのシミュレーションを流すことができる。

  |

  * Mixed-Signalのデザインには、同じチップの上に、アナログとデジタルの機能が両方集積される。典型的には、アナログ部はSPICEや、アナログ/ミックスドシグナルの動作記述が可能な、Verilog-A, Verilog-ASM, VHDL-AMSで記述される。一方で、デジタル部は、Verilog, VHDL, SystemVerilogを用いて、RTLで記述され、その後、合成ツールによってゲートが生成される。ミックスド・シグナルシミュレーションのためには、以下の3つの機能を取り込む必要がある。

    * 連続的に時間変動する非線形微分方程式を解くアナログ回路用ソルバ。

    * 離散的な時間でイベントの順番どおりに処理が行われるデジタル回路用ソルバ。

    * デジタルのイベントとアナログの変数の間で同期する機構を持ち、それぞれのソルバで設定したセンシティビティリストで駆動される機能。


Analog and Digital Interaction
------------------------------------------------------------

  * ミックスド・シグナルがどのように機能するかは、アナログとデジタルのサブブロック間の相互作用が重要となる。アナデジ間の相互作用としては、主に2つある。一つは、アナログとデジタルの境界に存在する構造的な接続であり、もう一つは、時間連続系とイベントによる離散系との状態の共有である。このような概念を説明する目的は、Verilog-AMSは暗黙的な規則の下に使用されるからである。また、VHDL-AMSなどの他のミックスドシグナル用モデリング言語でも同様である。


Structural Aspects of Mixed-Signal
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 現在の設計フローの多くは、アナログブロック(連続系)とデジタルブロック(離散系)を組み合わせるフローとなっている。そのため、Mixed-Signalシミュレータがアナログとデジタルの間をどのようにしてつないでいるかを知ることは、役に立つ。Mixed-Signalの本質は、ドメインの定義になる。対象のドメインによって、担当するシミュレータが離散的なエンジンか、連続的なエンジンか決まる。ここで言うオブジェクトとは、階層間(インスタンス化したモジュールや、呼び出されたモジュール)のネットや変数のことである。ネットは、discreteもしくはcontinuousのドメインに分けられる。変数は、代入が発生した時の状態によって、continousかdiscreteのドメインに決められる。

  |

  * disciplineは、エネルギー保存系のシステムにおいて、ポテンシャルとフローを結びつけるものである。ネットは、dicrete/continuousのどちらかのドメインで宣言されるとともに、continuousのネットの場合には、さらにdisciplineを指定することができる。Verilog-AMSの言語仕様によると、デジタルブロックやprimitiveなネットは、discreteなネットをドライブすることしかできず、アナログブロックは、アナログのネットに作用するだけである。階層間のレベルを跨いでポートを繋ぐネットを信号と定義すると、全てdiscreteなポートを繋ぐ信号は、デジタルのドメインとなり、逆に、continuousドメインのみをまたぐ信号は、アナログのドメインとなる。そして、両方のドメインをまたぐ信号がMixed-Signalと呼ばれる。

  |

  * 言語にビルトインされた機能として、異なるドメイン間で値やタイミングを変換する機能がある。Verilog-AMSでは、コネクトモジュールがこの役割を果たす。一般的には、コネクトモジュールは、入出力間で2つのドメインを信号がまたぐ場合に、変換ルールに基づいて、信号を変換する。コネクトモジュールは、言語の拡張なので、ユーザが独自に仕様に合うようにコネクトモジュールをカスタマイズすることができる。コネクトモジュールは、ツールによって自動挿入されるか、もしくは、手動で挿入する。

  |

  * 回路中の全てのネットがdiscreteかcontinuousのドメインに分けられる前に、コネクトモジュールの挿入作業が行われる。この作業は、discipline resolutionと呼ばれ、ネットがdiscipline宣言付きで定義されたかどうか、が考慮される。Verilog-AMS言語は、2つのdiscipline解決方法を用意している。一つは、non-detailed、もしくは、defaultのdiscipline解決法であり、もう一つは、detailed discipline解決法である。non-detailedな方法は、disciplineを葉からrootまで続けられる限り、伝搬させるものである。この伝搬方法では、discipineが事前に定義されていないネットに対して、ユーザが指定したdisciplineを自動的に設定することができる。一度ネットのドメインが決まってしまうと、continuousとdiscreteのネットの間に適切なコネクトモジュールを自動的に挿入する。

  |

  * 他にもdetailed discipline resolutionと呼ばれる方法がある。これは、ボトムアップからcontinuous dicsiplineが階層を縦断しトップまで伝搬する方式である。一度、disciplineがトップ階層まで伝搬したら、今度は、push方式でdisciplineがトップからボトムに伝搬し、ボトムアップ・アプローチでは決まらなかったネットに対して、disciplineを設定していく。このようにボトムアップとトップダウンを繰り返しながらdisciplineを伝搬させていくことで、より多くのネットに対して、continuous disciplineを割り当てることができる。結果的に、このdetailed discipline resolutionは、高精度なシミュレーション結果を得たいときに適している。

  |

  * このセッションの目的は、読者に対して、ミックスド・シグナルの言語(というよりも、このような言語を実装したシミュレータ)が、どのようにして、階層的なデザインから連続信号と離散信号を区別しているか、という情報を与えることである。このコネクトモジュールの挿入、ドライバとレシーバの分離、多電源の選択、に関するさらに詳しい情報は、この本の参考文献を読んで欲しい。

.. ここまで('131127)


Examples of Analog and Digital State Sharing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ミックスドシグナル用モデリング言語には、アナログ・デジタル間の複雑な相関関係を記述するために、両ステート間をまたがって状態を共有することができる能力を持っていなければならない。このサブシステム間にわたって状態を共有することで、回路のビヘイビアを変更することが可能となる。例えば、単純なサンプルホールド回路の場合、デジタルクロックの立ち上がりで、アナログ信号を取り込むことが必要である。このような振る舞いをモデルで実現するために、言語には、デジタルのイベントのコンテキストに同期して、アナログで記述した動作が実行されるようになっていなければならない(逆も然り)。このような挙動を忠実に再現するために、シミュレータには、アナログもしくはデジタルの変化が他方にどのように影響を及ぼすかを追跡するために、アナログエンジンとデジタルエンジンの間で共有可能な「状態」をサポートしなければならない。このような異エンジン間の相関は、センシティビティとも呼ばれている。

  |

  * 前章では、状態を共有しているようなミックスドシグナルの例を幾つか挙げた。このセクションでは、ステートシェアリングがミックスドシグナルシミュレータでどのように実現されているか、を見ていきたい。アナログシミュレータもデジタルシミュレータも時間変動するシステムの状態を計算している。一般的には、ある時刻でのシステムの状態というのは、過去のシステムの状態の関数として表現される。これは、アナログシミュレータとデジタルシミュレータ共に共通である。ミックスドシステムの場合、ある状態変数はアナログシミュレータによって計算され、また別の状態変数はデジタルシミュレータによって計算される。つまり、ミックスドシグナルのモデルでは、ある時刻での状態は、過去のアナログとデジタルの状態から決まることになる。この理由から、それぞれのシミュレータは、それぞれの状態変数を更新するために、システム全体の過去の状態を知っている必要がある。

  |

  * アナログ・デジタル間のビヘイビアの相互関係は、イベントと値の感受性に分類される。このイベントセンシティビティがあるために、デジタル/アナログのエンジンは、イベントの出現を検知することができる。また、イベントが発生した際には、それぞれ必要なステートメントを実行することができる。また、バリューセンシティビティがあるために、値が変化し、オブジェクトの状態が変化した場合に、他方のステートメントを実行することができる。Verilog-AMSは、このような相互関係を実現するために、以下に示すように、デジタルとアナログの境界を拡張している。

  |

  * Digital primaries appearing in analog context(アナログコンテキスト中のデジタルステートメント)
    この場合、関係式はアナログソルバによって評価されるが、デジタル的な変数(ベクタ, 信号, 内部の実数・整数の変数, reg値)は、デジタルソルバによって計算される。

  |

  * Analog primaries appearing in a digital context(デジタルコンテキスト中のアナログステートメント)
    この場合、関係式は、デジタルソルバによって評価されるが、アナログ的な変数(ノード電圧, ブランチ電流, 内部の実数・整数の変数)は、アナログソルバによって計算される。

  |

  * Digital event appearing in analog context(アナログコンテキスト中のデジタルイベント)
    Event control refers to the @ operator. An analog event control is an @ statement which appears in the analog context, and a digital event is: posedge, negedge, named event, signal name, driver_update.

  |

  * Analog event appearing in digital context(デジタルコンテキスト中のアナログイベント)
    A digital event control is an @ statement in the digital context, and an analog event is: cross, above, timer, initial_step, final_step.


Mixed-Signal Synchronization
-----------------------------------

  * アナログソルバもデジタルソルバも、シミュレーションしているシステムで、時間通りの順序で、評価が行われ、シミュレーションが進行していく。つまり、ある時刻のシステムの状態を計算する前に、その前のシステムの状態は全て計算されている必要がある、ということである。ある時刻でシステムの状態を計算している間、どのシミュレータも他に影響をおよぼすような結果を生成する。もし、どちらかのシミュレータが状態を計算時間が、他のシミュレータの計算時間よりも、十分に少ないか、もしくは大きいとすると、一方のシミュレータには、ある時刻でのセンシティブデータを計算することができるが、他のシミュレータにはもはや計算することができない。すると、センシティブシミュレータはデータを受け取ることができず、シミュレーション結果は無効になる。これが、どちらかのシミュレータが計算したセンシティブデータが、他のシミュレータには受け取れないことを防ぐための同期の役割である。

  |

  * デジタルシミュレータは、イベントを時間でソーティングする処理を行う。どの時刻においても、デジタルシミュレータは、現在の時刻よりも未来に発生するイベントを受け取る前に、現在の時刻におけるイベントを全て消費する。しかしながら、一度ある時刻のイベントを全て実行してしまうと、デジタルシミュレータは、過去に戻れなくなったり、過去のイベントを受け取ることはできなくなる。

  |

  * アナログソルバは、キルヒホッフの電圧則と電流則で記述された非線形微分方程式を解くものである。ある時刻で解が見つかると、過去の解とタイムステップの長さから、未来の時間の解を予測する。この予測的な段階では、シミュレータはNewton-Raphsonなどのような反復法を用い、非線形微分方程式を解き、さらにその解が局所打ち切り誤差(LTE)のスペックを満足するかどうかチェックする。もし、次のタイムステップで、LTEのスペックを満たさない場合、この予測のタイムステップは破棄され、より小さなタイムステップで同じプロセスが収束するまで繰り返される。もし、アナログシミュレータにとって、センシティブなデータをデジタルシミュレータが計算する場合に、最新で収束した時間よりも早い時間が必要となった場合(ただし、その前に収束した時間よりは、遅い時刻のデータが必要)、最新の結果は破棄され、もう一度再計算される。言い換えると、デジタルシミュレータが使用したタイムポイントよりも過去のデータだけ、タイムステップは採用される(未来のタイムポイントは採用されない)。

  |

  * このプロセスの間、アナログシミュレータ側がデジタルシミュレータをキックするようなイベントを発生することもあり得る。同様に、デジタルシミュレータ(ある時刻でのイベントを処理する)がアナログシミュレータをキックすることもある。すなわち、同期化のプロセスは、デジタルシミュレータが処理できないプロセスをアナログシミュレータに作らせない、ということである(デジタルシミュレータは、過去の時刻には戻れないことを常に留意しておかねばならない)。さらに、2番目に新しいアナログの解(この解は、必ず採用される)は、次のデジタルのイベントが発生する時間よりも必ず小さいことを保証しなくてはいけない。このように、Mixed-Signalの同期化プロセスは、どちらかのシミュレータが受け取ることができないようなデータを計算することを防ぐための機構である、と言える。


What Constitues a Mixed-Signal Simulator Ready for the Future of Verification?(未来の検証において、ミックスドシミュレータは何をもたらすか?)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  * アナログ、ミックスドシグナル検証者は、ミックスドシグナルのシミュレータ選択時に、以下の重要な特性を考慮するしなければならない。


Support for a Wide Spectrum of Design Abstractions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 検証のプロセスの間、性能・精度・機能の面でトレードオフに見合うように、様々なブロックを組み合わせる必要がある。結果として、ミックスドシグナルシミュレータは、Verilog-AMSやVHDL-AMSで記述された高抽象度のモデルから、同一構造のパターンを持ったメモリのようなトランジスタレベルのブロックまで扱える必要がある。これらの複雑なブロック構成に対しては、マルチレートのシミュレータやパーティッショニングが有効な手段である。


Support for a Wide Spectrum of Design Launguages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * 検証は、パーツを組み上げる段階で行うものであるため、システムレベルの検証では、様々な異なった言語でモデル化されたブロックを組み合わせる必要がある。このような状況であるため、シミュレータには、(System)Verilog(-A/MS), VHDL(-AMS), SPICE, SystemC, e(検証言語)などのような標準化された言語が扱えないといけない。


Based on Reliable and Scalable Analog and Digital Simulation Kernels/Engines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ミックスドシグナルシミュレータは、デジタル/アナログのシミュレーションカーネルに大きく依存している(これは長所でもあり、短所でもある)。そのため、デジタル/アナログのソルバ自体が高信頼・産業界の標準・高ロバスト・スケーラブルであることが非常に重要である。さらに、2つのカーネルは、それぞれのエンジンの利点を損なうような形で(compromise)、統合させてはならない。もし、エンジンの統合がいい加減になされた場合、ユーザはミックスドシグナルの検証を行う上で、必要な機能がない(ただし、それぞれ単体のエンジンのみでシミュレーションをする場合には、使用できる)などの、不幸な事態に直面するだろう。


Support of Multiple Digital and Analog Simulation Engines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 様々な回路に対して、単一のシミュレータだけで解析を行うのは、ほぼ不可能になっている。世の中には、ある限定された回路の解析に特化した専用エンジンと、様々な回路に対応した汎用エンジンが存在している。シミュレータベンダには、それぞれの回路ブロックに対して、最適なエンジンで解析を行い、それらの結果をうまく統合することが求められている。ミックスドシグナルシミュレータの開発においても、同じことが求められている。ただし、ミックスドシグナルシミュレータの場合では、最適なエンジンの選択は、アナログ/デジタルのそれぞれをまたがった形で行われる必要がある。そのため、ミックスドシグナルシミュレータは、全てのカーネルを一つのプラットフォームに統合し、それぞれのパーティッション間で発生するイベント/値の変動をうまく調整(同期)する必要がある。


Support of Metric-Driven Methodology
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 完全なデジタルとアナログの境界は、狭くなってきているので、ミックスドシグナルの設計に、ピュアなデジタルやアナログの設計手法の導入は、一般的になりつつある。ここでは、メトリック駆動の設計手法について、特に述べる。デジタル設計における機能検証では、ブロックレベルにおいても、システムレベルのおいても、メトリック駆動検証を用いないと、発生頻度の低い状態を検証することができない。これらは、制約付きランダム検証、ファンクションカバレッジの測定、インターフェースの検証と同様の内部機能を検証するアサーションの開発によって、可能となる。システムにおけるアナログ量の増大に伴い、ミックスドシグナルシミュレータを用いた検証時にもメトリック駆動による検証は、重要な要件になりつつある。現在、よく使用されているミックスドシグナル用のハードウェア記述言語/検証言語(HDL, HVL)には、全てサポートされているわけではないが、たくさんの可能性が存在している。すなわち、いくつかのHDL/HVLは、実数モデルによる機能カバレッジをサポートしつつあり、また、実数値による制約付きランダム検証技術、電圧/電流などの電気的な量からアサーションを作る技術を実装しようとしている。


Design Partitioning, Simulation Planning, Regressiions
======================================================================

  * トップダウン設計は、設計/検証のプランニングと実行速度に、焦点を当てる。設計のプランニングは、どの部品の仕様を決めるのに高い抽象度のモデルを用いるか、また、どのパーツにトランジスタレベルのモデルを用いて検証するか、を決めるのに用いられる。設計プランニングの最初のステップは、デザインの分割とシミュレーションのプランニングである。プロジェクトの最初の段階で、シミュレーションのプランを作る一方で、レグレッションテストの計画も検討していると、安定したシステムを得ることができる。


Design Partitioning
------------------------

  * デザインのアーキテクチャと特性の文書は、計画策定段階のインプットとなる。これらのドキュメントから、デザインを小さなブロックに分割し、それぞれのブロックにスペックの配分を行う。ミックスドシグナルの設計においては、分割したブロックの方が設計フローを効率的に流すことができることから、複数のブロックに分割することは、基本的なことである。様々なドメイン(例えば、パワードメイン、クロックドメイン、ネットディシプリン)でブロックを分割したとしても、AMSでシミュレーションすることができる。このようなドメインによる領域の分割は、それぞれのブロックの実装の仕方や、トップレベルでの統合において、大きな影響を与える。最適なブロック分割をすることで、シミュレーション時間を削減したり、より自動化された設計フローを適用できることで、実装を速くしたり、スケジュールに最小の影響でECO(Engineering Change Orders)を適用できる。もし、分割の仕方を間違えると、ツールの力をフルには利用できなくなるため、設計が非常に困難になる場合がある。ミックスドシグナルのネットには、特別な扱いが必要になったり、設計フローがそのままでは適用できないことが多いため、分割の際には、トップレベルでなるべくミックスドシグナルのネットが出てこないように分割すべきである。

  |

  * 例として、チップの半分は低電圧で動作し、もう一方の半分は高電圧で動作するようなデジタル回路を考えよう。機能検証時には、全てのロジックがグループ化され、Verilogシミュレータで検証される。しかしながら、チップインプリの段階になると、パワー領域によって分割したり、電源島に分割し、それぞれをレベルシフタセルで繋ぐ必要がある。設計階層に対しての欠落が、P&Rツールを実行するときに問題を引き起こす。もし、適切に分割されているとすると、このような問題を防ぐことができる。

  |

  * 通常、設計仕様には、ブロック図が含まれる。もし、ないようであれば、別途作成する必要がある。このブロック図は、信号の流れとブロック構成のい理解に役立つ。パーティッショニングの最初のステップは、実装のフローに従って、デザインを分割することである。もし、アナログブロック内に大きなデジタルブロックが含まれているとすると、デジタルブロックの方に移動させ、デジタルの設計フローに従って、設計すべきである。まず最初のゴールは、トップレベルでのミックスドシグナルのネットの数を最小化することである。次に、パワしなければならない。アナログブロックの場合は、一つのブロックに複数の電源系が存在する場合がある。しかし、これらのブロックも、モデリングの効率化や、IPリユースなどの理由がある場合には、分割されるべきである。パーティッショニングの最後のステップは、容易な設計の分業、モデリングの効率化、および自然な形の境界になるように改善することである。例えば、モデリングによりシミュレーション時間が削減できるように、適切な分割を考慮すべきである。


Block Specification Creation(ブロックの仕様作成)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ブロックへのスペックの分配は、ブロック分割が完了した後に行う。それぞれのブロックに対しては、同じプロセスを適用することができる。少なくとも仕様には、ピンリストと動作条件(入力電圧、動作温度、その他の電気的な特記事項)が含まれなければならない。ブロックの仕様には、トップレベルの設計仕様から、引き継いだものや、設計がうまくいくように新たに設定された内部仕様からなる。ブロック分割の主要な目的は、検証と実装に対して、追加のプランニングが発生するかもしれない、ということを十分に理解することである(?)。


Simulation Planning
-----------------------------

  * シミュレーションテストプランは、トップレベル・ブロックレベル共に、機能面・性能面の検証全てをカバーしなければならない。テストプランは、チェックすべきコーナーの内容、作成が必要なモデル、ドライバ・負荷・チェック項目が書かれたテストベンチの内容、それぞれのテストの目的、が書かれた包括的なドキュメントである。このドキュメントの目的は、必要以上のシミュレーションをしなくても、検証カバレッジを最大化することである。さらに、人的リソース、計算機リソースの計画策定にも使用される。


Simulation Corner Cases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * テストプランは、まずシミュレーションを行うPVT(プロセス、電源条件、温度)コーナ条件を定義しなければならない。つまり、検証を行うプロセスの動作範囲、温度領域、電源電圧の範囲(それぞれの電源領域毎に)を明確にする。プロセスのコーナ条件は、デバイスのモデルファイルの中に、セクションとして定義されていたり、別ファイルとして定義され、Typicalのモデルファイルと同列に置かれていたりする。プロセスコーナーの目的は、プロセスの動作範囲全てをカバーすることではなく、設計で必要となる点だけをカバーしたものである(?)。例えば、高速のPMOSと高速のNMOSの組み合わせは"ff"、もしくは、"fast-fast"コーナーと呼ばれる。逆に、低速のPMOSと低速のNMOSの組み合わせは"ss"、もしくは、"slow-slow"コーナーと呼ばれる。大部分の設計には、この組み合わせだけで十分であるが、高速のPMOSと低速のNMOSの組み合わせ(その逆も)のスキューコーナーが必要となる設計もある。これらのコーナーはそれぞれ"fs"と"sf"と呼ばれている。さらに、モンテカルロ法によるサンプリングも必要となる。シミュレーションテストプランには、どのプロセスコーナーをデフォルトとして使用するか、どのコーナーを検証として使用するか、を明確にしなければならない。まずは、このコーナーの選択が全ての設計で最低限のカバレッジである。全ての回路ブロックに対して、このプロセスリストだけで検証をすればよい、というものではない。回路ブロックの中には、追加で他のプロセスコーナーで検証しないといけない場合もある。追加のシミュレーションが必要となるブロックには、シミュレーションテストプランに明記し、後でわかるようにしなければならない。

  |

  * 電圧のコーナー条件は、トップレベルの仕様や、個々のブロックの詳細仕様から、容易にわかるようになっている。全ての外部電源、内部電源を特定することができると共に、その変動範囲も見つけられる。これらの仕様を中心に配置することによって、シミュレーションに使用される入力電圧範囲が明らとなる。最後に、温度に対しての仕様は、トップレベルの設計仕様からくる。リユースされたIPを使用しているのであれば、新しいデザインの仕様での電源電圧の変動と温度変動に対して、特性を満たしているかどうか検証を行わないといけない。もし、特性がミートしないのであれば、検証プランにそのIPの検証を付け加える必要がある。全てのブロックでの温度領域と電圧範囲の仕様は、トップレベルでの設計仕様をカバーしていないければならない。


Identifying Tests and Specifying Test Details
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 必要となるテスト仕様の抽出は、テストプランの検討の一部である。テストプランリストの中には、トップレベルのファンクションテストや、トップレベルの性能テスト(要求があれば)、ブロックレベルの性能テスト(機能テストは言わずもがな)、モデルの妥当性確認(回路 vs モデル)が含まれていなければならない。それぞれのテスト項目は、わかりやすいように、テスト名とテストの目的(機能、性能、妥当性)が記述されるべきである。テストリストの例をTable 1に示す。テストの目的を明記することで、要求される精度や、テストされる項目、モデル開発のアプローチの仕方に役に立つ。


  .. list-table:: Table1 Simulation Test Purpose
    :header-rows: 1
    :widths: 10, 20, 20

    * - Type
      - Description
      - Why?

    * - システムの振る舞い
      - システム全体に対して、実際に使用するデータでテストする。
      - システム全体の機能検証、高水準なモデルの提供

    * - 機能検査
      - 全ての制御信号を動作させ、全てのモードの出力をモニタリングする。回路間が正しく接続されていることを確認する。
      - 接続性の確認、エラーの発生確認。

    * - アナログブロックの性能検査
      - 最も低い抽象度(回路レベル)で高精度のアナログシミュレーションを実施。
      - 全コーナーでのブロック性能の検証。

    * - アナログサブシステムの検証
      - クロックリカバリ回路のような複数のブロックでのアナログシステムの性能検証。
      - 複数のブロックでの性能の測定。このテストは最小限で良い。

    * - モデル妥当性検査
      - ビヘイビアモデルとトランジスタレベルの応答性の検証。
      - ビヘイビアモデルの信頼性を検証。

    * - ミックスドシグナルインターフェース(A/D, D/A)
      - 配線の寄生成分、ゲート負荷、タイミングを考慮したインターフェースの検証。
      - シミュレーション領域間のインターフェースの検証

    * - フルトランジスタ
      - スタートアップ、電源供給の順序、ダイオード接続、ショート、ラッチアップ、電源管理、スタンバイ、スリープモード、パワーダウンモードの検証。
      - ビヘイビアモデルでは観測できない特性をトランジスタレベルの回路を用いて検証。


  * テスト項目が決まれば、次にテストの詳細を決めなければならない。アナログ回路、ミックスドシグナルの世界では、スプレッドシートがよく用いられる。その中で、特にテストベンチのドライバや負荷、チェック項目などが記述される。テストベンチのセクションでは、DUTがどのような電源電圧、ロジック信号でドライブされるか、DUTはどのような負荷(抵抗、容量)に接続されるか、性能と機能の期待値、が記述される。これらの項目は、非常に重要であり、必ず記述されなければならない。それ以外にも、コーナー条件、初期値の条件、シミュレータの選択とセットアップの仕方、テストベンチの場所、ビヘイビアモデルに対する要件、も記述されていないければならない。

  |

  * テストプラン作成時に、コーナーリストから、シミュレーションを行うべきコーナーを選択しなければならない。追加のコーナー条件についても、この段階で付加される。また、それぞれのテストでの初期条件(Initial Condition)も追加される。異なった初期条件でシミュレーションを行った場合、異なった結果を生み出すことがある。あらかじめ、初期条件を明記しておくことで、このような曖昧さを除去することができる。次に、テストベンチ、回路図、設定ファイルの格納場所や、スティミュラス・信号源などが記述される。これらのビューの名前を明らかにしておくことで、ライブラリマネージャで容易に見つけることができたり、ヒューマンリソースの早急なシフトが可能となる。さらに、これらのデータは、テープアウト中はデータのロケーションが変わることはないため、テープアウトが終わるまでにアーカイブしておくとよい。シミュレーションのステート(設定)は、他のテストベンチビューとともに、保存され、ドキュメント化されるべきである。このシミュレーションのステータスファイルには、シミュレータのセットアップ情報(シミュレータの選択、設計変数、解析の設定、アウトプットの設定)が含まれる。それぞれのテストでは、最低でも、実行されるべきシミュレータと解析の情報がドキュメント化されていなければならない。そして、このデータはスケジューリングや、後に述べるモデルの選択時に役に立つ。

  |

  * 最後に、シミュレーションに使用されるビヘイビアモデルも、この段階で特定されなければならない。シミュレーションに必要となるモデルを全てリストアップすることが目的である。それぞれのテストに必要となるモデルをリストアップすることにより、次節で議論する包括的なモデリングプランの作成につながる。


Modeling Plan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * モデリング計画書は、シミュレーションテスト計画書の一部と位置づけられているドキュメントであり、テスト計画書やトップレベル仕様書、ブロック仕様書などから作成される。この文書の目的は、モデル開発者に対して、ビヘイビアモデルの仕様を提供することである。モデリング仕様書は、デザインを検証するために必要なことが全て記述されなければならない。前節で述べたように、必要なモデルは、テスト計画書作成段階でリストアップされている。それぞれのモデルは、ブロック仕様書で定義された機能を持つピンのリストを持っている。最後に、モデルの意図を明確化するために、モデルの目的や主要な機能が記述され、さらに、シミュレーションでのモデルの使用方法が明記される。これらの情報から、モデル化に適した言語の選択が行われる。

    * Verilog and VHDL: 標準デジタルモデリング言語

    * Verilog-AMS and VHDL-AMS: 標準ミックスドシグナル言語

    * Verilog-A: Verilog-AMSのアナログサブセット言語

  * もし、アナログに特化シミュレータ(SPICE or FastSPICE)を使用するのであれば、Verilog-Aのみが使用可能な言語であり、デジタルのシミュレータのみを使用するのであれば、Verilog, VHDLがモデリング言語となる。

  |

  * モデリング計画書の別の目的として、それぞれのセルの要件を事前にレビューすることで、開発しないといけないモデルの数を減らせることである。Verilog-AMSをデフォルトのモデリング言語とすることで、アナログ・デジタルのモデルの結合が自動的に行われる。Verilog-AMSがそのままでは使用できないのは、RTLで合成を行うときと、Verilog-AMをサポートしていないSPICEを使用する場合のみである。


Resource Scheduling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * トップダウン設計を行うことで、製品開発時に同時開発が可能となる。すなわち、低次元のブロックの実装が完了しなくても検証を行うことが可能となる。デザインの分割を実施し、ブロックごとにスペックを割り当てることで、複数のエンジニアが同時にブロックの設計を行うことができる。この方法により、市場に投入するまでの時間を削減できたり、デザイン全体の検証カバレッジを上げることで、1回の設計で成功する確率が高くなる。また、ピークが発生しないように、人間とコンピュータのリソースを調整することもできるようになる。すなわち、適正な人数の設計者をモデルの作成と検証に割り当てることができ、適正なツールのライセンス数を用意することができるようになる。さらに、必要な計算量の見積が容易になる。シミュレーションテストプランは、重要な設計マイルストーン毎に、締め切りに間に合うかどうか、チェックされる。


Physical Implementation Plan, Early Floorplanning, and Physical Verificaiton Plan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 計画策定時には、チップ実装(レイアウト上での信号と制御のフロー, 電力分配, ブロックの実装に必要なリソース割り当て)のことも考慮しなければならない。パーティッショニング段階でプロアプランを行うことで、代替のブロックの配置状況や、ブロックの形状を知ることができる。さらに、マスク設計者が、初期段階での最適なピンの配置を検討することもできる。また、配線の混雑度を設計初期段階で知ることも可能である。特に、先端プロセスノード使用時には、物理検証の計画を行っておくことで、将来の問題を取り除くことができる。先端プロセスノードでは、リソグラフィのチェックや密度ルールのチェック、ポリ配線の向きのルール、チャネルベースのルールなどが、デザインの分割に影響を及ぼしうる。物理的な効果を無視して、アーキテクチャの設計やブロック分割を行った場合、設計サイクルの後半で重大な問題が発生するかもしれない。


Regression Tests
---------------------

  * Mixed-Signalの設計において、トップレベルシミュレーションとは、デジタルの回路とビヘイビアモデルにより抽象化されたアナログ回路を組み合わせてシミュレーションを行うことである。Mixed-Signalのネットやアナログの機能モデルを含んええいてもデジタルの検証技術を適用することが可能である。特に、アサーションベースの検証手法は、検証カバレッジを向上させるために、ぜひとも取り入れるべきである。このようなデジタルスタイルのシミュレーションは、トランジスタレベルのシミュレーションと比較して、高速に実行できる。そのため、多数の検証パターンを実行することが可能である(訳が怪しい)。さらに、いくつもの設定条件で検証することができる。このようなテストを実行することで、ブロックの特性が全体の仕様を満足しているかどうかわかる。理想的には、設計の進捗に従って、テープアウトまで、継続して、テストが実行されるべきである。このようなテストは、一般的に回帰テストと呼ばれており、デザインの変更や設計が完了したブロックが設計仕様を満たしているかどうか、継続的にチェックすることができる。

  |

  * トランジスタレベルで、アナログ回路の性能回帰テストを行うことは、シミュレーション速度の問題から、尻込みするかもしれない。ブロックの性能検証に必要な大量の数のシミュレーションを管理したり、自動的にシミュレーションを実行するテストベンチマネージメントツールがある。しかしながら、このツールを用いても、シミュレーション時間の問題については、解決することができない。ビヘイビアモデルチェッカ(ビルトインの検証チェッカや、シミュレーション結果解析ユーティリティ)を使用することで、シミュレーション結果の検証を楽にすることができる。


Assertion-Based Verification
=========================================================

* | 定義する事によって、Assertionは意図した設計の動作を捕まえます。
  | Assertion-Based Verification (ABV)は、デジタルIC設計者によって証明された強力な評価アプローチで、評価技術者が設計品質改善と市場投入までの時間を削減する事が出来ます。
  | Assertionは開発設計、評価環境の間に記述されます。設計者と評価技術者の両方がAssertionとして、要求物を明確にして理解する中で必要とされます。

* 与えられたブロックの設計者は、以下によってブロックのABVを可能にできます。

  * ブロックと残りのデザイン間のインターフェイスのプロパティを反映するAssartionを置く、又は書く事（図１の左から右へ数えて1,3,5番目のアサーション）

  * 改修されたブロックのインターフェイスに関して作られたいかなる追加前提もAssertionとして文章化される。

  * ブロックのサブコンポーネント間に起きるであろう重要な相互作用に関するassertionを書く事。

  * 通常機能、境界条件、起動動作やその他の予想できるエラーと関係のある予想できるエラーのassertionを書く事。

  * 知られているコーナー条件と評価されるデザインの複合領域を保証するためのカバレッジポイントを書く事。


* | 設計者は、ブロックをその振る舞いが書かれたassertionを使う事で評価できる。
  | まれに、設計者はブロックの振る舞いを正しく評価するために、フォーマルな解析を使用できる。
  | 彼らは、一般的なシナリオでブロックの動作が正しいかテストするためにシミュレーションを使用する事が出来る。

* 評価技術者又はデザインインテグレーターは、デバイスのための機能仕様から引き出されたassertionとカバレッジポイントを定義する。

* 例えば、評価技術者は、以下を保証するためにassertionを定義するだろう。

  * デザインが常に有効な構成(配列)に入っている。

  * デザインと環境が正しくコミュニケーションしている。

  * デザインがその入力に対して正しく応答している。（例えば、図1の左から2,4番目のAssertion)

    .. image:: ./img/AssersionInputImage.png
       :alt: Figure 1. Device under Test(DUT) with Embedded Assetions



* | 評価技術者は、デザインが完全に評価されたことを保証するために機能カバレッジの測定に関心があります。
  | その目的のために評価技術者は、以下の事をチェックするために機能カバレッジポイントを定義します。

  * デザインが全ての有効な構成で評価されている。

  * デザイン・環境間のコミュニケーションプロトコルの全ての可能な変化が検証されている。

  * すべての、又は少なくとも代表の、入力の変化組み合わせが検証において使われている。

  * すべての、又は少なくとも代表の、出力の変化組み合わせが検証において観察されている。

* | PSLやSVAといった標準のassertion言語は、デジタルスペースのロジック設計者と評価技術者の必要性に合わせて発展してきた。
  | そして、ダイナミック(シミュレーションベースとassertionベースの）テストとフォーマルな検証方法の両方で使われてきた。
  | そのようなassertion言語は、表2にリストされるデザインに関する質問を提起、検証するためのフォーマルなフレームワークを提供する。


 .. csv-table:: Table2.Basic Questions and Property Types
    :header: "Question","Property Type"
    :widths: 150,50

    "時間に依存せず、発生するセット条件をもつ信号はあるか？","不変量（式）"
    "確かなタイムフレーム内で発生するふるまいのセットを持つ信号があるか？","境界のある不変量（式）"
    "デザインはセット動作を引き起こす境界条件を含むか？","境界条件"
    "エラー条件として延べられる値、又は順番を明記する方法があるか？","BUGの識別"
    "確かである信号の振る舞いがデザインの機能性にクリティカルであるか？","信号値"


Assertions in the Analog and Mixed-Signal Space
--------------------------------------------------

* | アナログ又はミックスドシグナルのための検証は、計画し実行する事がますますに困難になって来ている。
  | これらの基本的な困難は以下の３項目。


  * 一貫した言語と、そしてディスクリートイベントドリブンシステム、ミックスドシグナルそして連続時間変化のシステム、に渡るアサーションの形式に評価目的を表現するための完全なスペクトラムのメソトロジがない。

  * １つのグループによって表現された情報は、その他のグループのアナログ/ミックスドシグナルドメインにおいて簡単には流れない。

  * | デジタルとアナログ、又はミックスドシグナルブロックを含む基本的な検証プランがない。
    | 完全なシステムの同じ項目において、分離してテストされた２つの項目を結びつける事が出来ない。
    | フルシステムにおいて、このチャレンジは、アナログ、又はミックスドシグナルブロックからのパワーシーケンス、リーク電流、ノイズ等の検証側面を含みます。


  | これらが良く定義されている正規の特性使用言語の可能性は、デジタル設計と検証コミュニティに時々利益をもたらします。
  | そして、上で述べたチャレンジを視野に、同じ又は似たようなコンセプトをアナログとミックスドシグナルデザインに、
  | そして検証ドメインに適用しようとする事は自然であり、さまざまな効果がVerilog-AMS言語コミュニティの様にその方向で発生している。


Mixed-Signal Assertion Application
-------------------------------------------------------

* | アナログ/ミックスドシグナルアサーションの機能を含む事はできるだろう、しかし以下の事を制限出来ない。

   * | 機能特性：
     | デザインは、基本的な機能性の必要条件に合っているか？このような必要とされる特性を指定するための能力は、
     | アナログ/ミックスドシグナル回路の正規の検証を実現するのに必要である。

   * | ミックスドシグナル特性：
     | いかなる特性も、ミックスドシグナルインターフェイスの片側のアナログ値ともう片側のデジタルコードがマッチしていなければならない。
     | 例は、特性測定のために使われるADC、又はデジタルキャリブレーション電流DACを含みます。
     | これらのデザインシステムと関連した特性はより先端のプロセスにおいてアナログの変わりやすさが増加し、ついにはアナログ回路のデジタルキャリブレーションが必要にな>る。

     | それらは、時々、デジタル中心の特性とアナログ中心の特性に再分割する事ができる。
     | デジタル中心の特性の例は、クロックやアナログ量をリファレンスとしたサンプリングイベントに関連した既存のデジタル特性。
     | アナログ中心の特性例は、実数値変数又は信号をリファレンスとしたアサーションの二値判定です。

   * | デジタル特性：
     | 標準的な評価テストベンチで使われているような純粋なデジタル特性は、
     | デザインが設定し直された時に、連続ドメインに代表されるデザインの再分配によって、デザインが設定し直された時に再利用出来る必要がある。
     | とりわけ、これらのデザインの設定の多くは、デジタルブロック又はサブブロックの代わりに、トランジスタレベルに対応するもの、
     | 又は、寄生素子の存在するブロックを用>いての再シミュレーションを要求する。
     | デジタル中心の信号がもはや純粋なデジタルでなく、しかし代わりにアナログカーネル又はミックスドシグナルシミュレーションにおける実数値の電圧又は電流だったとして>も、
     | リグレッションテストの間、同じ表現についてはそのまま同じテストベンチを使用する事が望ましい。


Existing Approaches to Assertions in Analog and Mixed-Signal
-------------------------------------------------------------------

* | アナログ評価ドメインにおいて、アサーションを定義するのに必要な制御の理想の仕様は、共通の概念ではない。
  | それにもかかわらず、アナログ設計者と検証エンジニアは、回路を構成するデバイスからの安全な動作条件を明示する習慣的な特性チェックを設定する。
  | SPICEシミュレータにおいて、これは特別なデバイス動作条件チェッカーを加える事によって一般的に行われており、
  | ユーザーによって明記されたデバイスレベルの条件がシミュレーション過程で本当に満足する事を評価するための相関的な解析として関係付けている。


SPICE Device Operating Condition Checkers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ポピュラーなSPICE言語では、ユーザーは回路の安全な動作条件を明記したカスタムな特性チェックを設定できる。

* シミュレーターは、パラメータが安全な動作エリアから外れた時にユーザーに対しメッセージで示します。そして逆に、パラメータが安全な領域に戻った時に、ピーク値と違反期間をログ出力します。


* | 一つのシミュレーションステップにおいて、変数が最大値を超える値から直接、最小値よりも下の値に変化した時、シミュレーションは時々、
  | 中間境界解法？（middle bound solution）である(min+max)/2がピーク値とバイオレーション時間をレポートするのに使われます。

* 一般的にデバイスチェッカーでサポートされる４タイプのチェッカーは、表３に示す通りです。

  .. csv-table:: Table3.Typical SPICE Checks
    :header: "Check","Description"
    :widths: 50,150

    "初期設定チェック","固定パラメータ（固定グローバル、モデルまたはインスタンスパラメータ等動作点に依存しないパラメータ）のチェック。このチェックは、解析が開始される前にに実行され、固定パラメータが変えられた場合一度だけレポートされます。"
    "動作点解析","インスタンスの動作点パラメータを基本とした計算式を伴うチェック"
    "時間ドメインチェック","Tran解析におけるチェック"
    "周波数ドメインチェック","AC解析におけるチェック"

* | ネットリストで明記された安全な動作エリアのチェックは、SPICEシミュレータのTran,AC,DCそしてDC sweep解析によってサポートされます。
  | ユーザーは、そのチェックをON/OFFする事ができ、またはそのようなチェックグループの入ったステートをシミュレータの入力として設定する事ができます。


Using Mixed-Signal Behavior Languages to Express Assertion Intent
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* | VerilogAMSやVHDL-AMSのような一般的なミックスドシグナル言語によって提供される条件付きの表現が、色々な種類のチェックを定義するために使われている。
  | これらのチェックは、一般に期待される回路動作を定義するためにマクロやdisciplineのような基本的な言語テクニックを利用する。
  | そしてエラーフラグは、そのモデルに明記された動作範囲を出し入れする事でシミュレーションによって設定/解除できる。
  | このようなマクロの一般的な設定の一部を以下に示す：


  .. literalinclude:: ./txt/assertion_example1.txt
    :linenos:
    :language: verilog


Requirements for Mixed-Signal Assertion-Based Verification Solutions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | PICEレベルの動作点解析のアプリケーションがデバイスレベルの特性解析に有効である間、
  | アナログとミックスドシグナル評価技術者が直面しているより複雑な回路コンディションに対し、設定、評価する方法は今のところない。
  | 時間変化する回路特性のアサーションに基づく能力、または複合的なクロック条件によって決定する間隔で回路の時間的特性をチェックする能力をこれらのチャレンジングなオペレーションは含む。
  |
  | その上、動作点解析を使った現在のユースモデルはメソトロジは純粋なアナログ又はミックスドシグナルアプリケーションでのみ実行され一つの分離された解を作ります。
  | そして現在存在するデジタル評価メソトロジよりもっと広く、目に見えて実行できない。

* | 一方、モデル動作をチェックするためのミックスドシグナルのHDLをベースとしたアプローチはより抽象的で、デバイス特性レベルからより複雑な時間的な動作まで
  | 広範囲にわたってカバーする事が出来る。しかしながら、このアプローチの制限は標準的なアサーション言語を伴うフューチャーの設定が出来ない事である。
  |
  | 特定の設計ブロックに設定されたアサーションによるカバレッジの測定、ブロックの設計と検証面が判ける能力、
  | デバックアサーション結果のデバックのためのビジュアルな表現を持つルーツはごく少ない例です。

* | 対照的に、デジタル評価システムはABVによりしっかりと確率されたユースモデルを持っています。
  | このユースモデルは、PSLやSVAといった標準的なアサーション言語に基づいており、検証を満たす時間の間に発展したメソトロジがディスクリートドメインで必要です。

* | デジタル、ミックスドシグナル、そしてアナログのスペクトラムをカバーするために、言語とアサーションベースの検証のためのメソトロジは、
  | ディスクリートドメインで実行されなければならない。そして既存のアプローチによって上でリストされた制限にアドレスしなければなりません。


Using PSL with Verilog-AMS
-----------------------------------------------------------

PSL Assertions Involving Analog Expressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* | いくつかのAMS評価ツールは、最近では二値判定のPSL Assertionで表現する事が出来るようなアナログ評価式をクロック評価式の中でサポートします。
  | そして、プロパティの実際の独立変数と順序によってトップレベルのクロック信号が明白に定義されている時、又はデフォルトクロックを通して定義されている時の例を上げます。

  .. literalinclude:: ./txt/assertions_analogExpressions_1.txt
    :linenos:
    :language: verilog


  * | ブーリアン式A --> next ブーリアン式B
    | 1クロック後の値を評価（ブーリアン式Bの評価は、ブーリアン式Aが1になった次のサイクルで行う。)

  * | A;B
    | シーケンスの書き方（最初のサイクルで信号Aが1、2番目のサイクルで信号Bが1）

  * | シーケンス1 |=> シーケンス2
    | シーケンス含意演算子（シーケンス1が発生すれば次のサイクルでシーケンス2が発生する。）


  | clkの立ち上がりにおいて、V(sig)>0の場合、常に次のbが1である事を評価する。
  | clkの立ち上がりをclockと定義
  | a=1、次いでV(sig1) > 0.0の場合、常に次のクロックサイクルで、V(sig2)<0.3となり、次いでb=1となる事を評価する。


Analog Events for Asserrtion Clocking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Verilog-AMSアナログイベントファンクション crossとaboveは、PSL assertionにおいてクロックイベントをサポートする。

  .. literalinclude:: ./txt/assertions_analogExpressions_2.txt
    :linenos:
    :language: verilog

  | V(sig3)が0.0をクロスする場合
  | V(sig1)>0.0、次いでa=1ならば、その次のクロックサイクルでV(sig2)<0.3となり、次いでb=1となる事を評価する。

Support for wreal in PSL
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | wrealネットタイプは、
  | VerilogAMS言語のいくつかのベンダーのインプリメンテーションにおいて、ストラクチャー間の実数値による物理的接続を代表します。
  | コンセプトは、適切な標準構造の検討を早めるます。


  | wrealタイプオブジェクトを必要とする表現式は、Boolean式、クロック式そしてプロパティとシーケンスインスタンスの表現と、
  | PSLアサーション内で表現する事ができる。

  .. literalinclude:: ./txt/assertions_analogExpressions_3.txt
    :linenos:
    :language: verilog

  | clkの立ち上がりにおいて、mywreal1>4.4となり、次いでmywreal2<6.6となる。


Module-Bound Verification Units
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | vunitsはアナログPSLアサーションで使う事ができる。
  | これは、デザインブロックを修正出来ない、するべきでない場合に使える機能である。
  | vunitは、シミュレーションのためのデザインファイルとダイナミックにリンクする付加的なファイルです。
  | 上記のように、デザインファイルは変更せず、そしてアサーションコードを別のvunitファイルに存在させます。

  .. literalinclude:: ./txt/assertions_analogExpressions_4.txt
    :linenos:
    :language: verilog

* | vunitsは主としてアサーションコードを蓄積するために使われるが、アサーションに限らない。
  | もしアサーションのために追加のビヘイビアコードが必要になった場合、variables又はregistersに蓄えた値、それはvunitのmodeling layerに追加する事が出来る。
  | この機能はいくつかの場合で、アサーションのコーディングを容易にする事が出来る。

* 評価ユニットはアサーションをVerilog/VerilogAMS/System-Verilog又はVHDL インスタンスに追加する事が出来ます。

  .. literalinclude:: ./txt/assertions_analogExpressions_5.txt
    :linenos:
    :language: verilog


Coverage Analysis for PSL Assertions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | アサーションは、カバレッジドリブン評価環境の重要な部分の一つです。
  | カバレッジポイントはスティミラスがテストに必要なコンディションを作る事が出来たかろうかを示します。
  | この情報は、デザインが十分にテストされた事を決定的に保証します。
  | これは、定義した信号とカバレッジポイントとして指定された定義した式、そしてカバレッジモニターとしてアサーションを定義したそれ自身によって達成されます。

* | カバレッジの似たようなアプリケーションは、ミックスドシグナルの文中のアサーションを使ったときに起こると予期される。
  | とりわけ、ブーリアンレイヤーにおけるミックスドシグナルの式を比較する時、assert命令はカバレッジリポートに現れるでしょう。
  | そして、アサーションが十分にデザインが経験するアナログコンディションをチェックするかどうかの価値のある見識を提供します。
  | 同じく、実際のアサーションを起こすための式によってカバレッジポイントを作成する事は、アサーションそれ自身がデザインプロパティを評価する事を洗練する事を必要とするかどうかの知見を提供します。


Using SystemVerilog Assertions in a Mixed-Signal Design
--------------------------------------------------------------------------

* System Verilog Assersions(SVA)は、System Verilog P1800-2009 standard[14]のサブセットです。

* | System Verilog standardのこのバージョンは、コンティニアスドメインオブジェクトの存在を許していない。
  | 従って、既存の標準バージョンによってアナログ式を作成する事は、基本的に不可能である。
  | 近頃のベンダーは、System Verilog assertionの文脈にrealデータタイプの使用を許可する事をSystem Verilogに拡張している。
  | そして、これらの拡張は標準の将来バージョンに含まれる予定となっている。

* | アナログデザインの文脈において、もしelectricalドメインに属するネットに接続しているSystem Verilogポートにrealが値する場合、これらを使う事ができるでしょう。
  | 以下の例はこの使用モデルを示します。

  .. literalinclude:: ./txt/assertions_analogExpressions_6.txt
    :linenos:
    :language: verilog

* | 上に示すように、System Verilog real変数はAMS機能に一度インポートする事で、real変数の使用に制限があるSystemVerilogのassertion文に置く事が出来る。簡単な例で、どのように行うかを示します。

  .. literalinclude:: ./txt/assertions_analogExpressions_7.txt
    :linenos:
    :language: verilog

  .. image:: ./img/Electrical2RealConversion.png
     :alt: Figure 2. Example of Electrical to Real Conversion

  | 図2はElectrical2RealのコネクションがどのようにSVAブロック内で使われているSystemVerilogテストベンチにreal値を運ぶのを手伝うかを説明した図です。


Using Value-Fetch to apply Assertion to Pure Analog Characteristics
-----------------------------------------------------------------------------------

* | 連続ドメインの値をdiscreteドメインに変換する事は、ミックスドシグナル効果を制御するために使うテストベンチメソトロジの評価で一般的に実施されるものになりつつある。
  | この値の取り出しは、階層を持つdiscreteと連続ドメインの言語レイヤーの任意のレベルで交わる言語境界をもたらします。
  | 一方のそのような取り出しオペレーションは、連続ドメインのシンタックス、又は意味を理解できない純粋なデジタル言語から働く事が出来ます。
  | より前進的なアプリケーションにおいて、評価技術者は'不正確な'取り出し(最終的に受けたアナログ解のポイントと論理的な解法による)と'正確な'取り出し(受取りがなされるタイムポイントにおいて求められるアナログ解法)間で選択する能力を要求するだろう。
  | そのような受け取り動作は、

  | potential, flow, power, 動作ポイントパラメータ値、のように問われる必要のあるものを大量に必要とする。
  | 存在するミックスドシグナル言語の標準では、このようなフューチャーを提供していないと同時に、既存の改修により値を受け取る拡張を提供する事によってベンダーは再びこのような限界を乗り越えます。そして、標準言語は同じ表現様式をフォローするだろう。

  | そのような値を受取るルーチンは、以下の範囲の言語ベースの選択範囲から呼び出せる必要があります。

    * Verilog
    * SystemVerilog, or
    * Verilog-AMS scope

  | 受取りルーチンは、(制限ではないが)その他の言語ベースの選択範囲を含むアナログオブジェクトを参照する必要がある。

    * Verilog-AMS
    * VHDL-AMS
    * SPICE
    * Verilog-A


Activities in the Standards Committees
-----------------------------------------------------------------------------------

* | 二つの標準グループは積極的にアナログ/ミックスドシグナルアサーションの標準化に向けて活動している。


  * Analog System Verilog Assertions (ASVA)[13]委員会は、SystemVerilog言語のSVAサブセットにおけるアナログ/ミックスドシグナルの拡張にフォーカスしている。

  * SystemVerilog-AMS (SV-AMS)[15]委員会は、AMSがSystemVerilog言語に拡張する事を定義している。

  | これらの２つの並列した動きはVerilogからVerilogAMSへ変換するのに成功。
  | ASVA委員会はによってもたらされたアウトプットは、SV-AMSに影響を与えると期待されている。


A Mixed-Signal Sigma Delta ADC Example
-----------------------------------------------------------

  * | PSL/SVAアサーション言語が基本のサンプルデータ回路(DAC,ADC,シリアルパラレル変換回路,スイッチトキャパシタフィルタなど)などの順序回路を論証するのを促し、許可して以来、サンプルデータ回路はアサーションベースデバッグの理想である。
    |

  * | Σ-⊿ADC(変調器とローパスデジタルフィルタ)は典型的な例である。
    | 基本的なアナログ変調器でさえ、順序動作を示す。
    | この例では、PSL/SVAアサーションが順序動作について判断し、Mixed-Signal動作の前提について判断することに向いていることを示す。

  .. image:: ./img/Sigma_Delta_ADC.png
     :alt: Figure 3: Sigma Delta ADC Architecture

  * | Σ-⊿アーキテクチャ(一般には⊿-Σアーキテクチャと呼ばれる)は、変調器にローパスフィルタを連結させる。ADC設計のため、変調器はアナログ、フィルタはデジタルであり、DAC設計では逆にする。Σ-⊿変調器設計の主要特性は、非常に低オーダ(しばしばただの単bit)の量子化器と一緒のフィードバックループである。積分器は、量子化ノイズを形成するループに組み込まれている。量子化器(比較器/ラッチ結合)からの出力は、たいてい入力信号によって変調され、量子化ノイズが組み込まれたビットストリームである。

  .. image:: ./img/SA_DA.png
     :alt: Figure 4: Sigma Delta Detailed Architecture

  * | 図4.の変調器アーキテクチャはH(z)変換関数を用いてモデル化された離散(スイッチトキャパシタ)積分器と共に二次のフィードバックスキームを特徴付ける。
    | 同様に示されているのはsinc3フィルタのアーキテクチャである。
    | 如何に記載されているVerilog-AMSテストベンチでは、変調器インスタンス(mod1)、filter_decimator(正確にはsinc3フィルタ)、インスタンスdf1を含んだADC(i1)モジュールがインスタンス化される。

  .. literalinclude:: ./txt/ADC_test.v
    :linenos:
    :language: verilog

  * | 変調器とフィルタは両方ともVerilog-AMSを使ってモデル化される。サイン波電圧発生源(input)とclock発生器(pulse waveform)もインスタンス化されている。
    | ADCの入力は、振幅0.65、周波数Tsigのサイン波である。
    | この回路へのクロックは、256回の割合でオーバーサンプリングされたものと入力サイン波のナイキスト速度が一致する周波数が選ばれる。
    | 

  * | シミュレーション波形の(大変な)手動検査は、順序回路アーキテクチャのコアループ特性が連続的に維持されているとすると原因究明するのに向いている。これは高サンプリングレートのせいで入力波期間のいくつかでも異なる。
    | 代わりにシミュレーションが走っている間ABVを使うのは、後処理ステップとしての波形検査の伝統的(そして大変な)方法を補完する。
    | 

Assertion Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * すべてのアサーションは変調器・積分器回路をスイッチさせるのに使用される既定のclockが使用され評価される。

  .. literalinclude:: ./txt/adc_vunit.txt
    :linenos:
    :language: verilog

  * | 上記のvunit
