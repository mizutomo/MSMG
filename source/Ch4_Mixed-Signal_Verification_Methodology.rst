===========================================
Ch.4 Mixed-Signal Verification Methodology
===========================================

  * 以前は、アナログ回路とデジタル回路が完全に分かれていたので、アナログ回路の検証とMixed-Signalの検証はそれぞれ独立に行うことができた。現在では、アナログ回路とデジタル回路が密に結合して、さらに様々な階層にもまたがっているため、独立に検証することはできなくなった。この章では、Mixed-Signalのシミュレーションやアナログ機能記述を用いたチップレベルのシミュレーションにデジタルの検証技術であるアサーションやカバレッジ駆動検証手法を活用する方法を説明する。目標となるカバレッジを達成するためには、検証プランを事前に作成して、テストベンチの開発に使用しなければならない。また、Mixed-Signal回路における低電力の検証でも、アナログとデジタルの界面で特別な扱いをする必要がある。


Overview
=================

  * 近年の微細化の影響で、アナログ回路設計者もデジタル回路を取り入れる必要がある。特に微細プロセスによる変動を補正するキャリブレーション回路の搭載が必要となっている。つまり、現在のアナログ回路は、高精度なアナログブロックは、Mixed-Signalで構成されている。さらに、デジタル回路においてもタイミングやスキュー、電力の問題を考えると、ピュアなデジタル回路と言うよりは、Mixed-Signalの回路である、と言える。結局、今日の大半のSoCは、Mixed-Signalであり、検証の課題となっている。主な課題は、アナログ(ボトムアップ)とデジタル(トップダウン)で使用するツールや方法論が異なっていることである。すなわち、Mixed-Signalの検証のためには、アナログとデジタルの間に橋を架ける必要がある。

|

  * 別の問題として、検証ツールにおけるスループットの問題もある。SPICEにしろFast-SPICEにしろ、デジタルのシミュレータに比べると、数桁も遅い(エミュレータやハードウェアアクセラレータを用いても、まだ遅いでしょう)。DAC2011のパネルディスカッションでは、アナログ回路設計と検証のデジタル化、構造化、トップダウン化が議論となった。その中で、アナログ・Mixed-Signalに対しても、検証プランツールを導入し、アサーション検証、メトリックドリブン検証、自律型テストベンチを実現するためのUVMの導入が必要である、という結論となった。また、シミュレーションスループットの問題を解決するために、Verilog-A, Verilog-AMSやイベントドリブンによる動作が可能なRNM技術を用いた機能モデルによる検証手法に変えなければならない。

|

  * アナログ設計者は、デジタル回路のようにCPF/UPFを用いて、アナログ回路でも電力を管理したいと考えているが、これには3つの課題がある。デジタルとアナログの境界で信号を伝達するには、Logic→Electricalの変換(その逆も)を行わなければならないが、これには、その時々の電源の状態に依存している。シミュレータは、動的な電源レベルの変動や、シャットオフ、アイソレーションの条件をアナログとデジタルで同時に満たすことができるように、検証ツールは信号の相互変換を行わなければいけない。Mixed-Signalの検証がメインストリームに成るためには、新しいツール・手法が導入・開発され、満足なレベルまで熟成されないといけない。また、Mixed-Signalの検証に合うように形式手法も作りなおされる必要がある。以下では、これらの課題について述べる。


Mixed-Signal Simulation as the Fundation for Verification
--------------------------------------------------------------------

  * アナログの検証では、形式検証やエミュレーション、ハードウェアアクセラレーションは、まだまだ十分なレベルではない。そのため、Mixed-Signalの検証では、シミュレーションベースの動的な検証手法に頼らざるを得ない。これらの手法に共通している点は、コ・シミュレーションを使用するか、シングルカーネルのシミュレータを使用するか、ということである。コ・シミュレーションは、2つのネットリストを用い、それぞれを別の(UNIX上では、別々のプロセスが走る)シミュレータにより解析し、それぞれのエンジンはIPC(プロセス間通信)により通信される。それに対して、シングルカーネルシミュレータは、UNIX上で一つのプロセスとして実行され、より高度な同期機構と効率的なデータ交換により、エンジン/アルゴリズム間のデータ受け渡しを可能にしたものである。

  |

  * 設計者は、抽象度の高いレベル(Mathworks社のMATLABを使用することが多い)から、HDLとSPICEを組み合わせた低いレベルまで、様々なレベルを組み合わせてシミュレーションを行うことができる。各ブロックは、抽象度の高いレベル(例えば、WrealベースのVerilogモデル)や中間のレベル(Verilog-AMSモジュール)、低いレベル(回路図から生成されたSPICEネットリスト)でモデル化される。検証の際は、各抽象度のモデルを組み合わせてたり、ミックスさせたり、また市松模様のように絡み合わせることができる。様々な抽象度を使い分けることで、フォーカスするシミュレーションのターゲットを切り替えることができる。例えば、ブロックレベルに注目したり、レーンベースでシミュレーションを行ったり、マクロ単位や最後はフルチップのシミュレーションも可能である。抽象度を組み合わせた検証を行うことで、機能の確認や性能がスペックを満たしているかどうかの確認が可能となる。

  |

  * Mixed-Signalのシミュレーション技術は、今後、高速なイベントドリブン/システムレベルの手法(両方とのデジタル部の解析手法)と、遅いが高精度なアナログのアプローチの融合を模索することになるだろう。アナログシミュレーションのアプローチは、常微分方程式の構築と解の探索に基づくものである。また、抽象度では、モデルベースとSPICEネットリストベースでモデル化する方法があり、どの抽象度でモデル化を行うかで、解くべき方程式の数が変わってくる。また、アナログの機能モデルを記述する際に、効率的にシミュレーションすることを考慮しないで記述した場合、SPICEベースのモデルとほとんど同じSim時間になることがある(それでも、遅くなることはないが)。また、リントツールやモデル作成支援ツールが急速に広まりつつあるので、より効率的にモデルの記述が可能となっている。


Design Partitioning, Simulation Planning, Regressions
--------------------------------------------------------------------

  * トップダウン設計を実現するためには、計画を重視することと、モデルのスループット(シミュレーション?)を上げることが必要である。トップダウン設計の中心になる考え方は、カバレッジ率とシミュレーションスピードを両立した楽観的な検証ストラテジを見つけることである。設計の仕様書から、どのブロックを高抽象度のモデルにすべきか、また、どのブロックをトランジスタレベルで検証すべきか、を見つけることができる。そこには、設計ブロックの分割とシミュレーション計画が中心的な考えとなる。また、プロジェクトの開始段階で、設計が安定なシステムになることは、ほとんどないため、シミュレーション計画を構築する際には、レグレッションテストについても考慮する必要がる。

  |

  * 検証プランの構築には、通常動的な検証手法が用いられるが、検証ツールが必要十分なカバレッジを達成できるように、綿密な検証プランを作成する必要がある。ここでいう、検証プランは、実装のためのプランとは異なる。デジタル/SoCの設計チームでは、このようなプランを作成するために、専用の検証プランニングツールが用いられる。すなわち、検証プランは、実装のプラン(実際のテストベンチ)と共に開発される。デジタルの検証ツールでは、シミュレーション結果から、実装プランと目標の検証プランを比較することで、どの程度カバレッジが達成できたかのレポートを生成することができる。

  |

  * 典型的には、アナログ部の検証プランの作成には、スプレッドシートが用いられるなど、デジタルよりもアドホックなものである。しかしながら、スプレッドシートでは、実際のシミュレーション結果からプランに対して、自動的に結果を反映させることができない。Mixed-Signal向けの検証ツールでは、ブロックごとにどの抽象度のモデルを用いるか、デザインをどのように分割するか、どうやってシミュレーションを走らせるか、を選択できるようなツールになっている必要がある。現状では、このようなツールがないため、ギャップを埋めるために、ユーザがそれぞれのスクリプトを用いている。今後は、UVM-MSのような手法を導入して、デジタルの高度な検証をアナログ/Mixed-Signalにも適用していかなければならない。


Assertion-based Verification
--------------------------------------------------------------------

  * 複数の言語やツールでアサーションがデジタル回路の複雑な状態空間を扱えるようになったため、デジタル設計・検証ともに、アサーションベース検証が広く用いられるようになった。PSLやSVAがVerilog-AMSやWrealベースのVerilogで使用できるようになれば、Mixed-Signalの設計者にもアサーションベース設計が利用できるようになる。現在、それぞれの標準化団体によって、この拡張が行われている。UVM-MSでは、今やアナログ信号値に対してのモニタリング機構やチェック機構がサポートされており、標準的なものになりつつある。いくつかのベンダでは、Verilog-AMSに電圧値のようなアナログ信号を取り扱えるようにしたPSLとSVAをサポートしつつある。

  |

  * アサーションは、仕様の確認と設計の確からしさの両面を実行時に確認することができる。すなわち、実行時には、エラー発生箇所に近いところに配置したモニタの機能を持ち、エラー情報とカバレッジ情報の両方を出力することができる。アサーションを使用することで、検証を早くスタートすることができ、また、設計エンジニアと検証エンジニアがバグを早く検出し、取り除くことができる。また、設計者は設計意図をコードに埋め込むことで、後の統合工程での問題を最小化することができる。Mixed-Signalの設計と検証において、下記のメリットを取り込むことで、アサーションのメリットを享受することができる。

    * アサーションにより設計意図をデザインに組み込むことができる。
    * バグの近くで、アサーションを発火させられることができるので、バグの特定と除去が速くなる。
    * ファンクションカバレッジの取得が可能になる。

  * これからMixed-Signalの設計はより複雑になってくるため、アサーションベース設計は、ピュアなデジタル設計よりもますます重要となる。


Coverage Measurements
--------------------------------------------------------------------

  * アサーションは、メトリックドリブンのアプローチを行うときに、カバレッジを測定するポイント(coverpoints)としても使用される。すなわち、チェックすべきポイントをアサーションで記述しておき、これが、カバレッジツールによって、満たしたかどうかチェックされる。また、これ以外にも、ファンクショナル・ラインカバレッジも使用される。これらのアプローチは、既にデジタル回路の検証の世界で活用されているものであり、今後は、Mixed-Signalおよびアナログに拡張される。

  |

  * しかしながら、従来の離散的な状態を扱うカバレッジの方式では、連続な値を持つアナログの問題には、そのままでは適用できない。典型的な例として、あるアナログノードの電圧を検証する例を取り上げよう。もし、連続的な期待値が与えられた場合、連続的な値を離散値に変換する処理が必要となる。現在、SystemVerilogのカバレッジ定義では、アナログの連続値を、有限の式かもしくは離散的なカバーポイントに変換するようなcoverpointsを導入することを検討している。IEEEの標準となっているe言語では、既に同様の拡張が行われており、いくつかのツールで使用可能な状態になっている。UVM-MSによるメトリックドリブンな検証環境を作るためには、連続的なcoverpointsを用いたアサーションや離散化されたcovergroupsを用いた方法によるカバレッジ測定の確立が不可欠である。


Mixed-Signal Metric-Driven Verification
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * UVMは、ますます複雑化するデジタル検証のために使用されているものである。メトリックドリブン手法には、カバレッジ測定のためのランダム入力パターン生成や複数の検証言語のサポートが必要となる。また、UVMは開発の効率性を向上させるために、モジュール～チップ間、プロジェクト間で再利用を容易にする仕組みも持っている。もし、UVMがMixed-Signalに拡張され、UVM-MSが完成すると、これらの特性がアナログの検証でも使用可能となる。UMVの拡張は、アナログブロックに対しての検証プラン、アナログ入力信号生成、アナログプロパティの検証とアサート、アナログファンクショナルカバレッジの解析、に対して行われる。UVM-MSは、高抽象度なモデル(すなわち、WrealベースのVerilogモデルで記述されたRNM)を使用したアナログ回路をターゲットにしている。

  |

  * 自動化と特性の管理のためには、各々の検証プランを実行し、追跡するために、バッチ実行とレグレッション検証環境が必要となる。このデジタルの検証手法は、IPレベルでもチップレベルでも用いられている。IPレベルで、アナログ回路がモデル化されると共に、検証環境と検証プランが作成される。UVMは、AMSモデルやSPICEネットリストに対しても適用可能であるが、やはり、ベストなパフォーマンスを出すために、RNMでモデル化されるべきである。IPレベルで作られたテストプラン・モデル・検証環境は、SoCレベルで再利用され、デジタル・アナログによらず、統一的なMDVが適用される。


Verifying Low-Power Intent in MS design
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ここ数年、低消費電力への要求が多数の技術開発を推進してきた。例として、パワーシャットオフ技術(PSO, これは、パワーゲーティングとも呼ばれる)、多電源供給技術(MSV)、可変電圧可変周波数技術(DVFS)などである。これらの技術は、デジタル回路では既に用いられている。しかしながら、この技術は、純粋なデジタル技術だけで適用されるものではなく、Mixed-Signal回路にも適用可能なものである。このような電源の記述には、CPFやUPFなどの標準化されたフォーマットが用いられる。既に、EDAツールはCPF/UPFをサポートしており、今後は、Mixed-Signalへの適用のが主な課題となる。回路図が中心の世界(アナログブロックはたいていがそうである)では、電源の指定が暗黙的に回路図中に指定されることになる。Mixed-Signalの回路において、暗黙的に電源指定を行うことができるようになると、大規模なSoCの設計や検証でも利用できるようになる。設計された回路図から、CPFのような標準化されたフォーマットでパワー情報を抽出するツールがあれば、次には、デジタルブロックのパワー情報とどうやって結合させるか、さらに、パワー試行のシミュレーションでどのように使用するか、といったことが課題となる。

  |

  * 最近のMixed-Signalの検証ツールでは、アナログとデジタルをそれぞれ別のコアでシミュレーションを行い、電圧レベルや電源シャットオフ情報、状態復帰の情報をプロセス間で通信して、シミュレーションを進める方法が主流である。これは、時間変動するクオンティティや状態をシミュレータ間で受け渡せるようにするためである。これを可能にする技術は、パワーを交換するためのコネクタ素子(この素子は、デジタルとアナログの境界に配置される)である。これらのコネクタはCPFの記述に従い、自動的にパワー情報を交換し、この情報をイベントドリブンシミュレータ(デジタル)と回路シミュレータ(アナログ)のエンジンに受け渡す。このコネクタの作用により、アナログシミュレータは、隣接しているデジタルブロックの電源のレベルと状態を知ることができる。また、デジタルエンジンにも同様に隣接しているアナログ回路の状態が伝わる。この技術により、レベルシフタの挿入ミスや、多電源の接続ミスなどの根本的な不具合を検出することができる。


Mixed-Signal Simulation as Foudation for Verification
======================================================================

Gap Between Digital and Analog Verificaiton Processes
------------------------------------------------------------

  * 従来のアナログ回路設計の世界では、検証はボトムアップ的にトランジスタレベルでSPICEを用いて行われていた。すなわち、個々のブロックは、元の仕様から直接トランジスタレベルの回路図にインプリされ、ブロックごとに仕様を満たすかどうか検証を行っていた。このように個々に検証されたブロックは、他のブロックと同様に実装され、IPが出来上がる。このようなアプローチは、設計対象の規模が小さい時には、実にうまくいくが、設計の規模が大きくなり、複雑さが増して、また、扱っている信号がアナログからミックスド・シグナルになると、ボトムアップのアプローチは破綻してしまう。これは、トランジスタレベルでブロック以上の回路に対して、検証を行った場合に、リソースが非常に大きくなってしまうためである。また、各ブロックをシステムレベルで記述していなかった場合、もし、検証の最終段階で、もしブロック間の接続不良が見つかった場合でも、ボトムアップのアプローチでは、太刀打ちができない。

  |

  * それに対して、デジタル回路の検証は、本質的にはトップダウンであり、設計の初期段階から、チップレベルの検証プランを用いて、検証が行われる。このような検証プランは、チップレベルに限らず、どのようなレベルにでも適用することができる。このような検証プランを用いることで、制約付きランダム検証により、効率的に設計空間の探索が可能となったり、既存のレグレッションテストのパターンでどの程度機能カバレッジを満たしているかを設計者にフィードバックすることが可能となる。また、カバレッジを測定することで、テストが有効かどうかの判断ができる。

  |

  * Mixed-Signal SoCの複雑さの増加に従い、アナログとデジタルの検証はこれまで通りに独立に行うことが不可能となった。すなわち、もし、既存のブロックがボトムアップの手法で設計・検証されているとすると、チップへの組み上げのために、可観測ポイントを増やす必要がある。言い換えると、チップのインテグレータは、どのアナログ、ミックスド・シグナルのブロックが個別に検証されたものなのか、把握しないといけない。また、どの検証タスクがシステムレベルで実行できていないか、把握する必要がある。


Mixed-Signal and Mixed-Level Simulation
------------------------------------------------------------

  * これまで、デジタルの機能は、合成可能なVerilog/VHDLで設計を行ってきたが、このようなアプローチでは、デジタル回路とアナログ回路が密に結びついたミックスドシグナルの回路では、うまく機能しない。このようなタイトに結合されたモデルを作るためには、ミックスド・シグナルをそのまま表現できる高抽象度な言語を使用する必要がある。Verilog-AMS, VHDL-AMSは、このニーズを満たすものであり、実際にミックスドシグナルのモデリングによおく使用されている。結果として、いくつかの市販のシミュレータが、このような言語をサポートし、ミックスドシグナルモデルを用いたアナデジ混載シミュレーションを可能にした。

  |

  * さらに、離散的な世界(デジタル)と連続的な世界(アナログ)の二重性を持った複雑なシステムに対しての解析も必要となっている。微細化が進み、各IPのブロックの面積が小さくなり、たくさんの機能が詰め込めるようになると、複雑なデジタル制御を行いながら、トランジスタレベルで検証を行うのでは、不可能である。今後は、トランジスタレベルのアナログブロックではなく、機能的に等価な高抽象度なモデルを使用しなければならない(ただし、ピンレベルの精度は保っておく必要がある)。インテグレーションの各段階に応じて、検証のレベルが変わるため、モデルの抽象化のレベルもそれに応じて変化する必要がある。設計者は、モデルを作成するための言語として、抽象度のレベルに応じて、Verilog(-AMS), VHDL(-AMS), Verilog-A, (System)Verilog RNMを選択することができる。そのため、シミュレータには、これらの言語をサポートする必要がある。さらにシミュレータは、モデルの抽象度に応じた処理速度と精度を満たす必要がある。


New Ways of Looking at Mixed-Signal Verification
------------------------------------------------------------

  * これまでは、アナログブロックの仕様は、トランジスタレベルの回路図として実現されてきた。このようなアナログブロックは、単体で検証され、より大きなシステムへと組み込まれていく。そして、このプロセスは、全体のシステムが組み上がり、検証されるまで続く。この開発プロセスは、小さいシステムではよく機能するが、複雑なSoCでは破綻する。その限界は、以下によるものである。

    * デザインの複雑度が増すに連れ、シミュレーションのコストは非線形的に増加し、フルチップの検証においては、全ての検証をメットするために、法外なコストが発生してしまう。結果的にリスピンや設計の遅延が発生してしまう。

    * ブロック単体での検証では、他のシステムに組み込まれた時の影響などを考慮することができなくなっている。特に、トップダウンの検証プランを作成しなかった場合、このような不具合は、検証の最終段階で発生する。そして、市場への出荷が著しく遅れてしまう。

  * このような問題を防ぐために、設計チームは、階層構造を意識して、各ブロックのインプリと検証のゴールを決める必要がある。最も抽象度の低いレベルでは、各ブロックは最も詳細なレベルで記述され、最高の精度で検証される必要がある。しかしながら、各ブロックがシステムにインプリされるときには、トランジスタレベルの記述から、他のブロックとの通信可能な高抽象度なモデルに置き換わる必要がある。また、このような抽象的なモデルは、システムの検証が可能なように、十分に高いスループットが達成できるようなモデルでなければならない。このようなモデルを用いることで、計算のリソースを下げ、たくさんのシミュレーションを流すことができる。

  |

  * Mixed-Signalのデザインには、同じチップの上に、アナログとデジタルの機能が両方集積される。典型的には、アナログ部はSPICEや、アナログ/ミックスドシグナルの動作記述が可能な、Verilog-A, Verilog-ASM, VHDL-AMSで記述される。一方で、デジタル部は、Verilog, VHDL, SystemVerilogを用いて、RTLで記述され、その後、合成ツールによってゲートが生成される。ミックスド・シグナルシミュレーションのためには、以下の3つの機能を取り込む必要がある。

    * 連続的に時間変動する非線形微分方程式を解くアナログ回路用ソルバ。

    * 離散的な時間でイベントの順番どおりに処理が行われるデジタル回路用ソルバ。

    * デジタルのイベントとアナログの変数の間で同期する機構を持ち、それぞれのソルバで設定したセンシティビティリストで駆動される機能。


Analog and Digital Interaction
------------------------------------------------------------

  * ミックスド・シグナルがどのように機能するかは、アナログとデジタルのサブブロック間の相互作用が重要となる。アナデジ間の相互作用としては、主に2つある。一つは、アナログとデジタルの境界に存在する構造的な接続であり、もう一つは、時間連続系とイベントによる離散系との状態の共有である。このような概念を説明する目的は、Verilog-AMSは暗黙的な規則の下に使用されるからである。また、VHDL-AMSなどの他のミックスドシグナル用モデリング言語でも同様である。


Structural Aspects of Mixed-Signal
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 現在の設計フローの多くは、アナログブロック(連続系)とデジタルブロック(離散系)を組み合わせるフローとなっている。そのため、Mixed-Signalシミュレータがアナログとデジタルの間をどのようにしてつないでいるかを知ることは、役に立つ。Mixed-Signalの本質は、ドメインの定義になる。対象のドメインによって、担当するシミュレータが離散的なエンジンか、連続的なエンジンか決まる。ここで言うオブジェクトとは、階層間(インスタンス化したモジュールや、呼び出されたモジュール)のネットや変数のことである。ネットは、discreteもしくはcontinuousのドメインに分けられる。変数は、代入が発生した時の状態によって、continousかdiscreteのドメインに決められる。

  |

  * disciplineは、エネルギー保存系のシステムにおいて、ポテンシャルとフローを結びつけるものである。ネットは、dicrete/continuousのどちらかのドメインで宣言されるとともに、continuousのネットの場合には、さらにdisciplineを指定することができる。Verilog-AMSの言語仕様によると、デジタルブロックやprimitiveなネットは、discreteなネットをドライブすることしかできず、アナログブロックは、アナログのネットに作用するだけである。階層間のレベルを跨いでポートを繋ぐネットを信号と定義すると、全てdiscreteなポートを繋ぐ信号は、デジタルのドメインとなり、逆に、continuousドメインのみをまたぐ信号は、アナログのドメインとなる。そして、両方のドメインをまたぐ信号がMixed-Signalと呼ばれる。

  |

  * 言語にビルトインされた機能として、異なるドメイン間で値やタイミングを変換する機能がある。Verilog-AMSでは、コネクトモジュールがこの役割を果たす。一般的には、コネクトモジュールは、入出力間で2つのドメインを信号がまたぐ場合に、変換ルールに基づいて、信号を変換する。コネクトモジュールは、言語の拡張なので、ユーザが独自に仕様に合うようにコネクトモジュールをカスタマイズすることができる。コネクトモジュールは、ツールによって自動挿入されるか、もしくは、手動で挿入する。

  |

  * 回路中の全てのネットがdiscreteかcontinuousのドメインに分けられる前に、コネクトモジュールの挿入作業が行われる。この作業は、discipline resolutionと呼ばれ、ネットがdiscipline宣言付きで定義されたかどうか、が考慮される。Verilog-AMS言語は、2つのdiscipline解決方法を用意している。一つは、non-detailed、もしくは、defaultのdiscipline解決法であり、もう一つは、detailed discipline解決法である。non-detailedな方法は、disciplineを葉からrootまで続けられる限り、伝搬させるものである。この伝搬方法では、discipineが事前に定義されていないネットに対して、ユーザが指定したdisciplineを自動的に設定することができる。一度ネットのドメインが決まってしまうと、continuousとdiscreteのネットの間に適切なコネクトモジュールを自動的に挿入する。

  |

  * 他にもdetailed discipline resolutionと呼ばれる方法がある。これは、ボトムアップからcontinuous dicsiplineが階層を縦断しトップまで伝搬する方式である。一度、disciplineがトップ階層まで伝搬したら、今度は、push方式でdisciplineがトップからボトムに伝搬し、ボトムアップ・アプローチでは決まらなかったネットに対して、disciplineを設定していく。このようにボトムアップとトップダウンを繰り返しながらdisciplineを伝搬させていくことで、より多くのネットに対して、continuous disciplineを割り当てることができる。結果的に、このdetailed discipline resolutionは、高精度なシミュレーション結果を得たいときに適している。

  |

  * このセッションの目的は、読者に対して、ミックスド・シグナルの言語(というよりも、このような言語を実装したシミュレータ)が、どのようにして、階層的なデザインから連続信号と離散信号を区別しているか、という情報を与えることである。このコネクトモジュールの挿入、ドライバとレシーバの分離、多電源の選択、に関するさらに詳しい情報は、この本の参考文献を読んで欲しい。


Examples of Analog and Digital State Sharing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ミックスドシグナル用モデリング言語には、アナログ・デジタル間の複雑な相関関係を記述するために、両ステート間をまたがって状態を共有することができる能力を持っていなければならない。このサブシステム間にわたって状態を共有することで、回路のビヘイビアを変更することが可能となる。例えば、単純なサンプルホールド回路の場合、デジタルクロックの立ち上がりで、アナログ信号を取り込むことが必要である。このような振る舞いをモデルで実現するために、言語には、デジタルのイベントのコンテキストに同期して、アナログで記述した動作が実行されるようになっていなければならない(逆も然り)。このような挙動を忠実に再現するために、シミュレータには、アナログもしくはデジタルの変化が他方にどのように影響を及ぼすかを追跡するために、アナログエンジンとデジタルエンジンの間で共有可能な「状態」をサポートしなければならない。このような異エンジン間の相関は、センシティビティとも呼ばれている。

  |

  * 前章では、状態を共有しているようなミックスドシグナルの例を幾つか挙げた。このセクションでは、ステートシェアリングがミックスドシグナルシミュレータでどのように実現されているか、を見ていきたい。アナログシミュレータもデジタルシミュレータも時間変動するシステムの状態を計算している。一般的には、ある時刻でのシステムの状態というのは、過去のシステムの状態の関数として表現される。これは、アナログシミュレータとデジタルシミュレータ共に共通である。ミックスドシステムの場合、ある状態変数はアナログシミュレータによって計算され、また別の状態変数はデジタルシミュレータによって計算される。つまり、ミックスドシグナルのモデルでは、ある時刻での状態は、過去のアナログとデジタルの状態から決まることになる。この理由から、それぞれのシミュレータは、それぞれの状態変数を更新するために、システム全体の過去の状態を知っている必要がある。

  |

  * アナログ・デジタル間のビヘイビアの相互関係は、イベントと値の感受性に分類される。このイベントセンシティビティがあるために、デジタル/アナログのエンジンは、イベントの出現を検知することができる。また、イベントが発生した際には、それぞれ必要なステートメントを実行することができる。また、バリューセンシティビティがあるために、値が変化し、オブジェクトの状態が変化した場合に、他方のステートメントを実行することができる。Verilog-AMSは、このような相互関係を実現するために、以下に示すように、デジタルとアナログの境界を拡張している。

  |

  * Digital primaries appearing in analog context(アナログコンテキスト中のデジタルステートメント)
    この場合、関係式はアナログソルバによって評価されるが、デジタル的な変数(ベクタ, 信号, 内部の実数・整数の変数, reg値)は、デジタルソルバによって計算される。

  |

  * Analog primaries appearing in a digital context(デジタルコンテキスト中のアナログステートメント)
    この場合、関係式は、デジタルソルバによって評価されるが、アナログ的な変数(ノード電圧, ブランチ電流, 内部の実数・整数の変数)は、アナログソルバによって計算される。

  |

  * Digital event appearing in analog context(アナログコンテキスト中のデジタルイベント)
    Event control refers to the @ operator. An analog event control is an @ statement which appears in the analog context, and a digital event is: posedge, negedge, named event, signal name, driver_update.

  |

  * Analog event appearing in digital context(デジタルコンテキスト中のアナログイベント)
    A digital event control is an @ statement in the digital context, and an analog event is: cross, above, timer, initial_step, final_step.


Mixed-Signal Synchronization
-----------------------------------

  * アナログソルバもデジタルソルバも、シミュレーションしているシステムで、時間通りの順序で、評価が行われ、シミュレーションが進行していく。つまり、ある時刻のシステムの状態を計算する前に、その前のシステムの状態は全て計算されている必要がある、ということである。ある時刻でシステムの状態を計算している間、どのシミュレータも他に影響をおよぼすような結果を生成する。もし、どちらかのシミュレータが状態を計算時間が、他のシミュレータの計算時間よりも、十分に少ないか、もしくは大きいとすると、一方のシミュレータには、ある時刻でのセンシティブデータを計算することができるが、他のシミュレータにはもはや計算することができない。すると、センシティブシミュレータはデータを受け取ることができず、シミュレーション結果は無効になる。これが、どちらかのシミュレータが計算したセンシティブデータが、他のシミュレータには受け取れないことを防ぐための同期の役割である。

  |

  * デジタルシミュレータは、イベントを時間でソーティングする処理を行う。どの時刻においても、デジタルシミュレータは、現在の時刻よりも未来に発生するイベントを受け取る前に、現在の時刻におけるイベントを全て消費する。しかしながら、一度ある時刻のイベントを全て実行してしまうと、デジタルシミュレータは、過去に戻れなくなったり、過去のイベントを受け取ることはできなくなる。

  |

  * アナログソルバは、キルヒホッフの電圧則と電流則で記述された非線形微分方程式を解くものである。ある時刻で解が見つかると、過去の解とタイムステップの長さから、未来の時間の解を予測する。この予測的な段階では、シミュレータはNewton-Raphsonなどのような反復法を用い、非線形微分方程式を解き、さらにその解が局所打ち切り誤差(LTE)のスペックを満足するかどうかチェックする。もし、次のタイムステップで、LTEのスペックを満たさない場合、この予測のタイムステップは破棄され、より小さなタイムステップで同じプロセスが収束するまで繰り返される。もし、アナログシミュレータにとって、センシティブなデータをデジタルシミュレータが計算する場合に、最新で収束した時間よりも早い時間が必要となった場合(ただし、その前に収束した時間よりは、遅い時刻のデータが必要)、最新の結果は破棄され、もう一度再計算される。言い換えると、デジタルシミュレータが使用したタイムポイントよりも過去のデータだけ、タイムステップは採用される(未来のタイムポイントは採用されない)。

  |

  * このプロセスの間、アナログシミュレータ側がデジタルシミュレータをキックするようなイベントを発生することもあり得る。同様に、デジタルシミュレータ(ある時刻でのイベントを処理する)がアナログシミュレータをキックすることもある。すなわち、同期化のプロセスは、デジタルシミュレータが処理できないプロセスをアナログシミュレータに作らせない、ということである(デジタルシミュレータは、過去の時刻には戻れないことを常に留意しておかねばならない)。さらに、2番目に新しいアナログの解(この解は、必ず採用される)は、次のデジタルのイベントが発生する時間よりも必ず小さいことを保証しなくてはいけない。Thus the mixed-signal synchronization process can be summarized as one where either simulator is prevented from calculating sensitive data which the other is not able to accept.


What Constitues a Mixed-Signal Simulator Ready for the Future of Verification?(未来の検証において、ミックスドシミュレータは何をもたらすか?)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  * アナログ、ミックスドシグナル検証者は、ミックスドシグナルのシミュレータ選択時に、以下の重要な特性を考慮するしなければならない。


Support for a Wide Spectrum of Design Abstractions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 検証のプロセスの間、性能・精度・機能の面でトレードオフに見合うように、様々なブロックを組み合わせる必要がある。結果として、ミックスドシグナルシミュレータは、Verilog-AMSやVHDL-AMSで記述された高抽象度のモデルから、同一構造のパターンを持ったメモリのようなトランジスタレベルのブロックまで扱える必要がある。これらの複雑なブロック構成に対しては、マルチレートのシミュレータやパーティッショニングが有効な手段である。


Support for a Wide Spectrum of Design Launguages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

