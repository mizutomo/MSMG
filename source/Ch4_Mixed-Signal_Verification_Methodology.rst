===========================================
Ch.4 Mixed-Signal Verification Methodology
===========================================

  * 以前は、アナログ回路とデジタル回路が完全に分かれていたので、アナログ回路の検証とMixed-Signalの検証はそれぞれ独立に行うことができた。現在では、アナログ回路とデジタル回路が密に結合して、さらに様々な階層にもまたがっているため、独立に検証することはできなくなった。この章では、Mixed-Signalのシミュレーションやアナログ機能記述を用いたチップレベルのシミュレーションにデジタルの検証技術であるアサーションやカバレッジ駆動検証手法を活用する方法を説明する。目標となるカバレッジを達成するためには、検証プランを事前に作成して、テストベンチの開発に使用しなければならない。また、Mixed-Signal回路における低電力の検証でも、アナログとデジタルの界面で特別な扱いをする必要がある。


Overview
=================

  * 近年の微細化の影響で、アナログ回路設計者もデジタル回路を取り入れる必要がある。特に微細プロセスによる変動を補正するキャリブレーション回路の搭載が必要となっている。つまり、現在のアナログ回路は、高精度なアナログブロックは、Mixed-Signalで構成されている。さらに、デジタル回路においてもタイミングやスキュー、電力の問題を考えると、ピュアなデジタル回路と言うよりは、Mixed-Signalの回路である、と言える。結局、今日の大半のSoCは、Mixed-Signalであり、検証の課題となっている。主な課題は、アナログ(ボトムアップ)とデジタル(トップダウン)で使用するツールや方法論が異なっていることである。すなわち、Mixed-Signalの検証のためには、アナログとデジタルの間に橋を架ける必要がある。

|

  * 別の問題として、検証ツールにおけるスループットの問題もある。SPICEにしろFast-SPICEにしろ、デジタルのシミュレータに比べると、数桁も遅い(エミュレータやハードウェアアクセラレータを用いても、まだ遅いでしょう)。DAC2011のパネルディスカッションでは、アナログ回路設計と検証のデジタル化、構造化、トップダウン化が議論となった。その中で、アナログ・Mixed-Signalに対しても、検証プランツールを導入し、アサーション検証、メトリックドリブン検証、自律型テストベンチを実現するためのUVMの導入が必要である、という結論となった。また、シミュレーションスループットの問題を解決するために、Verilog-A, Verilog-AMSやイベントドリブンによる動作が可能なRNM技術を用いた機能モデルによる検証手法に変えなければならない。

|

  * アナログ設計者は、デジタル回路のようにCPF/UPFを用いて、アナログ回路でも電力を管理したいと考えているが、これには3つの課題がある。デジタルとアナログの境界で信号を伝達するには、Logic→Electricalの変換(その逆も)を行わなければならないが、これには、その時々の電源の状態に依存している。シミュレータは、動的な電源レベルの変動や、シャットオフ、アイソレーションの条件をアナログとデジタルで同時に満たすことができるように、検証ツールは信号の相互変換を行わなければいけない。Mixed-Signalの検証がメインストリームに成るためには、新しいツール・手法が導入・開発され、満足なレベルまで熟成されないといけない。また、Mixed-Signalの検証に合うように形式手法も作りなおされる必要がある。以下では、これらの課題について述べる。


Mixed-Signal Simulation as the Fundation for Verification
--------------------------------------------------------------------

  * アナログの検証では、形式検証やエミュレーション、ハードウェアアクセラレーションは、まだまだ十分なレベルではない。そのため、Mixed-Signalの検証では、シミュレーションベースの動的な検証手法に頼らざるを得ない。これらの手法に共通している点は、コ・シミュレーションを使用するか、シングルカーネルのシミュレータを使用するか、ということである。コ・シミュレーションは、2つのネットリストを用い、それぞれを別の(UNIX上では、別々のプロセスが走る)シミュレータにより解析し、それぞれのエンジンはIPC(プロセス間通信)により通信される。それに対して、シングルカーネルシミュレータは、UNIX上で一つのプロセスとして実行され、より高度な同期機構と効率的なデータ交換により、エンジン/アルゴリズム間のデータ受け渡しを可能にしたものである。

  |

  * 設計者は、抽象度の高いレベル(Mathworks社のMATLABを使用することが多い)から、HDLとSPICEを組み合わせた低いレベルまで、様々なレベルを組み合わせてシミュレーションを行うことができる。各ブロックは、抽象度の高いレベル(例えば、WrealベースのVerilogモデル)や中間のレベル(Verilog-AMSモジュール)、低いレベル(回路図から生成されたSPICEネットリスト)でモデル化される。検証の際は、各抽象度のモデルを組み合わせてたり、ミックスさせたり、また市松模様のように絡み合わせることができる。様々な抽象度を使い分けることで、フォーカスするシミュレーションのターゲットを切り替えることができる。例えば、ブロックレベルに注目したり、レーンベースでシミュレーションを行ったり、マクロ単位や最後はフルチップのシミュレーションも可能である。抽象度を組み合わせた検証を行うことで、機能の確認や性能がスペックを満たしているかどうかの確認が可能となる。

  |

  * Mixed-Signalのシミュレーション技術は、今後、高速なイベントドリブン/システムレベルの手法(両方とのデジタル部の解析手法)と、遅いが高精度なアナログのアプローチの融合を模索することになるだろう。アナログシミュレーションのアプローチは、常微分方程式の構築と解の探索に基づくものである。また、抽象度では、モデルベースとSPICEネットリストベースでモデル化する方法があり、どの抽象度でモデル化を行うかで、解くべき方程式の数が変わってくる。また、アナログの機能モデルを記述する際に、効率的にシミュレーションすることを考慮しないで記述した場合、SPICEベースのモデルとほとんど同じSim時間になることがある(それでも、遅くなることはないが)。また、リントツールやモデル作成支援ツールが急速に広まりつつあるので、より効率的にモデルの記述が可能となっている。


Design Partitioning, Simulation Planning, Regressions
--------------------------------------------------------------------

  * トップダウン設計を実現するためには、計画を重視することと、モデルのスループット(シミュレーション?)を上げることが必要である。トップダウン設計の中心になる考え方は、カバレッジ率とシミュレーションスピードを両立した楽観的な検証ストラテジを見つけることである。設計の仕様書から、どのブロックを高抽象度のモデルにすべきか、また、どのブロックをトランジスタレベルで検証すべきか、を見つけることができる。そこには、設計ブロックの分割とシミュレーション計画が中心的な考えとなる。また、プロジェクトの開始段階で、設計が安定なシステムになることは、ほとんどないため、シミュレーション計画を構築する際には、レグレッションテストについても考慮する必要がる。

  |

  * 検証プランの構築には、通常動的な検証手法が用いられるが、検証ツールが必要十分なカバレッジを達成できるように、綿密な検証プランを作成する必要がある。ここでいう、検証プランは、実装のためのプランとは異なる。デジタル/SoCの設計チームでは、このようなプランを作成するために、専用の検証プランニングツールが用いられる。すなわち、検証プランは、実装のプラン(実際のテストベンチ)と共に開発される。デジタルの検証ツールでは、シミュレーション結果から、実装プランと目標の検証プランを比較することで、どの程度カバレッジが達成できたかのレポートを生成することができる。

  |

  * 典型的には、アナログ部の検証プランの作成には、スプレッドシートが用いられるなど、デジタルよりもアドホックなものである。しかしながら、スプレッドシートでは、実際のシミュレーション結果からプランに対して、自動的に結果を反映させることができない。Mixed-Signal向けの検証ツールでは、ブロックごとにどの抽象度のモデルを用いるか、デザインをどのように分割するか、どうやってシミュレーションを走らせるか、を選択できるようなツールになっている必要がある。現状では、このようなツールがないため、ギャップを埋めるために、ユーザがそれぞれのスクリプトを用いている。今後は、UVM-MSのような手法を導入して、デジタルの高度な検証をアナログ/Mixed-Signalにも適用していかなければならない。


Assertion-based Verification
--------------------------------------------------------------------

  * 複数の言語やツールでアサーションがデジタル回路の複雑な状態空間を扱えるようになったため、デジタル設計・検証ともに、アサーションベース検証が広く用いられるようになった。PSLやSVAがVerilog-AMSやWrealベースのVerilogで使用できるようになれば、Mixed-Signalの設計者にもアサーションベース設計が利用できるようになる。現在、それぞれの標準化団体によって、この拡張が行われている。UVM-MSでは、今やアナログ信号値に対してのモニタリング機構やチェック機構がサポートされており、標準的なものになりつつある。いくつかのベンダでは、Verilog-AMSに電圧値のようなアナログ信号を取り扱えるようにしたPSLとSVAをサポートしつつある。

  |

  * アサーションは、仕様の確認と設計の確からしさの両面を実行時に確認することができる。すなわち、実行時には、エラー発生箇所に近いところに配置したモニタの機能を持ち、エラー情報とカバレッジ情報の両方を出力することができる。アサーションを使用することで、検証を早くスタートすることができ、また、設計エンジニアと検証エンジニアがバグを早く検出し、取り除くことができる。また、設計者は設計意図をコードに埋め込むことで、後の統合工程での問題を最小化することができる。Mixed-Signalの設計と検証において、下記のメリットを取り込むことで、アサーションのメリットを享受することができる。

    * アサーションにより設計意図をデザインに組み込むことができる。
    * バグの近くで、アサーションを発火させられることができるので、バグの特定と除去が速くなる。
    * ファンクションカバレッジの取得が可能になる。

  * これからMixed-Signalの設計はより複雑になってくるため、アサーションベース設計は、ピュアなデジタル設計よりもますます重要となる。


Coverage Measurements
--------------------------------------------------------------------

  * アサーションは、メトリックドリブンのアプローチを行うときに、カバレッジを測定するポイント(coverpoints)としても使用される。すなわち、チェックすべきポイントをアサーションで記述しておき、これが、カバレッジツールによって、満たしたかどうかチェックされる。また、これ以外にも、ファンクショナル・ラインカバレッジも使用される。これらのアプローチは、既にデジタル回路の検証の世界で活用されているものであり、今後は、Mixed-Signalおよびアナログに拡張される。

  |

  * しかしながら、従来の離散的な状態を扱うカバレッジの方式では、連続な値を持つアナログの問題には、そのままでは適用できない。典型的な例として、あるアナログノードの電圧を検証する例を取り上げよう。もし、連続的な期待値が与えられた場合、連続的な値を離散値に変換する処理が必要となる。現在、SystemVerilogのカバレッジ定義では、アナログの連続値を、有限の式かもしくは離散的なカバーポイントに変換するようなcoverpointsを導入することを検討している。IEEEの標準となっているe言語では、既に同様の拡張が行われており、いくつかのツールで使用可能な状態になっている。UVM-MSによるメトリックドリブンな検証環境を作るためには、連続的なcoverpointsを用いたアサーションや離散化されたcovergroupsを用いた方法によるカバレッジ測定の確立が不可欠である。


Mixed-Signal Metric-Driven Verification
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * UVMは、ますます複雑化するデジタル検証のために使用されているものである。メトリックドリブン手法には、カバレッジ測定のためのランダム入力パターン生成や複数の検証言語のサポートが必要となる。また、UVMは開発の効率性を向上させるために、モジュール～チップ間、プロジェクト間で再利用を容易にする仕組みも持っている。もし、UVMがMixed-Signalに拡張され、UVM-MSが完成すると、これらの特性がアナログの検証でも使用可能となる。UMVの拡張は、アナログブロックに対しての検証プラン、アナログ入力信号生成、アナログプロパティの検証とアサート、アナログファンクショナルカバレッジの解析、に対して行われる。UVM-MSは、高抽象度なモデル(すなわち、WrealベースのVerilogモデルで記述されたRNM)を使用したアナログ回路をターゲットにしている。

  |

  * 自動化と特性の管理のためには、各々の検証プランを実行し、追跡するために、バッチ実行とレグレッション検証環境が必要となる。このデジタルの検証手法は、IPレベルでもチップレベルでも用いられている。IPレベルで、アナログ回路がモデル化されると共に、検証環境と検証プランが作成される。UVMは、AMSモデルやSPICEネットリストに対しても適用可能であるが、やはり、ベストなパフォーマンスを出すために、RNMでモデル化されるべきである。IPレベルで作られたテストプラン・モデル・検証環境は、SoCレベルで再利用され、デジタル・アナログによらず、統一的なMDVが適用される。


Verifying Low-Power Intent in MS design
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ここ数年、低消費電力への要求が多数の技術開発を推進してきた。例として、パワーシャットオフ技術(PSO, これは、パワーゲーティングとも呼ばれる)、多電源供給技術(MSV)、可変電圧可変周波数技術(DVFS)などである。これらの技術は、デジタル回路では既に用いられている。しかしながら、この技術は、純粋なデジタル技術だけで適用されるものではなく、Mixed-Signal回路にも適用可能なものである。このような電源の記述には、CPFやUPFなどの標準化されたフォーマットが用いられる。既に、EDAツールはCPF/UPFをサポートしており、今後は、Mixed-Signalへの適用のが主な課題となる。回路図が中心の世界(アナログブロックはたいていがそうである)では、電源の指定が暗黙的に回路図中に指定されることになる。Mixed-Signalの回路において、暗黙的に電源指定を行うことができるようになると、大規模なSoCの設計や検証でも利用できるようになる。設計された回路図から、CPFのような標準化されたフォーマットでパワー情報を抽出するツールがあれば、次には、デジタルブロックのパワー情報とどうやって結合させるか、さらに、パワー試行のシミュレーションでどのように使用するか、といったことが課題となる。

  |

  * 最近のMixed-Signalの検証ツールでは、アナログとデジタルをそれぞれ別のコアでシミュレーションを行い、電圧レベルや電源シャットオフ情報、状態復帰の情報をプロセス間で通信して、シミュレーションを進める方法が主流である。これは、時間変動するクオンティティや状態をシミュレータ間で受け渡せるようにするためである。これを可能にする技術は、パワーを交換するためのコネクタ素子(この素子は、デジタルとアナログの境界に配置される)である。これらのコネクタはCPFの記述に従い、自動的にパワー情報を交換し、この情報をイベントドリブンシミュレータ(デジタル)と回路シミュレータ(アナログ)のエンジンに受け渡す。このコネクタの作用により、アナログシミュレータは、隣接しているデジタルブロックの電源のレベルと状態を知ることができる。また、デジタルエンジンにも同様に隣接しているアナログ回路の状態が伝わる。この技術により、レベルシフタの挿入ミスや、多電源の接続ミスなどの根本的な不具合を検出することができる。


Mixed-Signal Simulation as Foudation for Verification
======================================================================

Gap Between Digital and Analog Verificaiton Processes
------------------------------------------------------------

  * 従来のアナログ回路設計の世界では、検証はボトムアップ的にトランジスタレベルでSPICEを用いて行われていた。すなわち、個々のブロックは、元の仕様から直接トランジスタレベルの回路図にインプリされ、ブロックごとに仕様を満たすかどうか検証を行っていた。このように個々に検証されたブロックは、他のブロックと同様に実装され、IPが出来上がる。このようなアプローチは、設計対象の規模が小さい時には、実にうまくいくが、設計の規模が大きくなり、複雑さが増して、また、扱っている信号がアナログからミックスド・シグナルになると、ボトムアップのアプローチは破綻してしまう。これは、トランジスタレベルでブロック以上の回路に対して、検証を行った場合に、リソースが非常に大きくなってしまうためである。また、各ブロックをシステムレベルで記述していなかった場合、もし、検証の最終段階で、もしブロック間の接続不良が見つかった場合でも、ボトムアップのアプローチでは、太刀打ちができない。

  |

  * それに対して、デジタル回路の検証は、本質的にはトップダウンであり、設計の初期段階から、チップレベルの検証プランを用いて、検証が行われる。このような検証プランは、チップレベルに限らず、どのようなレベルにでも適用することができる。このような検証プランを用いることで、制約付きランダム検証により、効率的に設計空間の探索が可能となったり、既存のレグレッションテストのパターンでどの程度機能カバレッジを満たしているかを設計者にフィードバックすることが可能となる。また、カバレッジを測定することで、テストが有効かどうかの判断ができる。

  |

  * Mixed-Signal SoCの複雑さの増加に従い、アナログとデジタルの検証はこれまで通りに独立に行うことが不可能となった。すなわち、もし、既存のブロックがボトムアップの手法で設計・検証されているとすると、チップへの組み上げのために、可観測ポイントを増やす必要がある。言い換えると、チップのインテグレータは、どのアナログ、ミックスド・シグナルのブロックが個別に検証されたものなのか、把握しないといけない。また、どの検証タスクがシステムレベルで実行できていないか、把握する必要がある。


Mixed-Signal and Mixed-Level Simulation
------------------------------------------------------------

  * これまで、デジタルの機能は、合成可能なVerilog/VHDLで設計を行ってきたが、このようなアプローチでは、デジタル回路とアナログ回路が密に結びついたミックスドシグナルの回路では、うまく機能しない。このようなタイトに結合されたモデルを作るためには、ミックスド・シグナルをそのまま表現できる高抽象度な言語を使用する必要がある。Verilog-AMS, VHDL-AMSは、このニーズを満たすものであり、実際にミックスドシグナルのモデリングによおく使用されている。結果として、いくつかの市販のシミュレータが、このような言語をサポートし、ミックスドシグナルモデルを用いたアナデジ混載シミュレーションを可能にした。

  |

  * さらに、離散的な世界(デジタル)と連続的な世界(アナログ)の二重性を持った複雑なシステムに対しての解析も必要となっている。微細化が進み、各IPのブロックの面積が小さくなり、たくさんの機能が詰め込めるようになると、複雑なデジタル制御を行いながら、トランジスタレベルで検証を行うのでは、不可能である。今後は、トランジスタレベルのアナログブロックではなく、機能的に等価な高抽象度なモデルを使用しなければならない(ただし、ピンレベルの精度は保っておく必要がある)。インテグレーションの各段階に応じて、検証のレベルが変わるため、モデルの抽象化のレベルもそれに応じて変化する必要がある。設計者は、モデルを作成するための言語として、抽象度のレベルに応じて、Verilog(-AMS), VHDL(-AMS), Verilog-A, (System)Verilog RNMを選択することができる。そのため、シミュレータには、これらの言語をサポートする必要がある。さらにシミュレータは、モデルの抽象度に応じた処理速度と精度を満たす必要がある。


New Ways of Looking at Mixed-Signal Verification
------------------------------------------------------------

  * これまでは、アナログブロックの仕様は、トランジスタレベルの回路図として実現されてきた。このようなアナログブロックは、単体で検証され、より大きなシステムへと組み込まれていく。そして、このプロセスは、全体のシステムが組み上がり、検証されるまで続く。この開発プロセスは、小さいシステムではよく機能するが、複雑なSoCでは破綻する。その限界は、以下によるものである。

    * デザインの複雑度が増すに連れ、シミュレーションのコストは非線形的に増加し、フルチップの検証においては、全ての検証をメットするために、法外なコストが発生してしまう。結果的にリスピンや設計の遅延が発生してしまう。

    * ブロック単体での検証では、他のシステムに組み込まれた時の影響などを考慮することができなくなっている。特に、トップダウンの検証プランを作成しなかった場合、このような不具合は、検証の最終段階で発生する。そして、市場への出荷が著しく遅れてしまう。

  * このような問題を防ぐために、設計チームは、階層構造を意識して、各ブロックのインプリと検証のゴールを決める必要がある。最も抽象度の低いレベルでは、各ブロックは最も詳細なレベルで記述され、最高の精度で検証される必要がある。しかしながら、各ブロックがシステムにインプリされるときには、トランジスタレベルの記述から、他のブロックとの通信可能な高抽象度なモデルに置き換わる必要がある。また、このような抽象的なモデルは、システムの検証が可能なように、十分に高いスループットが達成できるようなモデルでなければならない。このようなモデルを用いることで、計算のリソースを下げ、たくさんのシミュレーションを流すことができる。

  |

  * Mixed-Signalのデザインには、同じチップの上に、アナログとデジタルの機能が両方集積される。典型的には、アナログ部はSPICEや、アナログ/ミックスドシグナルの動作記述が可能な、Verilog-A, Verilog-ASM, VHDL-AMSで記述される。一方で、デジタル部は、Verilog, VHDL, SystemVerilogを用いて、RTLで記述され、その後、合成ツールによってゲートが生成される。ミックスド・シグナルシミュレーションのためには、以下の3つの機能を取り込む必要がある。

    * 連続的に時間変動する非線形微分方程式を解くアナログ回路用ソルバ。

    * 離散的な時間でイベントの順番どおりに処理が行われるデジタル回路用ソルバ。

    * デジタルのイベントとアナログの変数の間で同期する機構を持ち、それぞれのソルバで設定したセンシティビティリストで駆動される機能。


Analog and Digital Interaction
------------------------------------------------------------

  * ミックスド・シグナルがどのように機能するかは、アナログとデジタルのサブブロック間の相互作用が重要となる。アナデジ間の相互作用としては、主に2つある。一つは、アナログとデジタルの境界に存在する構造的な接続であり、もう一つは、時間連続系とイベントによる離散系との状態の共有である。このような概念を説明する目的は、Verilog-AMSは暗黙的な規則の下に使用されるからである。また、VHDL-AMSなどの他のミックスドシグナル用モデリング言語でも同様である。


Structural Aspects of Mixed-Signal
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 現在の設計フローの多くは、アナログブロック(連続系)とデジタルブロック(離散系)を組み合わせるフローとなっている。そのため、Mixed-Signalシミュレータがアナログとデジタルの間をどのようにしてつないでいるかを知ることは、役に立つ。Mixed-Signalの本質は、ドメインの定義になる。対象のドメインによって、担当するシミュレータが離散的なエンジンか、連続的なエンジンか決まる。ここで言うオブジェクトとは、階層間(インスタンス化したモジュールや、呼び出されたモジュール)のネットや変数のことである。ネットは、discreteもしくはcontinuousのドメインに分けられる。変数は、代入が発生した時の状態によって、continousかdiscreteのドメインに決められる。

  |

  * disciplineは、エネルギー保存系のシステムにおいて、ポテンシャルとフローを結びつけるものである。ネットは、dicrete/continuousのどちらかのドメインで宣言されるとともに、continuousのネットの場合には、さらにdisciplineを指定することができる。Verilog-AMSの言語仕様によると、デジタルブロックやprimitiveなネットは、discreteなネットをドライブすることしかできず、アナログブロックは、アナログのネットに作用するだけである。階層間のレベルを跨いでポートを繋ぐネットを信号と定義すると、全てdiscreteなポートを繋ぐ信号は、デジタルのドメインとなり、逆に、continuousドメインのみをまたぐ信号は、アナログのドメインとなる。そして、両方のドメインをまたぐ信号がMixed-Signalと呼ばれる。

  |

  * 言語にビルトインされた機能として、異なるドメイン間で値やタイミングを変換する機能がある。Verilog-AMSでは、コネクトモジュールがこの役割を果たす。一般的には、コネクトモジュールは、入出力間で2つのドメインを信号がまたぐ場合に、変換ルールに基づいて、信号を変換する。コネクトモジュールは、言語の拡張なので、ユーザが独自に仕様に合うようにコネクトモジュールをカスタマイズすることができる。コネクトモジュールは、ツールによって自動挿入されるか、もしくは、手動で挿入する。

  |

  * 回路中の全てのネットがdiscreteかcontinuousのドメインに分けられる前に、コネクトモジュールの挿入作業が行われる。この作業は、discipline resolutionと呼ばれ、ネットがdiscipline宣言付きで定義されたかどうか、が考慮される。Verilog-AMS言語は、2つのdiscipline解決方法を用意している。一つは、non-detailed、もしくは、defaultのdiscipline解決法であり、もう一つは、detailed discipline解決法である。non-detailedな方法は、disciplineを葉からrootまで続けられる限り、伝搬させるものである。この伝搬方法では、discipineが事前に定義されていないネットに対して、ユーザが指定したdisciplineを自動的に設定することができる。一度ネットのドメインが決まってしまうと、continuousとdiscreteのネットの間に適切なコネクトモジュールを自動的に挿入する。

  |

  * 他にもdetailed discipline resolutionと呼ばれる方法がある。これは、ボトムアップからcontinuous dicsiplineが階層を縦断しトップまで伝搬する方式である。一度、disciplineがトップ階層まで伝搬したら、今度は、push方式でdisciplineがトップからボトムに伝搬し、ボトムアップ・アプローチでは決まらなかったネットに対して、disciplineを設定していく。このようにボトムアップとトップダウンを繰り返しながらdisciplineを伝搬させていくことで、より多くのネットに対して、continuous disciplineを割り当てることができる。結果的に、このdetailed discipline resolutionは、高精度なシミュレーション結果を得たいときに適している。

  |

  * このセッションの目的は、読者に対して、ミックスド・シグナルの言語(というよりも、このような言語を実装したシミュレータ)が、どのようにして、階層的なデザインから連続信号と離散信号を区別しているか、という情報を与えることである。このコネクトモジュールの挿入、ドライバとレシーバの分離、多電源の選択、に関するさらに詳しい情報は、この本の参考文献を読んで欲しい。

.. ここまで('131127)


Examples of Analog and Digital State Sharing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ミックスドシグナル用モデリング言語には、アナログ・デジタル間の複雑な相関関係を記述するために、両ステート間をまたがって状態を共有することができる能力を持っていなければならない。このサブシステム間にわたって状態を共有することで、回路のビヘイビアを変更することが可能となる。例えば、単純なサンプルホールド回路の場合、デジタルクロックの立ち上がりで、アナログ信号を取り込むことが必要である。このような振る舞いをモデルで実現するために、言語には、デジタルのイベントのコンテキストに同期して、アナログで記述した動作が実行されるようになっていなければならない(逆も然り)。このような挙動を忠実に再現するために、シミュレータには、アナログもしくはデジタルの変化が他方にどのように影響を及ぼすかを追跡するために、アナログエンジンとデジタルエンジンの間で共有可能な「状態」をサポートしなければならない。このような異エンジン間の相関は、センシティビティとも呼ばれている。

  |

  * 前章では、状態を共有しているようなミックスドシグナルの例を幾つか挙げた。このセクションでは、ステートシェアリングがミックスドシグナルシミュレータでどのように実現されているか、を見ていきたい。アナログシミュレータもデジタルシミュレータも時間変動するシステムの状態を計算している。一般的には、ある時刻でのシステムの状態というのは、過去のシステムの状態の関数として表現される。これは、アナログシミュレータとデジタルシミュレータ共に共通である。ミックスドシステムの場合、ある状態変数はアナログシミュレータによって計算され、また別の状態変数はデジタルシミュレータによって計算される。つまり、ミックスドシグナルのモデルでは、ある時刻での状態は、過去のアナログとデジタルの状態から決まることになる。この理由から、それぞれのシミュレータは、それぞれの状態変数を更新するために、システム全体の過去の状態を知っている必要がある。

  |

  * アナログ・デジタル間のビヘイビアの相互関係は、イベントと値の感受性に分類される。このイベントセンシティビティがあるために、デジタル/アナログのエンジンは、イベントの出現を検知することができる。また、イベントが発生した際には、それぞれ必要なステートメントを実行することができる。また、バリューセンシティビティがあるために、値が変化し、オブジェクトの状態が変化した場合に、他方のステートメントを実行することができる。Verilog-AMSは、このような相互関係を実現するために、以下に示すように、デジタルとアナログの境界を拡張している。

  |

  * Digital primaries appearing in analog context(アナログコンテキスト中のデジタルステートメント)
    この場合、関係式はアナログソルバによって評価されるが、デジタル的な変数(ベクタ, 信号, 内部の実数・整数の変数, reg値)は、デジタルソルバによって計算される。

  |

  * Analog primaries appearing in a digital context(デジタルコンテキスト中のアナログステートメント)
    この場合、関係式は、デジタルソルバによって評価されるが、アナログ的な変数(ノード電圧, ブランチ電流, 内部の実数・整数の変数)は、アナログソルバによって計算される。

  |

  * Digital event appearing in analog context(アナログコンテキスト中のデジタルイベント)
    Event control refers to the @ operator. An analog event control is an @ statement which appears in the analog context, and a digital event is: posedge, negedge, named event, signal name, driver_update.

  |

  * Analog event appearing in digital context(デジタルコンテキスト中のアナログイベント)
    A digital event control is an @ statement in the digital context, and an analog event is: cross, above, timer, initial_step, final_step.


Mixed-Signal Synchronization
-----------------------------------

  * アナログソルバもデジタルソルバも、シミュレーションしているシステムで、時間通りの順序で、評価が行われ、シミュレーションが進行していく。つまり、ある時刻のシステムの状態を計算する前に、その前のシステムの状態は全て計算されている必要がある、ということである。ある時刻でシステムの状態を計算している間、どのシミュレータも他に影響をおよぼすような結果を生成する。もし、どちらかのシミュレータが状態を計算時間が、他のシミュレータの計算時間よりも、十分に少ないか、もしくは大きいとすると、一方のシミュレータには、ある時刻でのセンシティブデータを計算することができるが、他のシミュレータにはもはや計算することができない。すると、センシティブシミュレータはデータを受け取ることができず、シミュレーション結果は無効になる。これが、どちらかのシミュレータが計算したセンシティブデータが、他のシミュレータには受け取れないことを防ぐための同期の役割である。

  |

  * デジタルシミュレータは、イベントを時間でソーティングする処理を行う。どの時刻においても、デジタルシミュレータは、現在の時刻よりも未来に発生するイベントを受け取る前に、現在の時刻におけるイベントを全て消費する。しかしながら、一度ある時刻のイベントを全て実行してしまうと、デジタルシミュレータは、過去に戻れなくなったり、過去のイベントを受け取ることはできなくなる。

  |

  * アナログソルバは、キルヒホッフの電圧則と電流則で記述された非線形微分方程式を解くものである。ある時刻で解が見つかると、過去の解とタイムステップの長さから、未来の時間の解を予測する。この予測的な段階では、シミュレータはNewton-Raphsonなどのような反復法を用い、非線形微分方程式を解き、さらにその解が局所打ち切り誤差(LTE)のスペックを満足するかどうかチェックする。もし、次のタイムステップで、LTEのスペックを満たさない場合、この予測のタイムステップは破棄され、より小さなタイムステップで同じプロセスが収束するまで繰り返される。もし、アナログシミュレータにとって、センシティブなデータをデジタルシミュレータが計算する場合に、最新で収束した時間よりも早い時間が必要となった場合(ただし、その前に収束した時間よりは、遅い時刻のデータが必要)、最新の結果は破棄され、もう一度再計算される。言い換えると、デジタルシミュレータが使用したタイムポイントよりも過去のデータだけ、タイムステップは採用される(未来のタイムポイントは採用されない)。

  |

  * このプロセスの間、アナログシミュレータ側がデジタルシミュレータをキックするようなイベントを発生することもあり得る。同様に、デジタルシミュレータ(ある時刻でのイベントを処理する)がアナログシミュレータをキックすることもある。すなわち、同期化のプロセスは、デジタルシミュレータが処理できないプロセスをアナログシミュレータに作らせない、ということである(デジタルシミュレータは、過去の時刻には戻れないことを常に留意しておかねばならない)。さらに、2番目に新しいアナログの解(この解は、必ず採用される)は、次のデジタルのイベントが発生する時間よりも必ず小さいことを保証しなくてはいけない。このように、Mixed-Signalの同期化プロセスは、どちらかのシミュレータが受け取ることができないようなデータを計算することを防ぐための機構である、と言える。


What Constitues a Mixed-Signal Simulator Ready for the Future of Verification?(未来の検証において、ミックスドシミュレータは何をもたらすか?)
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

  * アナログ、ミックスドシグナル検証者は、ミックスドシグナルのシミュレータ選択時に、以下の重要な特性を考慮するしなければならない。


Support for a Wide Spectrum of Design Abstractions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 検証のプロセスの間、性能・精度・機能の面でトレードオフに見合うように、様々なブロックを組み合わせる必要がある。結果として、ミックスドシグナルシミュレータは、Verilog-AMSやVHDL-AMSで記述された高抽象度のモデルから、同一構造のパターンを持ったメモリのようなトランジスタレベルのブロックまで扱える必要がある。これらの複雑なブロック構成に対しては、マルチレートのシミュレータやパーティッショニングが有効な手段である。


Support for a Wide Spectrum of Design Launguages
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * 検証は、パーツを組み上げる段階で行うものであるため、システムレベルの検証では、様々な異なった言語でモデル化されたブロックを組み合わせる必要がある。このような状況であるため、シミュレータには、(System)Verilog(-A/MS), VHDL(-AMS), SPICE, SystemC, e(検証言語)などのような標準化された言語が扱えないといけない。


Based on Reliable and Scalable Analog and Digital Simulation Kernels/Engines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ミックスドシグナルシミュレータは、デジタル/アナログのシミュレーションカーネルに大きく依存している(これは長所でもあり、短所でもある)。そのため、デジタル/アナログのソルバ自体が高信頼・産業界の標準・高ロバスト・スケーラブルであることが非常に重要である。さらに、2つのカーネルは、それぞれのエンジンの利点を損なうような形で(compromise)、統合させてはならない。もし、エンジンの統合がいい加減になされた場合、ユーザはミックスドシグナルの検証を行う上で、必要な機能がない(ただし、それぞれ単体のエンジンのみでシミュレーションをする場合には、使用できる)などの、不幸な事態に直面するだろう。


Support of Multiple Digital and Analog Simulation Engines
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 様々な回路に対して、単一のシミュレータだけで解析を行うのは、ほぼ不可能になっている。世の中には、ある限定された回路の解析に特化した専用エンジンと、様々な回路に対応した汎用エンジンが存在している。シミュレータベンダには、それぞれの回路ブロックに対して、最適なエンジンで解析を行い、それらの結果をうまく統合することが求められている。ミックスドシグナルシミュレータの開発においても、同じことが求められている。ただし、ミックスドシグナルシミュレータの場合では、最適なエンジンの選択は、アナログ/デジタルのそれぞれをまたがった形で行われる必要がある。そのため、ミックスドシグナルシミュレータは、全てのカーネルを一つのプラットフォームに統合し、それぞれのパーティッション間で発生するイベント/値の変動をうまく調整(同期)する必要がある。


Support of Metric-Driven Methodology
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 完全なデジタルとアナログの境界は、狭くなってきているので、ミックスドシグナルの設計に、ピュアなデジタルやアナログの設計手法の導入は、一般的になりつつある。ここでは、メトリック駆動の設計手法について、特に述べる。デジタル設計における機能検証では、ブロックレベルにおいても、システムレベルのおいても、メトリック駆動検証を用いないと、発生頻度の低い状態を検証することができない。これらは、制約付きランダム検証、ファンクションカバレッジの測定、インターフェースの検証と同様の内部機能を検証するアサーションの開発によって、可能となる。システムにおけるアナログ量の増大に伴い、ミックスドシグナルシミュレータを用いた検証時にもメトリック駆動による検証は、重要な要件になりつつある。現在、よく使用されているミックスドシグナル用のハードウェア記述言語/検証言語(HDL, HVL)には、全てサポートされているわけではないが、たくさんの可能性が存在している。すなわち、いくつかのHDL/HVLは、実数モデルによる機能カバレッジをサポートしつつあり、また、実数値による制約付きランダム検証技術、電圧/電流などの電気的な量からアサーションを作る技術を実装しようとしている。


Design Partitioning, Simulation Planning, Regressiions
======================================================================

  * トップダウン設計は、設計/検証のプランニングと実行速度に、焦点を当てる。設計のプランニングは、どの部品の仕様を決めるのに高い抽象度のモデルを用いるか、また、どのパーツにトランジスタレベルのモデルを用いて検証するか、を決めるのに用いられる。設計プランニングの最初のステップは、デザインの分割とシミュレーションのプランニングである。プロジェクトの最初の段階で、シミュレーションのプランを作る一方で、レグレッションテストの計画も検討していると、安定したシステムを得ることができる。


Design Partitioning
------------------------

  * デザインのアーキテクチャと特性の文書は、計画策定段階のインプットとなる。これらのドキュメントから、デザインを小さなブロックに分割し、それぞれのブロックにスペックの配分を行う。ミックスドシグナルの設計においては、分割したブロックの方が設計フローを効率的に流すことができることから、複数のブロックに分割することは、基本的なことである。様々なドメイン(例えば、パワードメイン、クロックドメイン、ネットディシプリン)でブロックを分割したとしても、AMSでシミュレーションすることができる。このようなドメインによる領域の分割は、それぞれのブロックの実装の仕方や、トップレベルでの統合において、大きな影響を与える。最適なブロック分割をすることで、シミュレーション時間を削減したり、より自動化された設計フローを適用できることで、実装を速くしたり、スケジュールに最小の影響でECO(Engineering Change Orders)を適用できる。もし、分割の仕方を間違えると、ツールの力をフルには利用できなくなるため、設計が非常に困難になる場合がある。ミックスドシグナルのネットには、特別な扱いが必要になったり、設計フローがそのままでは適用できないことが多いため、分割の際には、トップレベルでなるべくミックスドシグナルのネットが出てこないように分割すべきである。

  |

  * 例として、チップの半分は低電圧で動作し、もう一方の半分は高電圧で動作するようなデジタル回路を考えよう。機能検証時には、全てのロジックがグループ化され、Verilogシミュレータで検証される。しかしながら、チップインプリの段階になると、パワー領域によって分割したり、電源島に分割し、それぞれをレベルシフタセルで繋ぐ必要がある。設計階層に対しての欠落が、P&Rツールを実行するときに問題を引き起こす。もし、適切に分割されているとすると、このような問題を防ぐことができる。

  |

  * 通常、設計仕様には、ブロック図が含まれる。もし、ないようであれば、別途作成する必要がある。このブロック図は、信号の流れとブロック構成のい理解に役立つ。パーティッショニングの最初のステップは、実装のフローに従って、デザインを分割することである。もし、アナログブロック内に大きなデジタルブロックが含まれているとすると、デジタルブロックの方に移動させ、デジタルの設計フローに従って、設計すべきである。まず最初のゴールは、トップレベルでのミックスドシグナルのネットの数を最小化することである。次に、パワしなければならない。アナログブロックの場合は、一つのブロックに複数の電源系が存在する場合がある。しかし、これらのブロックも、モデリングの効率化や、IPリユースなどの理由がある場合には、分割されるべきである。パーティッショニングの最後のステップは、容易な設計の分業、モデリングの効率化、および自然な形の境界になるように改善することである。例えば、モデリングによりシミュレーション時間が削減できるように、適切な分割を考慮すべきである。


Block Specification Creation(ブロックの仕様作成)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * ブロックへのスペックの分配は、ブロック分割が完了した後に行う。それぞれのブロックに対しては、同じプロセスを適用することができる。少なくとも仕様には、ピンリストと動作条件(入力電圧、動作温度、その他の電気的な特記事項)が含まれなければならない。ブロックの仕様には、トップレベルの設計仕様から、引き継いだものや、設計がうまくいくように新たに設定された内部仕様からなる。ブロック分割の主要な目的は、検証と実装に対して、追加のプランニングが発生するかもしれない、ということを十分に理解することである(?)。


Simulation Planning
-----------------------------

  * シミュレーションテストプランは、トップレベル・ブロックレベル共に、機能面・性能面の検証全てをカバーしなければならない。テストプランは、チェックすべきコーナーの内容、作成が必要なモデル、ドライバ・負荷・チェック項目が書かれたテストベンチの内容、それぞれのテストの目的、が書かれた包括的なドキュメントである。このドキュメントの目的は、必要以上のシミュレーションをしなくても、検証カバレッジを最大化することである。さらに、人的リソース、計算機リソースの計画策定にも使用される。


Simulation Corner Cases
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * テストプランは、まずシミュレーションを行うPVT(プロセス、電源条件、温度)コーナ条件を定義しなければならない。つまり、検証を行うプロセスの動作範囲、温度領域、電源電圧の範囲(それぞれの電源領域毎に)を明確にする。プロセスのコーナ条件は、デバイスのモデルファイルの中に、セクションとして定義されていたり、別ファイルとして定義され、Typicalのモデルファイルと同列に置かれていたりする。プロセスコーナーの目的は、プロセスの動作範囲全てをカバーすることではなく、設計で必要となる点だけをカバーしたものである(?)。例えば、高速のPMOSと高速のNMOSの組み合わせは"ff"、もしくは、"fast-fast"コーナーと呼ばれる。逆に、低速のPMOSと低速のNMOSの組み合わせは"ss"、もしくは、"slow-slow"コーナーと呼ばれる。大部分の設計には、この組み合わせだけで十分であるが、高速のPMOSと低速のNMOSの組み合わせ(その逆も)のスキューコーナーが必要となる設計もある。これらのコーナーはそれぞれ"fs"と"sf"と呼ばれている。さらに、モンテカルロ法によるサンプリングも必要となる。シミュレーションテストプランには、どのプロセスコーナーをデフォルトとして使用するか、どのコーナーを検証として使用するか、を明確にしなければならない。まずは、このコーナーの選択が全ての設計で最低限のカバレッジである。全ての回路ブロックに対して、このプロセスリストだけで検証をすればよい、というものではない。回路ブロックの中には、追加で他のプロセスコーナーで検証しないといけない場合もある。追加のシミュレーションが必要となるブロックには、シミュレーションテストプランに明記し、後でわかるようにしなければならない。

  |

  * 電圧のコーナー条件は、トップレベルの仕様や、個々のブロックの詳細仕様から、容易にわかるようになっている。全ての外部電源、内部電源を特定することができると共に、その変動範囲も見つけられる。これらの仕様を中心に配置することによって、シミュレーションに使用される入力電圧範囲が明らとなる。最後に、温度に対しての仕様は、トップレベルの設計仕様からくる。リユースされたIPを使用しているのであれば、新しいデザインの仕様での電源電圧の変動と温度変動に対して、特性を満たしているかどうか検証を行わないといけない。もし、特性がミートしないのであれば、検証プランにそのIPの検証を付け加える必要がある。全てのブロックでの温度領域と電圧範囲の仕様は、トップレベルでの設計仕様をカバーしていないければならない。


Identifying Tests and Specifying Test Details
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 必要となるテスト仕様の抽出は、テストプランの検討の一部である。テストプランリストの中には、トップレベルのファンクションテストや、トップレベルの性能テスト(要求があれば)、ブロックレベルの性能テスト(機能テストは言わずもがな)、モデルの妥当性確認(回路 vs モデル)が含まれていなければならない。それぞれのテスト項目は、わかりやすいように、テスト名とテストの目的(機能、性能、妥当性)が記述されるべきである。テストリストの例をTable 1に示す。テストの目的を明記することで、要求される精度や、テストされる項目、モデル開発のアプローチの仕方に役に立つ。


  .. list-table:: Table1 Simulation Test Purpose
    :header-rows: 1
    :widths: 10, 20, 20

    * - Type
      - Description
      - Why?

    * - システムの振る舞い
      - システム全体に対して、実際に使用するデータでテストする。
      - システム全体の機能検証、高水準なモデルの提供

    * - 機能検査
      - 全ての制御信号を動作させ、全てのモードの出力をモニタリングする。回路間が正しく接続されていることを確認する。
      - 接続性の確認、エラーの発生確認。

    * - アナログブロックの性能検査
      - 最も低い抽象度(回路レベル)で高精度のアナログシミュレーションを実施。
      - 全コーナーでのブロック性能の検証。

    * - アナログサブシステムの検証
      - クロックリカバリ回路のような複数のブロックでのアナログシステムの性能検証。
      - 複数のブロックでの性能の測定。このテストは最小限で良い。

    * - モデル妥当性検査
      - ビヘイビアモデルとトランジスタレベルの応答性の検証。
      - ビヘイビアモデルの信頼性を検証。

    * - ミックスドシグナルインターフェース(A/D, D/A)
      - 配線の寄生成分、ゲート負荷、タイミングを考慮したインターフェースの検証。
      - シミュレーション領域間のインターフェースの検証

    * - フルトランジスタ
      - スタートアップ、電源供給の順序、ダイオード接続、ショート、ラッチアップ、電源管理、スタンバイ、スリープモード、パワーダウンモードの検証。
      - ビヘイビアモデルでは観測できない特性をトランジスタレベルの回路を用いて検証。


  * テスト項目が決まれば、次にテストの詳細を決めなければならない。アナログ回路、ミックスドシグナルの世界では、スプレッドシートがよく用いられる。その中で、特にテストベンチのドライバや負荷、チェック項目などが記述される。テストベンチのセクションでは、DUTがどのような電源電圧、ロジック信号でドライブされるか、DUTはどのような負荷(抵抗、容量)に接続されるか、性能と機能の期待値、が記述される。これらの項目は、非常に重要であり、必ず記述されなければならない。それ以外にも、コーナー条件、初期値の条件、シミュレータの選択とセットアップの仕方、テストベンチの場所、ビヘイビアモデルに対する要件、も記述されていないければならない。

  |

  * テストプラン作成時に、コーナーリストから、シミュレーションを行うべきコーナーを選択しなければならない。追加のコーナー条件についても、この段階で付加される。また、それぞれのテストでの初期条件(Initial Condition)も追加される。異なった初期条件でシミュレーションを行った場合、異なった結果を生み出すことがある。あらかじめ、初期条件を明記しておくことで、このような曖昧さを除去することができる。次に、テストベンチ、回路図、設定ファイルの格納場所や、スティミュラス・信号源などが記述される。これらのビューの名前を明らかにしておくことで、ライブラリマネージャで容易に見つけることができたり、ヒューマンリソースの早急なシフトが可能となる。さらに、これらのデータは、テープアウト中はデータのロケーションが変わることはないため、テープアウトが終わるまでにアーカイブしておくとよい。シミュレーションのステート(設定)は、他のテストベンチビューとともに、保存され、ドキュメント化されるべきである。このシミュレーションのステータスファイルには、シミュレータのセットアップ情報(シミュレータの選択、設計変数、解析の設定、アウトプットの設定)が含まれる。それぞれのテストでは、最低でも、実行されるべきシミュレータと解析の情報がドキュメント化されていなければならない。そして、このデータはスケジューリングや、後に述べるモデルの選択時に役に立つ。

  |

  * 最後に、シミュレーションに使用されるビヘイビアモデルも、この段階で特定されなければならない。シミュレーションに必要となるモデルを全てリストアップすることが目的である。それぞれのテストに必要となるモデルをリストアップすることにより、次節で議論する包括的なモデリングプランの作成につながる。


Modeling Plan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * モデリング計画書は、シミュレーションテスト計画書の一部と位置づけられているドキュメントであり、テスト計画書やトップレベル仕様書、ブロック仕様書などから作成される。この文書の目的は、モデル開発者に対して、ビヘイビアモデルの仕様を提供することである。モデリング仕様書は、デザインを検証するために必要なことが全て記述されなければならない。前節で述べたように、必要なモデルは、テスト計画書作成段階でリストアップされている。それぞれのモデルは、ブロック仕様書で定義された機能を持つピンのリストを持っている。最後に、モデルの意図を明確化するために、モデルの目的や主要な機能が記述され、さらに、シミュレーションでのモデルの使用方法が明記される。これらの情報から、モデル化に適した言語の選択が行われる。

    * Verilog and VHDL: 標準デジタルモデリング言語

    * Verilog-AMS and VHDL-AMS: 標準ミックスドシグナル言語

    * Verilog-A: Verilog-AMSのアナログサブセット言語

  * もし、アナログに特化シミュレータ(SPICE or FastSPICE)を使用するのであれば、Verilog-Aのみが使用可能な言語であり、デジタルのシミュレータのみを使用するのであれば、Verilog, VHDLがモデリング言語となる。

  |

  * モデリング計画書の別の目的として、それぞれのセルの要件を事前にレビューすることで、開発しないといけないモデルの数を減らせることである。Verilog-AMSをデフォルトのモデリング言語とすることで、アナログ・デジタルのモデルの結合が自動的に行われる。Verilog-AMSがそのままでは使用できないのは、RTLで合成を行うときと、Verilog-AMをサポートしていないSPICEを使用する場合のみである。


Resource Scheduling
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * トップダウン設計を行うことで、製品開発時に同時開発が可能となる。すなわち、低次元のブロックの実装が完了しなくても検証を行うことが可能となる。デザインの分割を実施し、ブロックごとにスペックを割り当てることで、複数のエンジニアが同時にブロックの設計を行うことができる。この方法により、市場に投入するまでの時間を削減できたり、デザイン全体の検証カバレッジを上げることで、1回の設計で成功する確率が高くなる。また、ピークが発生しないように、人間とコンピュータのリソースを調整することもできるようになる。すなわち、適正な人数の設計者をモデルの作成と検証に割り当てることができ、適正なツールのライセンス数を用意することができるようになる。さらに、必要な計算量の見積が容易になる。シミュレーションテストプランは、重要な設計マイルストーン毎に、締め切りに間に合うかどうか、チェックされる。


Physical Implementation Plan, Early Floorplanning, and Physical Verificaiton Plan
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

  * 計画策定時には、チップ実装(レイアウト上での信号と制御のフロー, 電力分配, ブロックの実装に必要なリソース割り当て)のことも考慮しなければならない。パーティッショニング段階でプロアプランを行うことで、代替のブロックの配置状況や、ブロックの形状を知ることができる。さらに、マスク設計者が、初期段階での最適なピンの配置を検討することもできる。また、配線の混雑度を設計初期段階で知ることも可能である。特に、先端プロセスノード使用時には、物理検証の計画を行っておくことで、将来の問題を取り除くことができる。先端プロセスノードでは、リソグラフィのチェックや密度ルールのチェック、ポリ配線の向きのルール、チャネルベースのルールなどが、デザインの分割に影響を及ぼしうる。物理的な効果を無視して、アーキテクチャの設計やブロック分割を行った場合、設計サイクルの後半で重大な問題が発生するかもしれない。


Regression Tests
---------------------

  * Mixed-Signalの設計において、トップレベルシミュレーションとは、デジタルの回路とビヘイビアモデルにより抽象化されたアナログ回路を組み合わせてシミュレーションを行うことである。Mixed-Signalのネットやアナログの機能モデルを含んええいてもデジタルの検証技術を適用することが可能である。特に、アサーションベースの検証手法は、検証カバレッジを向上させるために、ぜひとも取り入れるべきである。このようなデジタルスタイルのシミュレーションは、トランジスタレベルのシミュレーションと比較して、高速に実行できる。そのため、多数の検証パターンを実行することが可能である(訳が怪しい)。さらに、いくつもの設定条件で検証することができる。このようなテストを実行することで、ブロックの特性が全体の仕様を満足しているかどうかわかる。理想的には、設計の進捗に従って、テープアウトまで、継続して、テストが実行されるべきである。このようなテストは、一般的に回帰テストと呼ばれており、デザインの変更や設計が完了したブロックが設計仕様を満たしているかどうか、継続的にチェックすることができる。

  |

  * トランジスタレベルで、アナログ回路の性能回帰テストを行うことは、シミュレーション速度の問題から、尻込みするかもしれない。ブロックの性能検証に必要な大量の数のシミュレーションを管理したり、自動的にシミュレーションを実行するテストベンチマネージメントツールがある。しかしながら、このツールを用いても、シミュレーション時間の問題については、解決することができない。ビヘイビアモデルチェッカ(ビルトインの検証チェッカや、シミュレーション結果解析ユーティリティ)を使用することで、シミュレーション結果の検証を楽にすることができる。


Assertion-Based Verification
=========================================================

* | 定義する事によって、Assertionは意図した設計の動作を捕まえます。
  | Assertion-Based Verification (ABV)は、デジタルIC設計者によって証明された強力な評価アプローチで、評価技術者が設計品質改善と市場投入までの時間を削減する事が出来ます。
  | Assertionは開発設計、評価環境の間に記述されます。設計者と評価技術者の両方がAssertionとして、要求物を明確にして理解する中で必要とされます。

* 与えられたブロックの設計者は、以下によってブロックのABVを可能にできます。

  * ブロックと残りのデザイン間のインターフェイスのプロパティを反映するAssartionを置く、又は書く事（図１の左から右へ数えて1,3,5番目のアサーション）

  * 改修されたブロックのインターフェイスに関して作られたいかなる追加前提もAssertionとして文章化される。

  * ブロックのサブコンポーネント間に起きるであろう重要な相互作用に関するassertionを書く事。

  * 通常機能、境界条件、起動動作やその他の予想できるエラーと関係のある予想できるエラーのassertionを書く事。

  * 知られているコーナー条件と評価されるデザインの複合領域を保証するためのカバレッジポイントを書く事。


* | 設計者は、ブロックをその振る舞いが書かれたassertionを使う事で評価できる。
  | まれに、設計者はブロックの振る舞いを正しく評価するために、フォーマルな解析を使用できる。
  | 彼らは、一般的なシナリオでブロックの動作が正しいかテストするためにシミュレーションを使用する事が出来る。

* 評価技術者又はデザインインテグレーターは、デバイスのための機能仕様から引き出されたassertionとカバレッジポイントを定義する。

* 例えば、評価技術者は、以下を保証するためにassertionを定義するだろう。

  * デザインが常に有効な構成(配列)に入っている。

  * デザインと環境が正しくコミュニケーションしている。

  * デザインがその入力に対して正しく応答している。（例えば、図1の左から2,4番目のAssertion)

    .. image:: ./img/AssersionInputImage.png
       :alt: Figure 1. Device under Test(DUT) with Embedded Assetions



* | 評価技術者は、デザインが完全に評価されたことを保証するために機能カバレッジの測定に関心があります。
  | その目的のために評価技術者は、以下の事をチェックするために機能カバレッジポイントを定義します。

  * デザインが全ての有効な構成で評価されている。

  * デザイン・環境間のコミュニケーションプロトコルの全ての可能な変化が検証されている。

  * すべての、又は少なくとも代表の、入力の変化組み合わせが検証において使われている。

  * すべての、又は少なくとも代表の、出力の変化組み合わせが検証において観察されている。

* | PSLやSVAといった標準のassertion言語は、デジタルスペースのロジック設計者と評価技術者の必要性に合わせて発展してきた。
  | そして、ダイナミック(シミュレーションベースとassertionベースの）テストとフォーマルな検証方法の両方で使われてきた。
  | そのようなassertion言語は、表2にリストされるデザインに関する質問を提起、検証するためのフォーマルなフレームワークを提供する。


 .. csv-table:: Table2.Basic Questions and Property Types
    :header: "Question","Property Type"
    :widths: 150,50

    "時間に依存せず、発生するセット条件をもつ信号はあるか？","不変量（式）"
    "確かなタイムフレーム内で発生するふるまいのセットを持つ信号があるか？","境界のある不変量（式）"
    "デザインはセット動作を引き起こす境界条件を含むか？","境界条件"
    "エラー条件として延べられる値、又は順番を明記する方法があるか？","BUGの識別"
    "確かである信号の振る舞いがデザインの機能性にクリティカルであるか？","信号値"


Assertions in the Analog and Mixed-Signal Space
--------------------------------------------------

* | アナログ又はミックスドシグナルのための検証は、計画し実行する事がますますに困難になって来ている。
  | これらの基本的な困難は以下の３項目。


  * 一貫した言語と、そしてディスクリートイベントドリブンシステム、ミックスドシグナルそして連続時間変化のシステム、に渡るアサーションの形式に評価目的を表現するための完全なスペクトラムのメソトロジがない。

  * １つのグループによって表現された情報は、その他のグループのアナログ/ミックスドシグナルドメインにおいて簡単には流れない。

  * | デジタルとアナログ、又はミックスドシグナルブロックを含む基本的な検証プランがない。
    | 完全なシステムの同じ項目において、分離してテストされた２つの項目を結びつける事が出来ない。
    | フルシステムにおいて、このチャレンジは、アナログ、又はミックスドシグナルブロックからのパワーシーケンス、リーク電流、ノイズ等の検証側面を含みます。


  | これらが良く定義されている正規の特性使用言語の可能性は、デジタル設計と検証コミュニティに時々利益をもたらします。
  | そして、上で述べたチャレンジを視野に、同じ又は似たようなコンセプトをアナログとミックスドシグナルデザインに、
  | そして検証ドメインに適用しようとする事は自然であり、さまざまな効果がVerilog-AMS言語コミュニティの様にその方向で発生している。


Mixed-Signal Assertion Application
-------------------------------------------------------

* | アナログ/ミックスドシグナルアサーションの機能を含む事はできるだろう、しかし以下の事を制限出来ない。

   * | 機能特性：
     | デザインは、基本的な機能性の必要条件に合っているか？このような必要とされる特性を指定するための能力は、
     | アナログ/ミックスドシグナル回路の正規の検証を実現するのに必要である。

   * | ミックスドシグナル特性：
     | いかなる特性も、ミックスドシグナルインターフェイスの片側のアナログ値ともう片側のデジタルコードがマッチしていなければならない。
     | 例は、特性測定のために使われるADC、又はデジタルキャリブレーション電流DACを含みます。
     | これらのデザインシステムと関連した特性はより先端のプロセスにおいてアナログの変わりやすさが増加し、ついにはアナログ回路のデジタルキャリブレーションが必要にな>る。

     | それらは、時々、デジタル中心の特性とアナログ中心の特性に再分割する事ができる。
     | デジタル中心の特性の例は、クロックやアナログ量をリファレンスとしたサンプリングイベントに関連した既存のデジタル特性。
     | アナログ中心の特性例は、実数値変数又は信号をリファレンスとしたアサーションの二値判定です。

   * | デジタル特性：
     | 標準的な評価テストベンチで使われているような純粋なデジタル特性は、
     | デザインが設定し直された時に、連続ドメインに代表されるデザインの再分配によって、デザインが設定し直された時に再利用出来る必要がある。
     | とりわけ、これらのデザインの設定の多くは、デジタルブロック又はサブブロックの代わりに、トランジスタレベルに対応するもの、
     | 又は、寄生素子の存在するブロックを用>いての再シミュレーションを要求する。
     | デジタル中心の信号がもはや純粋なデジタルでなく、しかし代わりにアナログカーネル又はミックスドシグナルシミュレーションにおける実数値の電圧又は電流だったとして>も、
     | リグレッションテストの間、同じ表現についてはそのまま同じテストベンチを使用する事が望ましい。


Existing Approaches to Assertions in Analog and Mixed-Signal
-------------------------------------------------------------------

* | アナログ評価ドメインにおいて、アサーションを定義するのに必要な制御の理想の仕様は、共通の概念ではない。
  | それにもかかわらず、アナログ設計者と検証エンジニアは、回路を構成するデバイスからの安全な動作条件を明示する習慣的な特性チェックを設定する。
  | SPICEシミュレータにおいて、これは特別なデバイス動作条件チェッカーを加える事によって一般的に行われており、
  | ユーザーによって明記されたデバイスレベルの条件がシミュレーション過程で本当に満足する事を評価するための相関的な解析として関係付けている。


SPICE Device Operating Condition Checkers
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ポピュラーなSPICE言語では、ユーザーは回路の安全な動作条件を明記したカスタムな特性チェックを設定できる。

* シミュレーターは、パラメータが安全な動作エリアから外れた時にユーザーに対しメッセージで示します。そして逆に、パラメータが安全な領域に戻った時に、ピーク値と違反期間をログ出力します。


* | 一つのシミュレーションステップにおいて、変数が最大値を超える値から直接、最小値よりも下の値に変化した時、シミュレーションは時々、
  | 中間境界解法？（middle bound solution）である(min+max)/2がピーク値とバイオレーション時間をレポートするのに使われます。

* 一般的にデバイスチェッカーでサポートされる４タイプのチェッカーは、表３に示す通りです。

  .. csv-table:: Table3.Typical SPICE Checks
    :header: "Check","Description"
    :widths: 50,150

    "初期設定チェック","固定パラメータ（固定グローバル、モデルまたはインスタンスパラメータ等動作点に依存しないパラメータ）のチェック。このチェックは、解析が開始される前にに実行され、固定パラメータが変えられた場合一度だけレポートされます。"
    "動作点解析","インスタンスの動作点パラメータを基本とした計算式を伴うチェック"
    "時間ドメインチェック","Tran解析におけるチェック"
    "周波数ドメインチェック","AC解析におけるチェック"

* | ネットリストで明記された安全な動作エリアのチェックは、SPICEシミュレータのTran,AC,DCそしてDC sweep解析によってサポートされます。
  | ユーザーは、そのチェックをON/OFFする事ができ、またはそのようなチェックグループの入ったステートをシミュレータの入力として設定する事ができます。


Using Mixed-Signal Behavior Languages to Express Assertion Intent
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* | VerilogAMSやVHDL-AMSのような一般的なミックスドシグナル言語によって提供される条件付きの表現が、色々な種類のチェックを定義するために使われている。
  | これらのチェックは、一般に期待される回路動作を定義するためにマクロやdisciplineのような基本的な言語テクニックを利用する。
  | そしてエラーフラグは、そのモデルに明記された動作範囲を出し入れする事でシミュレーションによって設定/解除できる。
  | このようなマクロの一般的な設定の一部を以下に示す：


  .. literalinclude:: ./txt/assertion_example1.txt
    :linenos:
    :language: verilog


Requirements for Mixed-Signal Assertion-Based Verification Solutions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | PICEレベルの動作点解析のアプリケーションがデバイスレベルの特性解析に有効である間、
  | アナログとミックスドシグナル評価技術者が直面しているより複雑な回路コンディションに対し、設定、評価する方法は今のところない。
  | 時間変化する回路特性のアサーションに基づく能力、または複合的なクロック条件によって決定する間隔で回路の時間的特性をチェックする能力をこれらのチャレンジングなオペレーションは含む。
  |
  | その上、動作点解析を使った現在のユースモデルはメソトロジは純粋なアナログ又はミックスドシグナルアプリケーションでのみ実行され一つの分離された解を作ります。
  | そして現在存在するデジタル評価メソトロジよりもっと広く、目に見えて実行できない。

* | 一方、モデル動作をチェックするためのミックスドシグナルのHDLをベースとしたアプローチはより抽象的で、デバイス特性レベルからより複雑な時間的な動作まで
  | 広範囲にわたってカバーする事が出来る。しかしながら、このアプローチの制限は標準的なアサーション言語を伴うフューチャーの設定が出来ない事である。
  |
  | 特定の設計ブロックに設定されたアサーションによるカバレッジの測定、ブロックの設計と検証面が判ける能力、
  | デバックアサーション結果のデバックのためのビジュアルな表現を持つルーツはごく少ない例です。

* | 対照的に、デジタル評価システムはABVによりしっかりと確率されたユースモデルを持っています。
  | このユースモデルは、PSLやSVAといった標準的なアサーション言語に基づいており、検証を満たす時間の間に発展したメソトロジがディスクリートドメインで必要です。

* | デジタル、ミックスドシグナル、そしてアナログのスペクトラムをカバーするために、言語とアサーションベースの検証のためのメソトロジは、
  | ディスクリートドメインで実行されなければならない。そして既存のアプローチによって上でリストされた制限にアドレスしなければなりません。


Using PSL with Verilog-AMS
-----------------------------------------------------------

PSL Assertions Involving Analog Expressions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* | いくつかのAMS評価ツールは、最近では二値判定のPSL Assertionで表現する事が出来るようなアナログ評価式をクロック評価式の中でサポートします。
  | そして、プロパティの実際の独立変数と順序によってトップレベルのクロック信号が明白に定義されている時、又はデフォルトクロックを通して定義されている時の例を上げます。

  .. literalinclude:: ./txt/assertions_analogExpressions_1.txt
    :linenos:
    :language: verilog


  * | ブーリアン式A --> next ブーリアン式B
    | 1クロック後の値を評価（ブーリアン式Bの評価は、ブーリアン式Aが1になった次のサイクルで行う。)

  * | A;B
    | シーケンスの書き方（最初のサイクルで信号Aが1、2番目のサイクルで信号Bが1）

  * | シーケンス1 \|=> シーケンス2
    | シーケンス含意演算子（シーケンス1が発生すれば次のサイクルでシーケンス2が発生する。）


  | clkの立ち上がりにおいて、V(sig)>0の場合、常に次のbが1である事を評価する。
  | clkの立ち上がりをclockと定義
  | a=1、次いでV(sig1) > 0.0の場合、常に次のクロックサイクルで、V(sig2)<0.3となり、次いでb=1となる事を評価する。


Analog Events for Asserrtion Clocking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Verilog-AMSアナログイベントファンクション crossとaboveは、PSL assertionにおいてクロックイベントをサポートする。

  .. literalinclude:: ./txt/assertions_analogExpressions_2.txt
    :linenos:
    :language: verilog

  | V(sig3)が0.0をクロスする場合
  | V(sig1)>0.0、次いでa=1ならば、その次のクロックサイクルでV(sig2)<0.3となり、次いでb=1となる事を評価する。

Support for wreal in PSL
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | wrealネットタイプは、
  | VerilogAMS言語のいくつかのベンダーのインプリメンテーションにおいて、ストラクチャー間の実数値による物理的接続を代表します。
  | コンセプトは、適切な標準構造の検討を早めるます。


  | wrealタイプオブジェクトを必要とする表現式は、Boolean式、クロック式そしてプロパティとシーケンスインスタンスの表現と、
  | PSLアサーション内で表現する事ができる。

  .. literalinclude:: ./txt/assertions_analogExpressions_3.txt
    :linenos:
    :language: verilog

  | clkの立ち上がりにおいて、mywreal1>4.4となり、次いでmywreal2<6.6となる。


Module-Bound Verification Units
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | vunitsはアナログPSLアサーションで使う事ができる。
  | これは、デザインブロックを修正出来ない、するべきでない場合に使える機能である。
  | vunitは、シミュレーションのためのデザインファイルとダイナミックにリンクする付加的なファイルです。
  | 上記のように、デザインファイルは変更せず、そしてアサーションコードを別のvunitファイルに存在させます。

  .. literalinclude:: ./txt/assertions_analogExpressions_4.txt
    :linenos:
    :language: verilog

* | vunitsは主としてアサーションコードを蓄積するために使われるが、アサーションに限らない。
  | もしアサーションのために追加のビヘイビアコードが必要になった場合、variables又はregistersに蓄えた値、それはvunitのmodeling layerに追加する事が出来る。
  | この機能はいくつかの場合で、アサーションのコーディングを容易にする事が出来る。

* 評価ユニットはアサーションをVerilog/VerilogAMS/System-Verilog又はVHDL インスタンスに追加する事が出来ます。

  .. literalinclude:: ./txt/assertions_analogExpressions_5.txt
    :linenos:
    :language: verilog


Coverage Analysis for PSL Assertions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
* | アサーションは、カバレッジドリブン評価環境の重要な部分の一つです。
  | カバレッジポイントはスティミラスがテストに必要なコンディションを作る事が出来たかろうかを示します。
  | この情報は、デザインが十分にテストされた事を決定的に保証します。
  | これは、定義した信号とカバレッジポイントとして指定された定義した式、そしてカバレッジモニターとしてアサーションを定義したそれ自身によって達成されます。

* | カバレッジの似たようなアプリケーションは、ミックスドシグナルの文中のアサーションを使ったときに起こると予期される。
  | とりわけ、ブーリアンレイヤーにおけるミックスドシグナルの式を比較する時、assert命令はカバレッジリポートに現れるでしょう。
  | そして、アサーションが十分にデザインが経験するアナログコンディションをチェックするかどうかの価値のある見識を提供します。
  | 同じく、実際のアサーションを起こすための式によってカバレッジポイントを作成する事は、アサーションそれ自身がデザインプロパティを評価する事を洗練する事を必要とするかどうかの知見を提供します。


Using SystemVerilog Assertions in a Mixed-Signal Design
--------------------------------------------------------------------------

* System Verilog Assersions(SVA)は、System Verilog P1800-2009 standard[14]のサブセットです。

* | System Verilog standardのこのバージョンは、コンティニアスドメインオブジェクトの存在を許していない。
  | 従って、既存の標準バージョンによってアナログ式を作成する事は、基本的に不可能である。
  | 近頃のベンダーは、System Verilog assertionの文脈にrealデータタイプの使用を許可する事をSystem Verilogに拡張している。
  | そして、これらの拡張は標準の将来バージョンに含まれる予定となっている。

* | アナログデザインの文脈において、もしelectricalドメインに属するネットに接続しているSystem Verilogポートにrealが値する場合、これらを使う事ができるでしょう。
  | 以下の例はこの使用モデルを示します。

  .. literalinclude:: ./txt/assertions_analogExpressions_6.txt
    :linenos:
    :language: verilog

* | 上に示すように、System Verilog real変数はAMS機能に一度インポートする事で、real変数の使用に制限があるSystemVerilogのassertion文に置く事が出来る。簡単な例で、どのように行うかを示します。

  .. literalinclude:: ./txt/assertions_analogExpressions_7.txt
    :linenos:
    :language: verilog

  .. image:: ./img/Electrical2RealConversion.png
     :alt: Figure 2. Example of Electrical to Real Conversion

  | 図2はElectrical2RealのコネクションがどのようにSVAブロック内で使われているSystemVerilogテストベンチにreal値を運ぶのを手伝うかを説明した図です。


Using Value-Fetch to apply Assertion to Pure Analog Characteristics
-----------------------------------------------------------------------------------

* | 連続ドメインの値をdiscreteドメインに変換する事は、ミックスドシグナル効果を制御するために使うテストベンチメソトロジの評価で一般的に実施されるものになりつつある。
  | この値の取り出しは、階層を持つdiscreteと連続ドメインの言語レイヤーの任意のレベルで交わる言語境界をもたらします。
  | 一方のそのような取り出しオペレーションは、連続ドメインのシンタックス、又は意味を理解できない純粋なデジタル言語から働く事が出来ます。
  | より前進的なアプリケーションにおいて、評価技術者は'不正確な'取り出し(最終的に受けたアナログ解のポイントと論理的な解法による)と'正確な'取り出し(受取りがなされるタイムポイントにおいて求められるアナログ解法)間で選択する能力を要求するだろう。
  | そのような受け取り動作は、

  | potential, flow, power, 動作ポイントパラメータ値、のように問われる必要のあるものを大量に必要とする。
  | 存在するミックスドシグナル言語の標準では、このようなフューチャーを提供していないと同時に、既存の改修により値を受け取る拡張を提供する事によってベンダーは再びこのような限界を乗り越えます。そして、標準言語は同じ表現様式をフォローするだろう。

  | そのような値を受取るルーチンは、以下の範囲の言語ベースの選択範囲から呼び出せる必要があります。

    * Verilog
    * SystemVerilog, or
    * Verilog-AMS scope

  | 受取りルーチンは、(制限ではないが)その他の言語ベースの選択範囲を含むアナログオブジェクトを参照する必要がある。

    * Verilog-AMS
    * VHDL-AMS
    * SPICE
    * Verilog-A


Activities in the Standards Committees
-----------------------------------------------------------------------------------

* | 二つの標準グループは積極的にアナログ/ミックスドシグナルアサーションの標準化に向けて活動している。


  * Analog System Verilog Assertions (ASVA)[13]委員会は、SystemVerilog言語のSVAサブセットにおけるアナログ/ミックスドシグナルの拡張にフォーカスしている。

  * SystemVerilog-AMS (SV-AMS)[15]委員会は、AMSがSystemVerilog言語に拡張する事を定義している。

  | これらの２つの並列した動きはVerilogからVerilogAMSへ変換するのに成功。
  | ASVA委員会はによってもたらされたアウトプットは、SV-AMSに影響を与えると期待されている。


A Mixed-Signal Sigma Delta ADC Example
-----------------------------------------------------------

  * | PSL/SVAアサーション言語が基本のサンプルデータ回路(DAC,ADC,シリアルパラレル変換回路,スイッチトキャパシタフィルタなど)などの順序回路を論証するのを促し、許可して以来、サンプルデータ回路はアサーションベースデバッグの理想である。
    |

  * | Σ-⊿ADC(変調器とローパスデジタルフィルタ)は典型的な例である。
    | 基本的なアナログ変調器でさえ、順序動作を示す。
    | この例では、PSL/SVAアサーションが順序動作について判断し、Mixed-Signal動作の前提について判断することに向いていることを示す。

  .. image:: ./img/Sigma_Delta_ADC.png
     :alt: Figure 3: Sigma Delta ADC Architecture

  * | Σ-⊿アーキテクチャ(一般には⊿-Σアーキテクチャと呼ばれる)は、変調器にローパスフィルタを連結させる。ADC設計のため、変調器はアナログ、フィルタはデジタルであり、DAC設計では逆にする。Σ-⊿変調器設計の主要特性は、非常に低オーダ(しばしばただの単bit)の量子化器と一緒のフィードバックループである。積分器は、量子化ノイズを形成するループに組み込まれている。量子化器(比較器/ラッチ結合)からの出力は、たいてい入力信号によって変調され、量子化ノイズが組み込まれたビットストリームである。

  .. image:: ./img/SA_DA.png
     :alt: Figure 4: Sigma Delta Detailed Architecture

  * | 図4.の変調器アーキテクチャはH(z)変換関数を用いてモデル化された離散(スイッチトキャパシタ)積分器と共に二次のフィードバックスキームを特徴付ける。
    | 同様に示されているのはsinc3フィルタのアーキテクチャである。
    | 如何に記載されているVerilog-AMSテストベンチでは、変調器インスタンス(mod1)、filter_decimator(正確にはsinc3フィルタ)、インスタンスdf1を含んだADC(i1)モジュールがインスタンス化される。

  .. literalinclude:: ./txt/ADC_test.v
    :linenos:
    :language: verilog

  * | 変調器とフィルタは両方ともVerilog-AMSを使ってモデル化される。サイン波電圧発生源(input)とclock発生器(pulse waveform)もインスタンス化されている。
    | ADCの入力は、振幅0.65、周波数Tsigのサイン波である。
    | この回路へのクロックは、256回の割合でオーバーサンプリングされたものと入力サイン波のナイキスト速度が一致する周波数が選ばれる。
    |

  * | シミュレーション波形の(大変な)手動検査は、順序回路アーキテクチャのコアループ特性が連続的に維持されているとすると原因究明するのに向いている。これは高サンプリングレートのせいで入力波期間のいくつかでも異なる。
    | 代わりにシミュレーションが走っている間ABVを使うのは、後処理ステップとしての波形検査の伝統的(そして大変な)方法を補完する。
    |

Assertion Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * すべてのアサーションは変調器・積分器回路をスイッチさせるのに使用される既定のclockが使用され評価される。

  .. literalinclude:: ./txt/adc_vunit.txt
    :linenos:
    :language: verilog

  * | 上記のvunitモデリングレイヤは以下で詳述されるアサーションによって言及される。
    | いくつかの補助的なVerilog-AMSを導入するのに向いている。
  * | 最初のアサーションのペアは、最初の積分器I1が算術演算であることを示し、積分器回路の基本特性を維持することをテストする。
    | 最初のアサーションは積分器への入力が立上るどのサイクルでも、後述のサイクルの積分器からの出力も立上ることをテストする。二つ目はモデリングレイヤが使用されないような詳細さを通して一つ目の逆をテストする。

  .. literalinclude:: ./txt/p100_assert.txt
    :linenos:
    :language: verilog

  * | 次の四つのアサーションは、基本的な比較器の演算をチェックする。
    | 最初の二つは、積分器I2の出力(ゼロ検知閾値とみなした比較器への入力)がそれぞれ立上る/立下ると、1bit DACがそれぞれV(Vref)よりも大きく、-V(Vref)以下であることを用いて比較器からフィードバックされた値になる。これらは前置アサーションの例である。
    |
  * | 三つ目のアサーション(integ_to_comp1)は、積分器I2の出力が一度立下ったら比較器/フィードバックが立上る(すなわちV(Vref)以上になる)サイクル前(もしくは間)に再び立上る。
    | これはイベント順序を断定するための条件例であり、この順序のイベントは特定の順序で怒る。beforeキーワードを使うことに注意。
    |
  * | 四つ目のアサーション(integ_to_comp2)は、比較器/フィードバックが一度立下ると積分器I2の出力(比較器への入力)が再び立上るまでずっと立下っていることをテストしている例にいくらか似ている。
    | untilキーワードが存在することに注意。
    |
  * | 二つ目のセットの(下にリストされている)性質は、基本的なループ安定性(高位変調器は不安定な傾向がある)をテストする。
    | 最初のループ安定性は、変調器/ADCへの入力電圧が基準電圧の半分を決して上回らないという前提の重要な設計であるvin_less_vrefをテストしている。
    |
  * これは、統合された設計環境を考慮した設計によって作られた前提を正式にとらえるための特性を使った例である。この方法の前提で計算することで、シミュレータは入力背景が集積背景の中で決して違反しないことをチェックできる。

  .. literalinclude:: ./txt/p101_assert.txt
    :linenos:
    :language: verilog

  * | この特性のグループは、積分器の出力がこのケースではV(Vref)が1.5以内に特性が抑制されていることを保証する。
    | (注意：不安定な⊿-Σ変調器は一般的に積分器出力で大きな信号揺れを出す。そして実際にとても風変わりな設計はそんな大きな揺れを検波する電気回路を加え、揺れを破棄(break)するために積分器をリセット/無効にする)
    | この例では、積分器の出力レベルが制約内に入っていることを保証するためにチェックされる。
    |
  * | 不安定な変調器の二つ目の関係のある特性は、特定のビットパターンに存在する。
    | 次の二つの特性では、一連の連続した比較器がhigh値出力(論理値1)もしくはlow値出力(論理値0)であることがこの詳細設計で起こらないことを仮定してる。
    | シーケンス内の期間[\*7]の存在はPSLのシーケンス乗算器の機能を果たすことに注意。
    |
  * | 変調器の望ましくない特性(安定したそれと同等)はしばしば"idle tone"の存在がある。すなわち、変調器がオーディオアプリケーションで使用される際に可聴式tone/clickに通じることができるような繰り返しビット列を加える。それに応じて2つのリミットサイクルをチェックする1100110011001100と、その逆の好ましくないビットストリームシーケンスをチェックするためにコード化される。
    |

Simulation Results
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  * | 数多くのアサーション失敗は、表4.に示されるようにシミュレーション実行後に気付く。アサーション波形は、他の回路シミュレーション波形の存在下(図5.の矢印で示される波形)でそのような失敗のデバックを許す。
    | この例では、アサーション失敗の多さはリミットサイクルの可能性を最小化する試みがすべて成功するというわけではない変調器に比較器を加えるランダムディザー信号の大きさのエラーによる。

  .. csv-table:: Table4.Assertion Failures from Simulation
    :header: "Assertion Name","Finished Count","Failed Count"
    :widths: 60,50,50

    "comp_not_stuck","15","3"
    "comparator_neg","2176","138"
    "comparator_pos","2170","139"
    "integ_to_comp1","2053","264"
    "integ_to_comp2","2053","125"
    "limit_cycle_p2","0","2"
    "no_long_one_seq","14","2"

  .. image:: ./img/waveforms_for_loopStabilityProperty.png
     :alt: Figure 5: Waveforms for Loop Stability Property



Conclusions
-----------------------------------------------------------

  * | このセクションでは、アナログとミックスドシグナル検証の挑戦の調査と、どの様にアサーションを基にした検証のコンセプトが取り組まれているのかを評価することが目的であった。
    | これもまた非常に複雑または高価な開発、伝統的な設計や検証方法を持続するという新たな可能性に焦点を当てたが、すべてはできない。
    | ユーザにアナログやMixed-Signalモデル上での複雑なアサーション開発を可能にするPSLとSVA基準の拡張セットが紹介された。
    |
  * 最終的に言語拡張はMixed-SignalΣ-⊿ADC設計上で使用された。サンプルされたデータ/順次アナログ回路動作を関連付ける特性のいくつかの異なるタイプは示された：

    * イベントの断定(状態Aが発生すると状態Bが必ず発生する/しない)
    * シーケンスの断定(状態もしくはシーケンスAが発生すると、指定オーダ中にシーケンスBが必ず発生する(もしくはしない))
    * 予期された/されない反復シーケンスをチェック
    * 並列クロックサイクルにわたった拡張チェック
    * サブシーケンスは与えられたタイムフレーム(クロックナンバー)などの大きなシーケンス内で必ず起こることを強要される
    * 他の状態が発生する前に状態が断定される/状態のトリガがかかる
    * いくつかの他の状態が発生するまでその状態が断定され/その状態のトリガがかかり続ける

  * | これらのチェックは後処理ステップとしてではなく、シミュレーション中に実行される。
    |
  * | 波形検査はアナログ/Mixed-Signal回路の骨の折れるデバック法である。ABVを使った波形検査を補完するアプローチはより素早く、より縛の厳密な同一に、そしてスループットの好転につながる。
    | アサーションや前提として保存された特性は、非常に単純なものからまあまあ複雑なものへ変化し、その違反のいくつかは徹底されていない波形検査からすぐにわかるものではない。回路ノード波形に併発するアサーションステータス波形の検査は、正確な背景でのデバック結果や確認するのを簡単にする。


Coverage Measurements
=========================================================

* デジタル、ミックスド·シグナル、さらに従来のアナログ設計が複雑になる程、
  検証とのギャップが現れてきている。ITRS( http://www.itrs.net/ )の図6が示すように、
  検証生産性が設計生産性を引っ張り、今度は製造能力を引っ張る。

  .. image:: ./img/ch4_fig6.png
    :alt: Figure6: ITRS Productivity Gap Chart


* プロジェクトの任意の時に、プロジェクトの検証サイクルの正確な進行状況を述べること、
  もしくは十分にテストされていない(もしくはいくつかの場合においては、全て試験された)
  デザインの部分を示すことは、しばしば困難である。
  カバレッジベースの検証技術は、この問題に対処するために登場し、そしてこれらの
  アプローチは、定量化またはカバレッジ/検証の進捗状況に関連付けたカバレッジタスク
  (カバレッジ·グループとカバーポイントの両方)を識別するためのチームを必要とします。
  これらのタスクは、様々な設計プロパティ、および設計機能を表し、静的または時間的の
  どちらかのカバレッジタスクとして、広く分類することができる。
  アサーションのプロパティは非常に良いカバーポイントを作成し、検証のための
  メトリクス·ドリブン検証(MDV)アプローチの不可欠な一部である。
  期間測定基準はカバレッジ測定のコンセプトになっているので、検証の進捗状況を測定する。
  これは、検証が終了しているか？または、どのくらいのカバレッジなのか？という問いを許可する。
  これらの質問に対する答えが検証手法とツールによって自動的に生成されると、
  検証エンジニアとマネージメントは、検証プロセスの完全性を測定するための、カバレッジの
  しきい値と基準を導入することができます。それらはまた、検証プラン自体、およびそのプランを
  実装する具体的なテストベンチの両方の開発に付加的な効果を導くことができ、検証'ギャップ'
  または 'カバレッジホール’を識別することができます。
  カバレッジ·ベース検証アプローチとそれに関連するメトリクス

  * 全体的な検証完全性を定量化して測定することができるようにする

  * 任意の識別されたギャップをカバーするために、検証計画の実施をガイド。


Digital Coverage Approached
---------------------------------

* 包括的なカバレッジベースの検証アプローチは、割り当てられた時間内に可能な限り
  これらの領域のいずれかを含む

  * コードカバレッジ。コードカバレッジは、ソースコード（VerilogまたはVHDLのような
    基本的なHDLコード）に基づいており、いくつかのサブタイプが含まれる。
    コードカバレッジツールによる自動化に依存する。

    * ブランチカバレッジ（またはより一般的に拡張された判定カバレッジ ）は、
      システム内のコードブロックの合計数に対して、テストによって実行された基本的な
      コードブロックの比率の測定。
      各制御構造（IFとCASEのような）の各枝の要求が満たされているかどうかを判定する。
      if/else または case の分岐に全てに到達したか否か？

    * ライン/ステートメントカバレッジ。
      HDLコードのすべての行（または文）が実行されたか？

    * 式のカバレッジ。
      全ての式（と全ての式の全ての項）が考慮されたか？
      各ブール式が真と偽の両方に評価されているか？

    * パスカバレッジ。
      各関数の可能なパスのそれぞれがフォローされているか？
      パスは、関数エントリから出口への分岐の固有のシーケンスである。

  * 有限ステートマシン（ FSM ）カバレッジ。FSMは、手書き（システムレベル設計）
    もしくは、自動的にHDL（例えばケース文の検査 ）より抽出される。
    どのように作成されるか、または抽出されたかに関係なく、FSMは測定する必要がある
    2つの主要な側面がある。

    * ステートカバレッジ。
      訪問したステートの割合を示す（可能なステートの合計の分率 ）

    * 遷移カバレッジ。
      状態間の訪問の可能な遷移やパスの割合を示します。

  * ファンクショナルカバレッジ。検証環境によってどれくらいの機能が実行されたかを
    判定する。ファンクショナルカバレッジは、カバレッジポイントに（テスト計画で
    定義された）テストされた機能をマッピングする、ユーザ定義のカバレッジ測定基準である。
    ファンクショナルカバレッジは、コードカバレッジ（テストされた機能と機能の
    インプリとの間の相関を得るための自動方法がないため、 RTLで欠けている機能を
    特定しないという欠点を持つ ）を補完する。多くの場合、イベントに関して特定の関心の
    特性または機能を指定するには、ユーザの関与を必要とします。

  * 構造カバレッジ

    * トグルカバレッジ。 DUTの変数およびネットがトグルした回数を追跡する。
      (1 -> 0またはX -> Z 、等)
      これは多くの場合、消費電力解析のために使用される。

    * 組合せカバレッジ。シミュレーション進行中に評価された(もしくはされない)式
      (またはサブ式)の値を追跡する。
      このタイプのカバレッジは、 検証における潜在的な穴を露出させ、シミュレーション中に
      試行されていない信号の論理的組合せを限定するのに役立つ。


Mixed-Signal Coverage Needs
--------------------------------

* デジタル（とミックスドシグナル設計のデジタル部分）のためにランダム化されたテストベンチ
  生成技術を使用している場合、カバレッジが重要です。ミックスドシグナル設計のカバレッジの問題は、
  アナログからデジタル、その逆のフィードバックループ数の増加によって、いくつかの新しい局面を
  取っている。これはデジタルアシストされたアナログ設計に至っているプロセス変動の増加によるものです。
  AtoDとDtoAフィードバックループの全てを動作させ、全てのパスが完全に調査される必要がある。
  種々のブロックの全ての「モード」を動作させる必要がある。DUTを動作させ、供給されるアナログ量
  （電圧範囲など）が十分にサンプリングされている必要がある。カバーされる必要があるこれらの明白な
  問題に加えて、いくつかの技術的な課題は、ミックスドシグナルの構成で発生する。

* 自動カバレッジアプローチ(カバレッジの面を自動的にHDLの検査から決定されている)は、アナログHDL
  (Verilog-A、Verilog-AMS、VHDL-AMS)ではよく機能せず、全く回路図ベースの設計のためにはならない
  (Veilog/ VHDLネットリストにデジタル回路図に適用された場合を期待している)。
  コードカバレッジ（分岐、行/文および表現/パス）とFSMカバレッジ機能はほとんどのアナログブロックに
  使用されていません。ユーザーが作成したアナログ/ミックスドシグナルの機能カバレッジのためのサポートと、
  ある程度の構造カバレッジが、まもなく可能になるかもしれない。
  例は、（例えば、電圧または電流のような）連続したアナログ値は、ユーザ定義のビンに離散化された
  アナログビンベースのトグルカバレッジで、トグルカバレッジアプローチは、これらのビンに適用される。
  UVM-MSは、次のセクションで説明した領域のカバレッジを見ている。


Binning Covergroups for Continuous (real) Analaog Values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* アナログ値は、自然の中で、多くの場合、連続しており、浮動小数点表現を対応する実数として表現。
  アナログ値は、可能な値の膨大な数の（多くの人々は、それが有限範囲に起因しているにもかかわらず、
  それは無限の範囲であると考えて引き受けることができるので根本的な浮動小数点表現は、）これは、
  カバレッジの定義については、問題が発生します。
  デジタルについては、4値論理（例えば、1,0,X,Z）は、定義によってすでに暗黙的に離散化されている。
  アナログについては、テストベンチは、明示的に、問題を離散化する必要がある。一般的なアプローチは、
  ユーザがカバレッジビンを定義できるようにHDL言語のセマンティクスを提供し、このビニング処理を
  容易にするために、いくつかのセマンティクスを追加することである。
  おそらくすぐにSystemVerilogの標準となるだろう、次の例を考えてみる。


  .. code-block:: verilog

    covergroup @(posedge clk);  // when to sample the analog values

    coverpoint a{
    option.range_precision=0.1;
    bins b1[] = {[3.5:3.8]}
    }
    coverpoint b{
    option.range_precision=0.5;
    bins b2[] = {[0:1.5]}
    }
    coverpoint c{
    bins b = {0, [0.5:0.8], 1.0};
    }
    cross a,b; // cross coverage legal, as range specification has been
               // set for both a and b
    endgroup


* ビニングされたアナログ値を伴ったディジタル制御レジスタ値をクロスするクロスカバレージの概念を
  活用する、または2つのビニングされた値そのものをクロスするのにも有用である。


Indirect or 'Computed' Coverage Collection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 関心対象（前例のa、b 、c項と表されるような）のいくつかの値は、カバレッジの観点から
  直接に回路シミュレーションにおける電気的あるいはwrealタイプのノードからアクセスできる。
  AMSの観点から、関心対象のいくつかの値は、シミュレータにおいて代表的な基本レベルのオブジェクトを
  使用した測定機能によって計算される必要があるかもしれない。
  単純な例としては、信号ピークの振幅値や発振周波数を含んでもよい。これに対する優れた
  アプローチは、それ自体がDUTの外、すなわち、テストベンチ内で測定を実行するためのコードを配置することです。

* 動的に構成されたテストにおいて追加の複雑さは導入されている、DUTの特定の階層ノードのパスに存在する
  (測定機能への関心の)初期構成のアナログオブジェクト、異なる構成（おそらく異なる抽象度のいくつか
  のブロックを伴う）、異なるノードが使用されている、または電気的ノードがビヘイビアモデル内の変数に
  置き換えられる。この問題を解決するためのアプローチは、 HDLテストベンチ内の値を複製することです。
  （たとえば、$cds_get_analog_value機能のような値アクセス機能を使用して値にアクセスする）


Timing the Collection of Coverage (Events, Sampling)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ミックスドシグナルシミュレーションにおいて、x軸（時間）は、多くの場合（y軸信号に加えて値自体、）
  連続的とみなすことができるので、信号サンプリングのとき、時間も離散化する必要がある。
  これは、次に、オーバーサンプリングをもたらすことができる精度の損失をもたらすことができる。
  これは、精度/性能のトレードオフにつながる。信号をサンプリングするために使用されるタイミング
  イベントを生成するために使用されるVerilog-AMSのクロスイベントジェネレータのような機能の
  トリガまたはイベントベースのタイミングは有用である。しかしながら、アナログシステムの応答は、
  常に瞬時（または高速イベント）ではないので、トリガイベントに所望のシステム応答が実際に
  起こったか否かを決定する試みは、遅延要素の導入を必要とし得る。システムが最終的サンプリングに
  適したいくつかの静止点に安定させるために、さらなる遅延が必要とされ得る。多くの類似概念は、
  前述したように、アサーションプロパティサンプリングのクロッキングまたはタイミングにも適用されます。
  vunitのクロッキングを示した抜粋を以下に記す。


  .. code-block:: verilog

    vunit my_psl_vunit_all(ADC) {
    // DEFUALT CLOCK FOR ASSERTIONS USES Verilog-AMS cross() function
    default clock = (cross(V(clk), +1));
    ...
    }


Performance Tradeoff
^^^^^^^^^^^^^^^^^^^^^^^^

* 精度/性能のトレードオフの問題を考える際に、考慮すべき2つのアプローチがあります。
  一つは、信号をオーバーサンプリングすることなく、必要な精度やカバレッジを達成するために、
  サンプリングイベントを最小数にすることである（たとえば、Verilog-AMSのクロスファンクション
  で緩いトレランスを用いる）。オーバーサンプリングはシミュレーション速度の低下につながる
  可能性があります。もうひとつは、テストベンチの構成レベルでこのトレードオフを行うことである。
  それはブラックボックスまたはインターフェイスのみのテストに代わりに、できるだけホワイトボックスの
  テストを最小限に抑えることが可能であり、望ましい。これは、システムレベルで特に有用である。
  しかしながら、重要なブロックでホワイトボックステストの実行が、たまに有意義であるかもしれない。
  これは選択的カバレッジのための戦略につながる。


Selective Coverage/Configuration Problem
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 選択的なカバレッジと、アナログモデルの異なる抽象化レベルで、いくつかのオブジェクトが選択された
  構成には存在しないことがある。この場合、選択的なカバレッジ（if/when ステートメントが適切）は、
  必要なときにカバレッジをオン/オフするために導入されるべきである。


Other Types of Coverage for Mixed-Signal
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* カバレッジのさらなるタイプは、多くの場合、検証計画のアナログの側面の完了のために必要とされる。
  例は、十分な数/ばらつきのコーナーモデルが実行されたかどうかをテストするためのプロセスコーナー
  のモデリングです。何人かはこれはカバレッジのタイプだと考え、他の人は全体的なMDVアプローチに
  おけるメトリクスの異なるタイプとして認識する、次のセクションで説明する。


Coverage to Test Plan Mapping
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* メトリクスドリブン検証計画ツールは、図7に示すように、検証計画から計画されたカバレッジに
  マッピングされたテストベンチからのカバレッジ測定を可能にする。

  .. image:: ./img/ch4_fig7.png
    :alt: Figure7: Mapping implemented Coverage to Planned Coverage


Mixed-Signal Metric-Driven Verification
=========================================================

* 2006年にKundert達によって書かれた"Verification of Complex Analog Integrated Circuits"という論文の中で、以下の記述がある。

|

  ::

    アナログ回路、Mixed-Signal回路、およびRF回路において、設計が急速に複雑になっている。
    今日では、RFトランシーバーや電力管理ユニットのような、シンプルなA/RFブロックでさえ、
    数百～数千の制御信号を持っている。これは、様々な規格や電力セーブモード、キャリブ
    レーション方式に対応するために、様々な動作モードをサポートしないといけないためである。
    そのため、性能が未達になって起こる不具合よりも、機能のバグによる不具合の方が増加している。
    Mixed-Signalの機能検証は、厳格でシステマティックな検証手法が要求されるため、非常に
    敷居の高いものである。デジタル設計で起きたように、アナログの検証も、設計作業とは
    別の業務になり始めている。

|

* それから5年が経っているが、アナログ検証の課題は益々増加している。このセクションでは、UVMをMixed-Signal用に拡張したUVM-MS手法について説明する。UVMはカバレッジ指向のランダムパタン生成機能を使用したメトリックドリブンの方法論である。さらに様々な検証言語で用いることができるライブラリである。UVMは、生産性向上のために、モジュールからチップや、プロジェクト間での再利用を促進している。UVM-MSは、アナログブロックに対しての検証プランやアナログ信号の生成、アナログプロパティに対してのチェック機能やアサーション、アナログの機能カバレッジの収集、を行うために拡張されたものである。UVM-MSは、RNMで構成された高レベルな抽象モデルをターゲットにしている。さらに、検証プランに即して、自動的に実行され、結果を管理するバッチ実行環境や回帰テスト実行環境を持っている。

|

* 図8にIPレベル、SoCレベルの両方にまたがる検証イメージを示す。IPレベルで検証プランとアナログ回路のモデルが作成され、テスト環境に置かれる。UVM-MSは、AMSモデルやSPICEネットリストに対しても適用することができるが、最も良い検証環境を実現するために、アナログ回路はRNMで構築されるべきであるが、AMSモデルやSPICEネットにも適用することはできる。

  .. figure:: ./img/ch4_fig8.png
    :alt: Figure 8: Applying UVM-MS at the IP and SoC Level

|

* メソドロジと設計ツールの進化により、アナログ設計者の業務の中にUVM-MSのコンセプト(自動的なチェック機能とカバレッジ収集機能)を持ち込むことができるつつある。アナログ設計者の助けを借りることで、IPの検証エンジニアでも、検証プランを構築することが可能である。まず、検証プランには、検証が必要な回路特性が記述される。すなわち、機能の確からしさを検証するためのテストシナリオや、カバレッジの規準である。検証環境は、ネットリストや抽象化されたAMSモデル、実数モデルなど、様々な抽象度のモデルに適用できるものでなければならない。すなわち、もし抽象的なモデルが用いる場合、同時にネットリストレベルとの透過性を維持するためのバッチの仕掛けも用意する必要がある。IPレベルで作成されたメトリックドリブンの検証環境は、従来のアナログ設計フローを置き換えるものではなく、アドオンされることになる。この新たな検証手法には、品質の向上とリスクの洗い出しを求められている。特に以下のものである。

  + 全てのデジタルの組み合わせのもとでの機能と性能の検証や、膨大な組み合わせがある場合の、統計的な意味付け(カバレッジ？)

  + キャリブレーションのような動的な制御シナリオの検証(デジタル制御によるフィードバックループが発生)。

  + アナログ機能には直接影響しない電源モードやテストモードのステート遷移の検証。ここでも、全ての組み合わせの検証を行うために、ランダム検証が用いられる。

|

* 上記の検証を行うためには、膨大な数の検証が必要であり、そのためメトリックドリブンのアプローチが必要となる。決定論的な検証手法では、これらの課題を効率的に解決することはできない。IPレベルでの検証フローを図9に示す。

|

  .. figure:: ./img/ch4_fig9.png
    :alt: Figure 9: Verification Flow at the IP Level

|

* チップ(SoC)レベルでは、UMV-MSテストプランは、SoCの検証プランの一つの章として統合される。IPレベルで検証された抽象モデルがチップレベルでの検証環境に用いられ、実用的なシミュレーション時間で意義のある検証が行われる。

|

* IPレベルの検証環境で用いられたコンポーネントは、その大部分がチップレベルでの検証環境に再利用され、確かさを保証するものとなる。

|

* チップレベル検証環境での結果は、性能面やアナログの機能・デジタル/アナログの相関をクリアにするために、重要なものである。アナログIP設計者とチップ設計者の間に知識のギャップがあったとしても、IPレベルの検証で得られた知見により、チップレベルでの検証が可能となる。

|

* UVM-MSのメソドロジは、当初、Verilog/e/PSLを使用して開発されたものである。そのため、大抵の例題は、この言語で記述されている。VHDL-AMSやSystemVerilog, SVAや他の言語への統合も行われているが、現状、UVM次第である。


Planning for Analog Verification
-----------------------------------

* メトリックドリブン検証は、検証プランに基づくものである。検証プランには、それぞれの検証項目について、何をチェックするかと、どうやってカバレッジを測定するか、がリストされたものである。典型的なものとして、実行される特性と、その重要性が記述されたテストシナリオで構成されている。

|

* 検証プランの作成には、専用のプランニングツールを用いるのが最もよい。このようなツールを用いることで、スペックや検証項目番号、テストベンチ内のコードの関係を保つことができる。また、ツールを活用することで、部分的なスペックの実現や、要求仕様の変更の追跡、コードのリビジョンの関係も保つことができる。

Including Analog Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* アナログの特性の検証には、あるノードでの電圧値や電流値などの連続値の測定が必要となる。そのために、連続(実数)値はサンプリングされるが、カバレッジの検証には、それだけでは不十分で、バイナリ値に量子化される必要がある。アナログ回路を考慮する場合、検証プランには、関心のある特性を全て含んでいなければならない。つまり、機能検証や過渡解析では直接測定できないような特性も含めなければならない。

|

* また、アナログの機能とデジタル制御の間の関係を検証する場合にも、特別な扱いが必要となる。この検証のためには、設定とキャリブレーションのための制御レジスタや複数の動作モード、電源切り替えモードなどを含める必要がある。パラメータのカバレッジ収集や、遅延時間のチェックが仕様を満たしていることが確認できれあ、機能的にも正しいことが保証できる。

Plan Structure for Reuse
^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 検証プランは、IPレベルでもチップレベルでも検証を成功に導くために使用される。そのため、検証プランはできるだけ完全であることが要求されるだけでなく、スペック・要求項目・実装が変更された時には、直ちに更新されなければいけない。このようなことを容易にするために、検証プランは構造化され、仕様書との対応付けが自然なものである必要がある。また、検証プランは十分に詳細でなければならない。すなわち、それぞれの検証項目(チェック項目、カバレッジ、シナリオ)は、直接テスト環境のコードにリンクされていなければならない。よく構造化された検証プランは、どのカバレッジポイントやチェッカ・シナリオを除外することができるか、全体のカバエッジにおける割合を算出するときに、非常に役立つ。


Constructing a UVM-MS Verification Environment
--------------------------------------------------

* 図10に示す通り、UMV-MSの環境では、検証プラン内の全てのモード・条件・シナリオを実行できるように回路をドライブしたり、指定した回路特性をチェックしたり、必要なカバレッジを測定できるようになっていなければならない。

|

* UVM-MSは、アナログの検証に必要な共通のタスクを持った再利用可能な以下の検証ブロックにより構成される。

  * 信号生成とモニタ機能。 'dms_wire' UVCは、プラグラマブルな信号ジェネレータとモニタである。このコンポーネントは、制御された通りに信号を生成したり、アナログ信号を測定する機能を持っている。

  * アナログ設定用インタフェース。 'dms_reg' UVCは、制御クロックやレジスタセットのインタフェースを定義しているマクロである。また、それ以外にも、シーケンスのインタフェースや、自動的なカバレッジ測定機能や結果収集機能、信号の通知機能を有している。

  * しきい値クロスポイントモニタ。 'dms_threshold'は、非常に短い遷移時間の信号(スパイクやグリッチなど)を取り除くことができるプログラマブルな検出器である。

  .. figure:: ./img/ch4_fig10.png
    :alt: Figure 10: Architecture of a UVM-MS Environment


Collecting Coverage
-------------------------

* カバレッジを収集するためには、ある時間において、特定のポイントのデータをキャプチャしなければならない。アナログカバレッジでは、何のデータを集めるか、連続的な実数値データをどのようにして、2値に落とし込むか、また、いつサンプリングを行うか、を考慮する必要がある。


Direct and Computed Coverage Collection
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 取得されるデータは、回路のノードにおける電圧、もしくは電流の値である。他にも、サンプリング前にテストベンチにより自動計算される値もある。高抽象度のテストベンチによるノードのダイレクト測定は、最も実装が容易である。サンプリングされた信号は、高周波信号のようにダイナミックなものか、リファレンス電圧のように変化の遅いものに分類される。変化の遅い信号は、単純なトリガ信号によって、サンプリングされる。それとは対照的に、ダイナミックに変動する信号をサンプリングした場合、サンプリング時間に応じて、幅広いスペクトラムが発生してしまう。このように、トリガするタイミングに依って、アナログの入力信号や制御信号、またデータパスの応答性や安定性に変動を引き起こすことがあるため、注意が必要となる。あるケースでは、制御信号に沿った明確なトリガでサンプリングするのではなく、固定の時間でアナログデータパスをサンプリングした方が良い場合もある。以下では、ダイナミックに変化する信号からカバレッジを収集する方法について、e言語を用いた場合の例を示す。


.. literalinclude :: ./txt/tb_env.e
  :linenos:

* 急速に変化する信号に対して、カバレッジを取得する場合、検証したい特性に対して、間接的に測定を行う必要がある。このような信号に対して、dms_wire UVCは、信号のモニタリングを行い、ゲインや周波数、位相、DCバイアスを計算することができる。


Diciding on Coverage Ranges
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* シミュレーションモデルは、解析するソルバによって、連続的なモデルだったり、イベント・ドリブンなモデルが使われるが、サンプリングされたデータは、量子化されたものになる。カバレッジ結果は、coverステートメント内で定義されたカバレッジの範囲内に収められる。そのため、アナログのカバレッジを考える際には、カバレッジ範囲のことを考慮する必要がある。スペック内で明示的に示されたカバレッジ範囲は、測定時に考慮していなければならない。さらに、カバレッジ範囲について、よく考慮されたカバレッジアイテムを定義することで、クロスカバレッジを考慮することもできる。

Trading Off Speed and Visibility
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* カバレッジは、検証の道筋をつけるために、非常に強力なツールである。ブロックレベルでは、詳細なカバレッジをリーズナブルに取得することができるが、SoCレベルではカバレッジの収集には、非常に大きな時間がかかってしまう可能性がある。そのため、カバレッジの計画を立てて、それを実装する場合には、シミュレーションのスピードとカバレッジ粒度を常に考慮する必要がある。


Generating Inputs
-------------------------

* アナログIPは、デジタルとアナログの両方を入力として持っている。さらに、膨大なレジスタ設定や、他の設定項目もある。そのため、信号生成のアプローチは、UVMに似たものになる。

Dealing with Configurations and Settings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* テスト環境は、少し異なったシミュレーションを行う際に、ハードワイヤードロジックだろうが、再コンパイルが必要であろうが、様々なレジスタ設定や他の設定を動的に制御できる必要がある。動的な設定変更のためには、コンフィグレーションオブジェクトが用いられる。制約は、範囲を限定したり、あるテストファイルの中から、特定の設定を選択したりするのに使用される。コンフィグレーションオブジェクトは、スタートアップ時に一度だけ生成され、DUTとHDLテスト環境の制御信号を生成するために、コンフィグレーションメソッドがコールされる。

Generating and Driving Digital Control
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* デジタルの制御信号は、UVMによって生成され、ドライブされる。どのインターフェースでもBFM(Bus Functional Model)を持ち、インターフェースに特化したトランザクションを受け取り、デジタル信号を駆動するのに使うことができる。シーケンスドライバによって、トランザクションはBFMにドライブされる。また、シーケンスドライバはシーケンスによってドライブされる。どのインターフェースもシーケンスのための共通のビルディングブロックが含まれるシーケンスライブラリを持っている。

* どのシーケンスレベルにおいても、制約はできるだけ広いもの(制限がないもの)であるべきである。これにより、テストベンチが意図せずにある組み合わせのデータシーケンスだけを避ける、ということがなくなる。そのため、シーケンスはより再利用しやすくなる。

Generating and Driving High Frequency Analog Signals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 高周波のアナログ信号を直接生成することはできない。むしろ、アナログの信号生成は、順々に生成されるデジタル信号によってコントロールされる。'dms_wire' UVCは、シンプルなsin波の波形ジェネレータである(実際には、それだけでなくプロパティを設定することにより、任意の周期波形を作ることができる。この波形生成器は、信号周波数・位相・振幅・DCバイアスによって制御され、さらに、必要に応じて、時間離散の実数値の波形を作ることもできるし、連続値の電気信号を作ることもできる。以下に、2つの波形を定義しているシーケンスの例と、結果の測定定義ファイルのe言語での例を示す。

.. literalinclude :: ./txt/dms_tb_sequence.e
  :linenos:

Top Level Multi-Channel Sequence
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 複数のインタフェース間での相互関係とタイミングを維持するために、単一点での制御が必要となる。UVMは、この機能はtop-level sequence(マルチチャネルシーケンスや仮想シーケンスと呼ばれる)、として、サポートされている。典型的なシーケンスは、それぞれのシーケンスアイテムを送受信できいる単一のシーケンスドライバである。トップレベルシーケンスは、各インターフェースに適したシーケンスアイテムを生成し、送信することができる。そのため、トップレベルシーケンスを使用することで、全てのインタフェースを横断的にまとめ上げることができる。UVM-MSも同じ構造である。設計におけるアナログ的な現象は、例えばアナログ信号の制御のように、使用されているシーケンスの中にしか現れない。


Checking Analog Functionality
-------------------------------

* アナログ設計におけるUVM-MSを使用した機能検証は、今のやり方とは大きく異なるものである。未だにアナログ回路の正しさを検証するために、波形をチェックする手法は一般的なものであるが、メトリックドリブンの検証手法を使用するためには、自動的なチェック機能が不可欠である。自動チェッキングの導入の目的は、これまでの波形観察による方法を置き換えるものではなく、バッチ実行において、効率よくエラーを検出するためである。検証プランを作成するフェーズで、どの機能や特性をチェックするかを決定する。

Comparing Two Values
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 例えば、入力と出力の増幅度の関係など、特性の検証には、2つの信号の関係がよく用いられる。アンプの例だと入出力の振幅が特性比較に用いられるように、何らかの波形の特性を用いて、特性の検証が行われる。また、2つの波形の間には、位相のシフトやDCバイアスが含まれているかもしれない。

* それぞれの信号特性は、dms_wireモニタを使用して、それぞれ独立に測定される。そして、チェッカはその結果を期待値と比較を行う。

* アナログ回路におけるタイミングのチェックは、図11のように、双方の信号にとって測定開始点となるトリガイベントが必要となる。もし、入力と出力の間に期待される遅延があるとすると、測定もそれに応じて遅らせる必要がある。測定は期間中ずっと行われ、測定の最後に、それぞのモニタからメソッドポートをに出力される。最後のチェッカコードは、測定工程が終わった時にトリガされる。

  .. figure:: ./img/ch4_fig11.png
    :alt: Figure11: Timing Analog Checks

Triggering a Check on Control Changes
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* あるテストに対して、注意深くタイミングを検証することは、機能テストにとって十分なものかもしれない。しかし、自動的にトリガ信号をチェックする機構があった方がより良いであろう。状態をチェックするテストが、自動的にアクティベーションされると、機能テストをターゲットとしていない場合でも、連続的に状態をモニタリングすることができる。特にこの機能は、入力のタイミングを管理しきれないような巨大なシステムで、チェッカをシステムに統合する場合に、非常に重要な手法である。

* チェックするタイミングを決めるために、どの制御信号がチェックすべき状態に影響を及ぼすか、わかっている必要がある。これらの設定はレジスタ設定によりおこなれるか、外部からの制御で行われる。これらの制御信号がいつ変化してたとしても、チェッカは起動されないといけない。

Measuring Signal Timing
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 信号がある形状になるべきだ、というシチュエーションがあったとしよう。例えば、電源起動後に、あるタイミングウィンドウ内で電圧がターゲットとなる電圧領域内にないといけない、という場合である。このようなケースでは、指定したタイミングウィンドウ内で切り出した信号に対して、チェッカを実装する。通常のタイミングチェッカは、初期のイベントにより駆動される。測定のための遅延を作り出すために、信号はある時間の領域だけ測定され、比較が行われる。このような測定値を比較するために、許容誤差が使用される。この例を図12に示す。

  .. figure:: ./img/ch4_fig12.png
    :alt: Figure12: Checking for Signal Timing. The Checking Window is Bounded by Minimal and Maximal Time and Voltage

Comparing a Value to a Threshold
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 信号がある領域内に収まっているかどうかをチェックするケースは、非常に多い。これは、dms_thresholdモニタブロックを使用することで、信号とあるしきい値との交差チェックを簡単に行うことができる。

Checking Frequency Response
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* ある特性は、過渡解析を実行するだけでは得られないことがある。典型的な例としては、回路の周波数応答を求めるような場合である。必ずしも正確ではないが、過渡解析でも回路の入力信号の周波数ををスイープさせてやることで、簡易的に周波数応答を測定することができる。

Creating a Predictor
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 比較対象となるゴールデンリファレンスを作成するために、複雑なチェックが必要となることがある。アナログの機能検証の例では、リファレンスには、数式やテーブルを使うケースがある。デジタル制御信号がアナログの挙動に影響をおよぼす場合、ある条件下での機能の振る舞いを予測するために、ルックアップテーブルが用いられる。


Using Assertions
-------------------------------

* アサーションは、チェックを補うためのものである。アサーションは、IPに組み込まれるか、関連付けされ、ローカルチェックに使われることが多い。アサーションは、シームレスにカバレッジに統合され、テストベンチからレポートさせることができる。アサーションは、入力条件のチェックと局所不変量のチェックによく使用される。以前、いくつかのPSL/SVAのアサーションの例を出したが、UVM-MSのメソドロジでも以下のチェックを行うために、アサーションを作成するのがよい。

  * 入力条件

  * 局所普遍性


Clock, Reset and Power Controls
----------------------------------

* アナログIPのブロックにも、テストベンチから生成されるクロック信号やリセット信号を必要とする、デジタルの制御回路が含まれる。デザインが完全なアナログだとしても、テストベンチはクロック信号とリセット信号を必要とするかもしれない。IPレベルでのテストベンチで、クロックやリセットのインタフェースを持たせておくと、SoCの環境に統合する際に容易になる。

Driving Clocks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* テスト環境は、実際にSoCへのインテグレーションが行われた後にモデル化されるべきである(?)。もし、SoCが複数のクロックやリセット信号を供給しており、それらを考慮しないといけないのであれば、最も良いのは、全てを再現させることである。例えば、クロックゲーティングが行われているチップであれば、テストベンチでもIPレベルで同じ状況を再現できるようにしておかなければいけない。さらに、アナログ信号をサンプリングするようなクロックがテストベンチ中にある場合、そのクロックは独立してドライブできるようにしなければいけない。

Resets
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* リセット信号は、デザインを初期化するのに使用される。また、テストベンチ中のレジスタを初期化するためにも使用される。それ以外にも、リセット信号は、回路が初期化される際に、テストベンチが生成するエラーを止める役割もある。

Power-up and Power-down Sequences
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* IPレベルにおいても、異なった電源ドメインから供給される複数の電圧系統を持つことは、もはや普通になりつつある。電源をオンにした場合に、決まった順番と時間で回路が起動していく必要がある。これはパワーアップシーケンスと呼ばれる。同様に、電源をオフする場合や、スリープモードに入る場合にも、決まった順序がある。これらのシーケンスのために、テストベンチでは、以下の3つのことを考慮しなければいけない。

  * テストベンチは、必要なシーケンスをドライブできなければいけない。

  * テストベンチは、供給したシーケンスをチェックできなければいけない。

  * テストベンチは、ある特定のシーケンスのカバレッジを収集できなければいけない。

* 全体的にささいなものではないパワーシーケンスは、UVMのコンポーネントであるBFM(シーケンスドライバとシーケンスアイテムのライブラリ)を用いて、ドライブされるべきである。パワーシーケンスチェッカによって定義されたイベント情報を改修することで、パワーアップシーケンスのカバレッジをモニタリングすることができる。

  .. figure:: ./img/ch4_fig13.png
    :alt: Figure11: A Simple Power-up Spec


Analog Model Creation and Validation
--------------------------------------------------

* アナログモデルは、よくSPICEでパラメトリック解析したネットリストから作られることが多い。このモデルは、非常に精度が高いが、シミュレーション速度は遅い。機能シミュレーションでは、カバレッジを取得するために、大量のシミュレーションを流さないといけないので、このシミュレーション速度の問題は大きな欠点である。Verilog-AMSのようなアナログビヘイビアモデルを使用することで、精度の劣化を最小限にしつつ、シミュレーション速度を向上させることができる。それでも、アナログの解析量が多い場合は、アナログソルバの計算量のために、シミュレーション速度が落ちる。もっといい方法は、Verilogのreal/wrealデータタイプを用いた実数モデルを採用することである。RNMは、非常に抽象度が高いが、一方で電気的な現象も記述することができる。しかも、RNMはイベントドリブンのシミュレータで実行されるため、アナログソルバ上でモデルを動作させるよりも、数10倍高速に動かすことができる。RNMの欠点としては、TrレベルやAMSモデルと比べると精度が劣化することと、機能シミュレーション(過渡解析)にしか使用できないことである。

* UVM-MSを使用するためには、RNMを使うのが最もよい。機能検証段階では、モデルの精度はそれほど重要ではなく、それよりもスピードの利点の方が大きいからである。RNMを作成するには、それなりの工数が必要となる。しかし、このモデルはIPレベルでの検証や、複数のSoCレベルでの検証に使うことができる(その場合には、スピードが非常に重要)ため、開発費は回収しやすい。さらに、これらの機能モデルは、わずかの変更で再利用することができる。

Model Validation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 複数の異なる抽象度のモデルを作る場合、モデルの一致性確保が重要な問題である。一致性を検証するためには、抽象度の高い機能モデルと、抽象度の低い実装モデルの一致性を検証しなければならない。同一のレベルの抽象モデルを比較するわけではないため、一致性を検証するためのクライテリアを定義しておく必要がある。以下は、一般的によく一致性検証に使用されるクライテリアである。

  * 選択した波形を比較する。その際に、モデルに応じて、適切な許容誤差(時間軸と値軸)を設定して、ある程度の違いは誤差の範囲に含めてしまう。

  * シミュレーション実行中、もしくは、終わった後に、評価式によって検証する。

  * 同じテストベンチとスティミュラスを用いて、両モデルを検証する。

  * インターフェースポートの名前、タイプ、方向の一致性を検証する。

* 設計と検証の期間中、モデルは変化し続けるため、常に回帰テストによってモデルを検証できることが重要である。


Integrating the Test Environment
--------------------------------------------------

* テスト統合環境は、デザインを含んだテストベンチ、実行スクリプトからなる。統合環境は、以下のことが可能でなければならない。

  * バッチ、もしくはインタラクティブモードで簡単にシミュレーションが実行できること。

  * テストシナリオを簡単に切り替えられること。

  * モデルを簡単に切り替えられること(Wrealモデルから、AMS、SPICEネットリストに切り替えられること)。

  * 検証管理ツールとの統合。

  * SoCレベルや今後のプロジェクトへの再利用性。


Connecting the Testbench
--------------------------------------------------

* UMVでは、全てのポートで、シグナルマップを用いて、テストベンチとデザインを接続する。シグナルマップは、全ての外部インタフェースを含んだテストベンチの単位である。単一のユニットで全ての接続を行う利点は、再利用性である。すなわちデザインが変わった時でも、いくつかのコネクションを変えるだけでよい。テストベンチを電気的なノードに接続するためのeコード例を以下に示す。

.. literalinclude :: ./txt/tb_smp_u.e
  :linenos:

* 全てのインターフェスにシグナルマップを使用することで、変化を一つのユニットに局所化させることができる。複数のシグナルマップを管理するだけで、簡単に設定を行ったり来たりできる。以下は、接続のためのルールである。

  * 電気的なノードへの接続: 実数タイプのポートは、電気的なノードに接続することができる。HDLパスが与えられると、ノードの場所を特定することができる。アナログのアトリビュートにより、アナログ量の読み書きが特定される。

  * 実数ノードへの接続: 実数タイプのポートに接続できる。HDLのパスが与えられると、ノードの場所を特定することができる。ノードがwireであれば、wire属性が設定される。

  * 単ビット(logic)ノードへの接続: テストベンチは、bitタイプのポートに接続できる。ノードがwireの場合、wire属性が使用される。これは、デジタル回路におけるノードの扱いと同じである。

  * 式への接続: ポートは、アナログドメインでノードではなく、式にも接続される。式は、アナログドメインの量と式を用いて、実装される(そのため、ドメイン特有のシンタックスが必要となる)。接続されたポートは、実数ポートだったり、ビット(Boolean)だったり、イベントのポートだったりする。どのタイプでも、表現式を返すことができる。以下の例は、Verilog-AMSの式に接続したe言語の例である。

.. literalinclude :: ./txt/tb_smp_u_2.e
  :linenos:


System-Level Parameters and Timing
--------------------------------------------------

* 通常、テストベンチとデザインは、違う人間によって作られる。そのため、電源電圧やクロック周波数、モデルパラメータなどで、異なった値を使用しているかもしれない。統合環境の重要な役割は、コントロールの中心的な役割となるトップレベルの一貫したパラメータセットを作ることである。ほとんどのパラメータがSPICEモデルやAMSモデルのシミュレーションのための制御ファイルに記述することができる。また、その他のパラメータはテストベンチに記述される。テストベンチから、スタートアップ時にファイルから読み込み、シミュレーションのコントロールパラメータにアクセスすることも必要である。このようにパラメータの設定は、可観測的かつ可制御的でなければならない。

* モデルが時間連続的なモデルであったとしても、抽象度の高いテストベンチでは、常に離散的なイベントドリブンの方式により実行される。つまり、アナログ信号はサンプリングされ、離散的なタイムステップの入力が作られる。テストベンチ内の最も高速なクロック信号とローカルクロックから、タイミングの同期化が行われる。サンプリング周波数は、指定したテストに合うように、シミュレーションの開始時にセットされる。

  .. figure:: ./img/ch4_fig14.png
    :alt: Figure14: Supporting Seveal Model Sytles in a Single Testbench

* アナログのテストベンチでは、SPICEモデルとAMSモデル、実数モデルを切り替えられないといけない。これは、同じシミュレーション条件を使って、あるモデルと他のモデルを検証するために使用される。

Switching Models Using Define Macros
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* モデルを切り替えるために、グローバルなdefineマクロが使用される。実行スクリプト内でdefineマクロを設定することで、モデルを切り替えることができる。ハードウェア検証言語(HVL)のテストベンチないで、defineマクロを設定することも可能であるが、e言語使用時には動的サブタイプ(when inheritanceと呼ばれる)を使用した方がよい。動的サブタイプを使用することで、コンパイラは全体のコードを検証し、defineマクロ使用時に隠れてしまう可能性のあるエラーをあぶり出すことができる。マクロは、トップレベルで環境のサブタイプを設定するために、一度だけ使用される。

Interfacing Between Real and Electrical Signals
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* テストベンチでは、信号を表現するのに、実数やBoolean値のような離散値が用いられる。デザインがSPICEやAMSでモデリングされている場合は、端子は連続系で、ロジックもしくは電気的なディシプリンを持つ。エラボレーションプロセスで、ネットワークのディシプリンを決めるために、レゾリューション関数が適用され、もし、連続系と離散系のネットが直接接続されているならば、その間にコネクトモジュールが挿入される。自動的に挿入されるコネクトモジュールには、チューニングをする必要があるかもしれない。デフォルトでは、コネクトモジュールは、電源電圧の情報に基づいて、ロジック1とロジック0のしきい値を決める。同様に、電気的特性への変換にも電源電圧の情報が使用される。


Creating Run Scripts and Other Support Files
--------------------------------------------------

* シミュレーションを起動するために、Runスクリプトを作成すべきである。異なったモデルでシミュレーションを行ったり、デバッグモードやバッチモードなどを実行するために、それぞれRunスクリプトを作るべきである。これらのスクリプトは全て単純なシェルスクリプトで実現できるため、共通のインタフェースを作成するか、コマンドラインオプションにより、簡単に組込めるようにしておけばよい。

Recommended Directory Structure
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* どのプロジェクトでも同じコンセンサスが得られるように、ディレクトリ構造は標準なものを使用すべきである。おすすめのディレクトリ構造は、デザインとテストベンチ、および、テストプランとドキュメンテーションを分ける構造である。このような標準的な手法(モジュラリティ)を使用することで、再利用や統合を促すことができる。下記の構造は、標準的なプロジェクトでのディレクトリ構造である。

  .. figure:: ./img/ch4_dir.png


Closing the Loop between Regression and Plan
--------------------------------------------------

* 前に述べた"Planning for Analog Verification"の節で、DUTのアナログ特性を測定するために、専用のプランニングツールを用いて、実行可能な検証プランを作るべきだと述べた。最初に、抽象化されたプランが作成され、その後、測定すべき項目は全て適切なサブセクションにカテゴライズされる。カバレッジ収集計画に基づいて、適切なサブセクションが作られる。同様に、チェック項目とシナリオがプランに付け加えられる。これに基づいて、検証環境の詳細な実装が行われる。実装のフェーズでは、主に、covergroupがテストベンチ内で作られる。そして、カバレッジは補足され、特定のプランと関連付けられる。すなわち、回収されたカバレッジとサブセクションプラン内で計画されたカバレッジとの間には、暗黙的な関係がある。しかしながら、直接的な繋がりはない。そのため、レグレッションテスト時に得られた生のカバレッジデータと計画時のカバレッジを手作業で紐付けることで、検証のループを閉じさせることができる。

* 図15に示すように、レグレッションテストを実行すると、生のカバレッジデータが取得され、解析することが可能になる。しかし、この大量の紐付けされていないカバレッジデータは、解析するにも、意味のあるように使用するのも困難である。そのため、プランにこの生のカバレッジデータを重ねるのである。これにより、カバレッジデータは、意味のある解析がなされて、関連付けされるのである。

  .. figure:: ./img/ch4_fig15.png
    :alt: Figure15: Regression Setup using a Regression/Verificaition Management Tool

* 図15は、典型的なレグレッション/ベリフィケーションマネージメントツールの流れを示したものである。Session Runnerがそれぞれの実行スクリプトを使用して、多数の条件のシミュレーションを実行する。それぞれのシミュレーションは、セッション制御ファイルによって指定されたパラメータセットと共に、自動的に実行される。例えば、アナログIPに対して、入力周波数の範囲をスイープさせて実行することができる。

* シミューレーションセッションの最後に、全ての結果が解析され、カバレッジデータが集計される。収集されたカバレッジデータは、検証プランにマッピングされ、レグレッションマネージメントツールにロードされる。レグレッションテストが完全に行われた場合、検証計画時に作られた検証プランにロードされ、オジリナルの検証プランに基づいてカバレッジが解析される。図16に、アナログカバレッジを収集した例を示す(これは、"Mixed-Signal Verification Planの節で取り上げた可変ゲインアンプ(VGA)の例である)。

  .. figure:: ./img/ch4_fig16.png
    :alt: Figure16: Analog Coverage in a Verification Plan


Updating the SoC-level Test Plan
--------------------------------------------------

* IPのテストプランは、SoCレベルでチャプターとして組み込まれ、一つのIPとしてインスタンス化される(複数でもよい)。そのため、カバレッジは、インスタンス毎に収集される(タイプベースカバレッジとは対照的である)。


Moving Up to the SoC Level
--------------------------------------------------

* IPレベルで検証を行うことで、IP単体の品質を評価することができるため、インテグレーション時のリスクを下げることができる。また、同時にIPレベルで構築した検証環境は、SoCレベルでのテスト環境構築のコストを時間的にも費用的にも下げることができる。テスト環境構築においては、SoCレベルで発生する問題の多くは、IPレベルと同じだからである。


Mix-and-Match SoC-level Simulation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 最も再利用の価値があるのは、IPのモデルである。IP検証時に抽象化モデル(AMS、RNM)を開発しておくと、SoCレベルのシミュレーションで大幅に高速化が実現できる。

* IPのSPICEネットリストをSoCのシミュレーションに組み込むことは、たいていのケースで非実現的である。たとえ、SPCIEネットリストを用いたシミュレーションが可能だったとしても、回路のある一面しか検証できない。そのため、大部分の実行は、抽象化モデルで行われるべきである。この本で紹介しているモデル開発のメソドロジに従うことで、システムレベルのシミュレーション段階で、十分に精度がよく、よく検証されたモデルを作ることができる。

Interface Consistency for SoC-level Model Switching
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* SoCには、複数のアナログやMixed-SignalのIPが搭載される。検証のゴールは、これらのブロックに、SPICEレベルの非常に詳細なモデルと、抽象的なモデルを用意することである。そのため、モデルは、I/Fで一致していなければならない。つまり、ソケットなどを使用して、統合時にI/Fを合わせるのでは不十分である。

* モデルの切り替えをシームレスに行うために、全てのバージョンで、IPは同じI/Fを持たなければならない。そのため、あるIPの全てのモデルで、ポートの名前やサイズなどを一致させておく。しかし、チップに存在しないようなポートを"Virtual"ポートとするのは、好ましくない。

* IPレベルのテストベンチは、全てのモデルのI/Fに適合するソケットである。このようにIPモデルをテストベンチのレベルで切り替えられるようにすることで、異なる2つのIPモデルの出力を比較できるようになるため、モデルの検証が可能になる。プランの統合には、機械的なものを超えたレベルでの統合が必要となる。SoCレベルでは、幅広い検証と検証コストが高いため、IPの同じテストを繰り返すことは、おそらくできない。その代わりに、オリジナル検証プランの検証は、注意深く実施されなければならない。チップインテグレーションによって影響を受けそうなコアの機能とアイテムにだけ、実行フラグを付与し、その他のアイテムは無効化しておく。

* チップレベルでのレグレッションテストの後、検証エンジニアは、カバレッジ・チェック項目・シナリオをチップレベルの検証プランにマッピングし、チェックを行う。

  .. figure:: ./img/ch4_fig17.png
    :alt: Figure17: Verification at the SoC Level Reusing IP Verificaiton Elements

Integrating into SoC-level Testbench
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 検証コンポーネントをIPレベルからSoCレベルまで再利用することで、見通しが良くなる。このような組み込み用コンポーネントは、既に高精度にキャラクタライズされているものであるため、IPの開発に幅広く使用することができる。

.. * The benefit of reusing verification components from IP to the SoC-level environment is often overlooked. Embedded in such component is the most accurate characterization of behavior available, one that was extensively used while developing the IP.

Adding Coverage and Checking
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* カバレッジ、及び、チェッカは、観察対象に影響をおよぼすものではないので、簡単に組み込むことができる。特に、UVMのアーキテクチャは、コンポーネントがモジュール化されており、更に独立しているため、容易に組み込めるように設計されている。ただし、シミュレーション性能に対しての影響は考慮する必要がある。特に、SoCの検証では、性能は非常に重要であるため、よく考慮する必要がある。モニタによるカバレッジとチェック項目の回収を検証プランで調査しておくことは、統合の際に非常に重要なことである。

.. * Coverage and checking monitors are easier to integrate, as they are non-intrusive observers. The UVM architecture ensures that integration is simple, because these components are modular and independent. Consider the impact of the monitor on simulation performance, keeping in mind that the SoC environment is much more performance hungry. Consult the verification plan to ensure the coverage and checking collected by the monitor is considered important for the integration.

The Advantage of Assertions
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* アサーションはテストベンチの一部と考えら得ているが、本来はデザインに属すべきものである。たいていの場合、アサーションはほとんど影響のないものであり、必要に応じて、オフすることができる。しかし、アサーションはデフォルトではONにすべきである。少なくとも、統合の初期段階では、必ずONにしておくべきである。

.. * Assertions are considered a part of the testbench, but they are intended to follow the design. Assertions are mostly low impact and can be turned off as needed. It is highly recommended that asssertions are turned on by default, at least during early stages of integration.

* ほとんどのアサーションは、初期条件や入力条件を確認するものである。このようなアサーションは、常にアクティブにしておくべきである。

.. * Many assertions monitor initial conditions and input assumptions. Such assertions should always remain active.

Analog Input Sources
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 物理層が配線で接続されたり、無線で接続されるようなIPのインタフェースは、そのままSoCレベルのインタフェースになる。このようなIPの場合、IPレベルのモデルを再利用するか、SoCレベルで新しいモデルを作るかは、求められる機能性による。IPレベルの信号ソースを改良することで、再利用を促すことになるかもしれない。これが、SoCの環境に引き上げるための最初のステップである。さらに、他のソースからも駆動されることになる。IPレベルのテストベンチでは、制約付きランダム検証のアプローチを使用するため、特定の統合ターゲットのニーズに合わせることは、比較的容易である。

.. * Some IP interfaces may become SoC-level interfaces, such as the physical access layer to a wired or wireless medium. The consideration of whether to re-use the IP-lelve model or create a new one at the SoC level depends on the expected functionality. It may make sense to reuse, and possibly enhance the IP-level signal source. This could be the first step for bringing up the SoC environment, then later it can be enhanced or augmented by other sources. Because the IP-level testbench uses a constrained random approach to generate signal properties, it is relatively easy to tune this to the needs of the specific integration target.


Verifying Low-Power Intent in Mixed-Signal Design
==================================================

Introduction to Low Power
--------------------------------------------------

* 今日のSoCは、ほとんどが複雑なMixed-Signalシステムをmとている。このようなシステムの検証には、十分に検証プランを練ることが必要であり、また、これまでのようにデジタルとアナログのサブブロックを完全に分けて検証するだけでは不十分であり、デジタルとアナログ間の機能の相関関係を考慮にいれないといけない。これまでの検証プランニング技術では、詳細な検証プランを作成し、SoCのデジタル部だけのスペックゴールを作るのが一般的であった。一方、アナログ部は、離散化された簡単なモデルを作成し、それをデジタルの全体検証のプランの中に組み込んで、チップ全体のアナログの挙動を簡単に見るぐらいであった。しかしながら、今日の複雑なシステムでは、重要な部分の機能を犠牲にしないで、このレベルの検証を行うことはほぼ不可能となっている。今日では、デジタルとアナログの間には、複数のフィードバックを持つのは当たり前であり、そのため、お互いに複雑な関係となってしまっている。このようなシステムを正確に検証するために、デジタルとアナログをシステムの一部と捉え、一緒くたにして検証プランの構築と実行を行うことが必要不可欠である。このアプローチの中心的な考えは、これまでの伝統的な検証メソドロジに精度劣化のないアナログやMixed-Signalの部品を組み込むことである。

* 低消費電力は、今日のSoCの、極めて重要な(最重要ではないかもしれないが)検証項目の一つである。チップの電力を解析するためには、デジタル部に加えて、アナログとデジタルの相互作用も考慮しなければならず、そのためには、アナログの機能もシステムに取り込まないといけないため、ますます検証プロセスは複雑なものとなっている。結果として、Mixed-Signalのモデリングとシミュレーションツールは、このような機能検証のニーズに対応するために、進化している。このセクションでは、まず、A/Dの境界での信号変換を考慮した低電力設計の詳細をしょうかいすることで、EDAの進化を説明する。Mixed-Signalの低電力技術は、完成したデザインやMixed-Signalのデザインに拡張されたアサーションを使用するメトリックドリブン検証環境に適用することができる。これらの技術は、Mixed-Signalの低電力検証プロセスのために、電力考慮のモデルを作成する技術につながる。

* この本では、電力指向を表現するために、CPF(Common Power Format)を採用する。


Review of Basic Low-Power Features
--------------------------------------------------

* この節では、Power Intentの基本的なコンセプトについて、Mixed-Signalには直接関係しないが、説明する。これは、Mixed-SignalのPower Intentを考慮する場合に、読者が理解しやすいためである。

Power Domain
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Power Domain(電源領域)は、通常動作時に、同じ電力分配網の中にあるインスタンスの集合である。もしくは、電源ON/OFF時に同時に動作するインスタンスの集合である。

* CPFにおけるパワードメインの例を以下に示す。

  ::

    create_power_domain -name Pd_A \
      -shutoff_condition {pm_a} \
      -active_state_conditions \
        {low@!pmc.pw_stdby_pd \
        high@!pmc.pw_awake_pd} \
      -instance inst_A

* この例は、パワードメインとして、Pd_Aが作られ、インスタンスinst_Aがそのパワードメインに属することになる。また、このパワードメインがいつシャットオフモードになるかや、どのような条件で、このパワードメインが通常動作に復帰するか、が示されている。

Isolation
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* アイソレーションのロジックには、通常パワーダウンブロックの出力が使用される。これは、パワーダウンされたブロックの出力が伝搬して、不定値になるのを防ぐためである。電源がスイッチオフされる前に、アイソレーションのために、ブロックの出力がパワーダウンされ、ブロックが完全に電源ONになるまで、このアイソレーションの状態は続く。アイソレーションセルは、2つのパワードメインの間に配置され、通常、パワーオフされた領域から、まだパワーオンしている領域に接続される。

* あるケースでは、パワーダウンロジックへの電気的な接続を防ぐために、ブロックの入力にアイソレーションセルが配置される場合がある。もし、ドライブ側のパワードメインがオフで、受け側のパワードメインがオンの場合、受け側の領域はアイソレーションセルによって、守られている必要がある。そのため、アイソレーションセルは、ドライブ側に置かれたり、受け側に置かれたりする。

* CPFにおけるアイソレーションルールの指定例を以下に示す。

  ::

    create_isolation_rule -name iso1 \
      -isolation_condition pm_iso \
      -from Pd_A -to Pd_B \
      -isolation_output hold

State Retention
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* 電源をシャットオフした時、順序回路(レジスタ, ラッチ, フリップフロップ)の状態を保存しておき、シャットオフの期間中、データを保持しておかんければならない。そうすることで、電源供給を復帰させた時に、素早いリカバリが可能に成る。また、パワーアップシーケンスを速くするためにも、状態をシャットオフ前に戻さないといけない。これを実現するシーケンスエレメントは、特別な状態保持セルによって実装される。

* CPFにおける状態保持ルールの記述を以下に示す。

  ::

    crate_state_retention_rule \
      -name SR1 -domain Pd_A \
      -restore_edge pm_sr_a

Nominal Condition
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Nominal Conditionは、デザインやブロックが動作する通常の状態を表している。動作条件は、パワードメイン内の電源分配網の電圧条件によって決まる。すなわち、パワー電圧・グラウンド電圧・PMOS/NMOSトランジスタの基板電圧である。どのNominal Conditionもパワーオン/オフ/スタンバイの状態で指定される。

* CPFにおけるNominal Conditionの設定を以下に示す。

  ::

    create_nominal_condition -name high \
      -voltage 1.8 -state on
    create_nominal_condition -name low \
      -voltage 1.2 -state standby
    create_nominal_condition -name off \
      -voltage 0.0 -state 0ff

Power Mode
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Power Modeは、全てのPower DomainのNominal Conditionの状態(どのような状態で動作するか)を定義するものである。言い換えると、Power Modeは、それぞれのPower Domainが動作する条件を集めたものである。Power Modeは、有効なPower Domainの動作状態の組み合わせと、無効な組み合わせを指定することができる。もし、どのNominal Conditionの組み合わせも定義されていなければ、イレギュラーなPower Modeとして、低電力仕様が定義される。

* CPFにおけるPower Modeの設定方法を以下に示す。

  ::

    create_power_mode -name ModeD \
      -domain_conditions {PD1@high PD2@high} -default
    create_power_mode -name Mode1 \
      -domain_conditions {PD1@low PD2@high}
    create_power_mode -name Mode2 \
      -domain_conditions {PD1@low PD2@low}

Power Shut Off
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

* Power Shut-Offは、チップの一部だけの電源供給を止める技術である。ブロックの電源供給をシャットダウンするのに先立って、影響を受けるブロックの信号線の接続をアイソレートし、パワーアップシーケンスを最適化するために、順序回路の状態を保存しなければならない。この状態を図18に示す。Mixed-Signalのチップにおいて、パワーアップ/パワーダウンシーケンスの機能検証をする場合、アナログ側において、パワーダウンの状態が正確に反映されるように、デジタルドライバの電圧値が明示されなければならない。これ以降の節で、パワーシャットオフの電圧について、詳細を説明する。

  .. figure:: ./img/ch4_fig18.png
    :alt: Figure18: Illustration of Power Up and Power Down Sequence


Multiple Supply Voltage
--------------------------------------------------

* 低消費電力化と性能のトレードオフを満たすために、回路を複数のPower Domainに分けて、複数の電源供給を行うのは、一般的な手法である。

* 図19に3つのPower Domain(PD1に0.8V, PD2に1.2V, PD3に1.8V)を持った例を示す。あるPower Domainから別のPower Domainに信号を渡すために、Power Domainの間にレベルシフタが挿入されていることに注意しなさい。

  .. figure:: ./img/ch4_fig19.png
    :alt: Figure19: Schematic Diagram of Multiple Power Domains


Low Power in Mixed-Signal
--------------------------------------------------

* Mixed-Signalは、同じチップの上に、アナログとデジタルの機能が搭載されたものである。アナログとデジタルのサブシステム間の相互作用により、システムがどのように動作するかが決まる。アナログとデジタルの境界を信号が行き来する場合、信号はLogic2ElectricalとElectrical2Logicのコネクトモジュールにより、変換されなければならない。

* Mixed-Signalで電力を考慮したシミュレーションを行う場合、CPFを使用したPower Intentを使って、離散ドメインのブロックと連続ドメインのブロックを接続するのが一般的である。この場合、ロジックから電気信号への変換、逆に電気信号からロジックへの変換部のPower Intentを考慮しなければならない。このようなバックグラウンドがあるため、Mixed-Signalシミュレーションにおける電力を考慮した信号の変換モジュールは、EDAベンダによって、実装が行われている。

* 電力考慮の信号変換の役割を説明するために、図20を示す。

  .. figure:: ./img/ch4_fig20.png
    :alt: Figure20: A Mixed-Signal Design with Power Domains

* この図は、PD1というPower Domainに属するデジタルブロックdig_Aが、PD2というPower Domainにあるアナログブロックana_Bをドライブしている例である。さらに、このアナログブロックは、PD3等Power Domainに属しているdig_Cを順々にドライブしている。そして、3つ全てのPower Domainは、1.8Vと1.2Vの動作電圧を持つ。


Logic to Electrical Conversion
--------------------------------------------------

* 図21のL2Eとして示している電力考慮のLogic-Electrical変換モジュールは、ロジック情報を読んで、それにPower Domainの情報を付加した上で、出力に近似的な電気情報を出力する。

  .. figure:: ./img/ch4_fig21.png
    :alt: Figure21: A Power-Aware Logic to Electrical Conversion Module

* 変換プロセスは以下のとおりである。

  * 変換モジュールに定義されたルールによって、4つのロジックの状態が、対応する電気的な電圧値に変換される。あるMixed-Signalのシミュレータでは、Logic-Electricalコネクトモジュールが自動的に回路に挿入される。このコネクトモジュールは、Verilog-AMSで記述されており、ユーザがカスタマイズすることも可能である。

  * Power Domain PD1のシャットオフを検知し、それによって、電源シャットオフによって生じた不定値(X)と論理的なX状態に違いが生じる。前者の場合、電源シャットオフによって生じた不定値と論理的なXを区別するために、ユーザは、ある固定の電圧値やある範囲の電圧にしたいと思うかもしれない(図21の(1)を参照)。

  * Power DomainのNominal状態を検知すると、電圧値もNominalの状態になる。例えば、図21のPD1 Power DomainがhighのNominal状態になったとすると、Logic-Electricalコネクトモジュールは、PD1の境界まできた1'b1を1.2Vに変換する。

  * L2E変換モジュールへの電源供給は、PD1 Power Domainにつながっている。

  * シミュレータは、変換モジュールへの供給電圧とPD2のNominal Conditionが一致していることを動的にチェックしなければいけない。その際に、もし、違反があれば、ユーザに通知する必要がある。(図21の(4)を参照)

* 図22にパワーを考慮したLogic-Electrical変換プロセスの図を示す。この例では、1.8V系から3.3V系にパワーの状態が遷移した後に、シャットオフに移る。

  .. figure:: ./img/ch4_fig22.png
    :alt: Figure22: Power-aware Logic to Electrical Conversion


Electrical to Logic Conversion
--------------------------------------------------

* 電力考慮のElectric-Logic変換モジュールが必要となる基本的な前提は、アナログインスタンスがあるためである。アナログのビヘイビアは、連続ドメインで表現されて、更にPower Domainを切り替えることもできる。これは、ユーザが、PD1のPower Domainにあるブロックを高精度化や性能を正確に測定するために、デジタルブロックからアナログブロックに置き換える際に、最も一般的に見られる。このようなブロックからの出力は、PD2 Power Dmoainにあるデジタルのインスタンスをドライブし、ブロックがアナログだろうとデジタルで実装されていようと関係なく、デジタルブロックへの入力の振る舞いは、矛盾がないことが、期待されることである。

.. * The fundamental premise behind the need for a power-aware electrical to logic conversion is the fact that an analog instance, whose behavior is expressed and simulated in the continuous domain, can also reside in as switchable power domain. This is most commonly seen when the user decides to switch the abstraction of a block, residing in a power domain PD1, from a digital model to an analog one, for reasons such as higher accuracy or measurement of performance characteristics. If the output from such a block is driving a digital instance residing in a power domain PD2, then the expectation is that the behavior of the input to the digital block would be consistent regardless of whether the block was implemented in analog or digital.

  .. figure:: ./img/ch4_fig23.png
    :alt: Figure23: Power Aware Eletrical to Logic Conversion

* パワー考慮のElectric-Logicの変換を行うために必要な要素を以下に示す。

.. * The following factors need to noted when performing an electrical to logic value conversion in power-aware fashion.

  * 変換モジュールの供給電源は、デジタルインスタンスのPower Domainと接続される。(図23の(1)を参照)
..  * The supply voltage of the conversion module must be linked with the working voltage of the power domain the digital instance resides in.(Refer to (1) in Figure 23)

  * PD1がシャットオフしているとき、ロジックの出力は、Xとなる。(図23の(2)を参照)
..  * The logic output will go to an X state when PD1 is in shut-off.(Refer to (2) in)

  * 受け側のデジタルの入力には、アイソレーションセルが挿入されなければならない。これは、オフ領域にある不定値Xがオンドメインに伝搬しないようにするためである。(図23の(3)を参照)
..  * An isolation device need to be placed at the input of the digital receiver in order to prevent propagation of unknown values from the off domain to the on domain.(Refer to (3) in Figure 23)

  * ドライバとレシーバのPower Domainが異なるNominal電圧で動作している場合、Errorとして扱われなければならない。そして、Power Intentの仕様が、電気的に矛盾がないかどうかチェックされなければならない。

..  * If the driving and receiving power domains have different nominal voltage conditions, it must be treated as an error condition and the power intent specification must be checked as this would otherwise result in electrically inconsistent behavior.(Refer to (4) in Figure 23)

* ここで述べたLogic-ElectricalとElectrical-Logicの変換技術は、LogicとElectricalの双方向接続にも適用できる。この場合、変換モジュールは、入力・出力がドライバにもレシーバにもなることができる。

.. * The techniques adopted for logic to electrical and electrical to logic conversion described here also apply to bi-directional logic and electrical conversion where both input and output of the conversion module can act either as a driver or receiver.


Controlloing Analog Power Supply with Low-Power Specification
-----------------------------------------------------------------

* Mixed-Signalの検証で、モジュールの表現をデジタルからアナログに変えたり、その逆に変更したり、ということは、一般的なことである。Mixed-Signalのシミュレーションを実行するために、アナログの電圧源が電源供給源として使用される。Mixed-Signalのブロックの一部がCPFなどのパワー考慮に設計されている場合、電圧源は機能の一部となる。機能検証の場合でも、アナログブロックに対しての電源供給は、システム全体のPower Intentと矛盾がないものでなければならない。

.. * It is quite common in mixed-signal verification to switch the reqresentation of a module from digital to analog or vice versa. To run such mixed-signal simulation, typically an analog voltage source for the power supply will be provided. In cases where part of the mixed-signal system is designed with power awareness specified using, say, CPF, the voltage source becomes a part of design function. The power supply to analog blocks, even for a functional verification, needs to be defined in a way consistent with the system-wide power intent.

* システムレベルの電源供給設計では、デジタル制御信号やPower Intentの仕様で定義された振るまいにより、Power Intetが記述されることは、一般的なことである。あるブロックの記述をアナログの表現に変えた場合、電源供給設計において、SPICEや機能モデルで、デジタル制御信号や電源仕様(これは、CPFなどのPower Intent仕様によって記述される)の効果を矛盾なく表現するのは、非常にチャレンジングである。これは、SPICEや機能モデルでは、電源仕様が再利用できないからである。さらに、電源仕様のどんな変更もアナログ電源供給モジュールの変更をもたらすことになる。これは、コストや時間だけでなく、検知の難しい設計上のエラーも作りこむ可能性がある。

.. * It is common for system-level power architecture to describe the power intent of the chip by digital control signals and the behaviors defined using a power intent specification format. When some of the blocks in the design are switched to their analog reporesentations, it becomes very challenging for the power architects to consistently represent the effect of the digital control signals and/or power specification (that were described using a power intent specification format such as CPF) in the SPICE or behavioral model, since the power intent specification is no longer reusable. In addition, any change in the power intent specification would result in a change in the implementation of the analog power supply module, which not only is a costly and time consuming endeavor, but also creates possibilities of design errors going undetected.

* この問題を解決する方法は、デジタルモデルからアナログモデルに切り替えるときに、ユーザがブロックに電源とグラウンドの接続を明示的に示すことである。このような電源とグラウンド端子は、ビヘイビアモデルにされるか、Verilog-AMSのようなMixed-Signalビヘイビアモデリング言語を使用して、定義された電源仕様から生成される(この場合、仮想的な電源、グラウンドポートとして振る舞う)。あるブロックがデジタルコンポーネントとしてモデリングされていた場合、電源やグラウンドの仕様は、検証ツールによって無視され、これまでのCPFによって記述された電源仕様が使用される。

.. * A way to address this challenge is for the user to explicitly specify the power and ground connections to the block whose abstraction is being switched from a digital model to an analog one. These power and ground connection can then be used to connect a behavioral model, synthesized from the CPF power intent specification using a mixed-signal behavioral modeling language such as Verilog-AMS, that can act as a virtual power-supply and ground model. When the given block is represented as a digital component, the power and ground specifications are ignored by the verification tools and traditional power domain speficifcations expressed using common power intent specification language are used.

  .. figure:: ./img/ch4_fig24.png
    :alt: Figure24: Controlling Voltage Supply with Common Power Format (CPF) Specification

* 図24では、デジタルブロックdig_A, dig_Cは、Verilogで記述され、電源仕様はCPFで記述されている。アナログブロックana_Bも低電力の特徴を持っており、電源仕様はデジタルブロックと同じ仕様で記述されているものとする。ana_BブロックがSPICEネットリストや回路図で記述されている場合に、ユーザが電源、グラウンド接続を与える場合のコード例を以下に示す。機能検証ツールは、ana_Bの電源仕様に従って、電源モデルを生成し、ana_Bに仮想的な電源の接続を作る。そして、デジタルブロクと同じ言語を使用して、アナログブロックでも電源仕様の効果をシミュレーションする。

.. * In Figure 24, the digital blocks, dig_A and dig_C, are represented in Verilog, and their power behavior is defined using CPF. Assume that the analog block ana_B also has some low-power characteristics and that the power behavior is expressed in the same format as the digital blocks. The code snippet below shows how the user specifies a power and ground connection for the ana_B block that would be used when ana_B is represented as an analog component, possibly as an SPICE netlist or a schematic. The functional verification tool can synthesize a power supply model in accordance with the power domain specification of the block ana_B and the make a virtual connection of the power supply model to the power connection of ana_B and thereby simulate the effet of power domain specification - using the same language that is being used for pure digital blocks elsewhere in the design - on the analog blocks.

* CPFにおけるPower/Groundピンの定義

.. * Specification for Power and Ground Pins in CPF.

  ::
    # Power Domain
    create_power_domain -name PD2 -instances {ana_B} -shutoff_condition pso1

    # Specify global power supply and ground
    update_power_domain -name PD2 \
      -primary_power_net vdd -primary gound_net gnd

* ana_Bブロックは、PD2のPower Domainに属している。ana_BがVDD/GND端子を持ったSPICEのようなアナログ記述になった場合、機能検証プロセスは、アナログブロックana_BがパワードメインPD2にあるものとして、同じように電源の供給を行い、検証を続ける。

.. * The block ana_B belongs to a power domain PD2. When ana_B is changed to an analog representation, such as a SPICE sub-circuit with power supply port vdd and ground port gnd, the functional verification process will continue to work applying the same power supply characteristics as laid out in the specification of power domain PD2 to the analog block ana_B.

Changes in Low-Power Verification in Mixed-Signal
==================================================

* このセクションでは、Mixed-Signalのシステムで低電力の検証を行うための課題を説明する。

Reference Voltage Selection for Power-Aware Electrical to Logic Conversion
------------------------------------------------------------------------------

* Electrical-Logic変換モジュールのリファレンス電圧によっては、意図しない結果が得られることがある。図25の例を考えなさい。この例では、アナログブロックana_Aは1.2Vで動作しているとする。もし、このアナログブロックから、ロジック1を出力し、Electrical-Logic変換モジュールを通したとする。この場合、3.3Vになって欲しいが、誤った電圧値になることがある。

  .. figure:: ./img/ch4_fig25.png
    :alt: Figure25: Reference Voltage Selection for Power Aware Electrical to Logic Conversion

* この場合、アナログブロックana_Aが属しているPower Domainの動作状態によって、Electrical-Logic変換モジュールのリファレンス電源が決まってしまう。


Multiple Drivers and Nominal Voltage Related Conflicts
----------------------------------------------------------

Example
^^^^^^^^^^^
